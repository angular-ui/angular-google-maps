{"_id":"grunt-template-jasmine-istanbul","_rev":"18-f2fa8ba00fd5a0c1ac745dc6e5992390","name":"grunt-template-jasmine-istanbul","description":"Code coverage template mix-in for grunt-contrib-jasmine, using istanbul","dist-tags":{"latest":"0.2.5"},"versions":{"0.1.0":{"name":"grunt-template-jasmine-istanbul","description":"Code coverage template mix-in for grunt-contrib-jasmine, using istanbul","version":"0.1.0","keywords":["grunt","template","jasmine","istanbul"],"author":{"name":"Manuel Leuenberger"},"repository":{"type":"git","url":"https://github.com/maenu/grunt-template-jasmine-istanbul.git"},"main":"src/main/js/template-jasmine-istanbul.js","dependencies":{"istanbul":"~0.1.30"},"devDependencies":{"grunt":"~0.4.0rc7","grunt-contrib-jasmine":"~0.3.1","grunt-contrib-nodeunit":"~0.1.1","grunt-contrib-clean":"~0.4.0rc6"},"readme":"Code coverage template mix-in for grunt-contrib-jasmine, using istanbul\n-----------------------------------------\n\n**This template is not yet published on npm**\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-istanbul --save-dev\n```\n\n## Template Options\n\n### templateOptions.coverage\nType: `String`\nMandatory.\n\nThe file path where to store the `coverage.json`.\n\n### templateOptions.report\nType: `String`\nMandatory.\n\nThe directory path where to store the coverage report.\n\n### templateOptions.template\nType: `String` `Object`\nDefault: jasmine's default template\n\nThe template to mix-in coverage.\n\n### templateOptions.templateOptions\nType: `Object`\nDefault: `undefined`\n\nThe options to pass to the mixed-in template.\n\n## Sample usage\n\n```js\n// Example configuration\ngrunt.initConfig({\n\tjasmine: {\n\t\tcoverage: ['src/main/js/*.js'],\n\t\toptions: {\n\t\t\tspecs: ['src/test/js/*.js'],\n\t\t\ttemplate: require('grunt-template-jasmine-istanbul'),\n\t\t\ttemplateOptions: {\n\t\t\t\tcoverage: 'bin/coverage/coverage.json',\n\t\t\t\treport: 'bin/coverage',\n\t\t\t}\n\t\t}\n\t}\n}\n```\n","readmeFilename":"README.md","_id":"grunt-template-jasmine-istanbul@0.1.0","dist":{"shasum":"b52072e907e7ec060da611cf24764911dc31dda9","tarball":"http://registry.npmjs.org/grunt-template-jasmine-istanbul/-/grunt-template-jasmine-istanbul-0.1.0.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"maenu","email":"maenuleu@gmx.ch"},"maintainers":[{"name":"maenu","email":"maenuleu@gmx.ch"}],"directories":{}},"0.1.1":{"name":"grunt-template-jasmine-istanbul","description":"Code coverage template mix-in for grunt-contrib-jasmine, using istanbul","version":"0.1.1","keywords":["grunt","template","jasmine","istanbul"],"author":{"name":"Manuel Leuenberger"},"repository":{"type":"git","url":"https://github.com/maenu/grunt-template-jasmine-istanbul.git"},"main":"src/main/js/template.js","dependencies":{"istanbul":"~0.1.30"},"devDependencies":{"grunt":"~0.4.0rc7","grunt-contrib-jasmine":"~0.3.1","grunt-contrib-nodeunit":"~0.1.1","grunt-contrib-clean":"~0.4.0rc6"},"readme":"Code coverage template mix-in for grunt-contrib-jasmine, using istanbul\n-----------------------------------------\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-istanbul --save-dev\n```\n\n## Template Options\n\n### templateOptions.coverage\nType: `String`\nMandatory.\n\nThe file path where to store the `coverage.json`.\n\n### templateOptions.report\nType: `String`\nMandatory.\n\nThe directory path where to store the coverage report.\n\n### templateOptions.template\nType: `String` `Object`\nDefault: jasmine's default template\n\nThe template to mix-in coverage.\n\n### templateOptions.templateOptions\nType: `Object`\nDefault: `undefined`\n\nThe options to pass to the mixed-in template.\n\n## Sample usage\n\n```js\n// Example configuration\ngrunt.initConfig({\n\tjasmine: {\n\t\tcoverage: ['src/main/js/*.js'],\n\t\toptions: {\n\t\t\tspecs: ['src/test/js/*.js'],\n\t\t\ttemplate: require('grunt-template-jasmine-istanbul'),\n\t\t\ttemplateOptions: {\n\t\t\t\tcoverage: 'bin/coverage/coverage.json',\n\t\t\t\treport: 'bin/coverage',\n\t\t\t}\n\t\t}\n\t}\n}\n```\n","readmeFilename":"README.md","_id":"grunt-template-jasmine-istanbul@0.1.1","dist":{"shasum":"7d939b4849bffb595060f0eb1a9a579ac37a64db","tarball":"http://registry.npmjs.org/grunt-template-jasmine-istanbul/-/grunt-template-jasmine-istanbul-0.1.1.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"maenu","email":"maenuleu@gmx.ch"},"maintainers":[{"name":"maenu","email":"maenuleu@gmx.ch"}],"directories":{}},"0.2.0":{"name":"grunt-template-jasmine-istanbul","description":"Code coverage template mix-in for grunt-contrib-jasmine, using istanbul","version":"0.2.0","keywords":["grunt","template","jasmine","istanbul"],"author":{"name":"Manuel Leuenberger"},"repository":{"type":"git","url":"https://github.com/maenu/grunt-template-jasmine-istanbul.git"},"main":"src/main/js/template.js","dependencies":{"istanbul":"~0.1.30"},"devDependencies":{"grunt":"~0.4.0","grunt-contrib-jasmine":"~0.3.1","grunt-contrib-nodeunit":"~0.1.2","grunt-contrib-clean":"~0.4.0"},"readme":"Code coverage template mix-in for grunt-contrib-jasmine, using istanbul\n-----------------------------------------\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-istanbul --save-dev\n```\n\n## Template Options\n\n### templateOptions.coverage\nType: `String`\nMandatory.\n\nThe file path where to store the `coverage.json`.\n\n### templateOptions.report\nType: `String | Object | Array`\nMandatory.\n\nIf a `String` is given, it will be used as the path where a HTML report is generated.\nIf an `Object` is given, it must have the properties `type` and `options`, where `type` is a `String` and `options` an `Object`.\n`type` and `options` are used to create the report by passing it to `istanbul`s [`Report.create(type, options)`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/Report.html).\nFor example, if you want to generate a Cobertura report at `bin/coverage/cobertura`, use this:\n\n````js\nreport: {\n\ttype: 'cobertura',\n\toptions: {\n\t\tdir: 'bin/coverage/cobertura'\n\t}\n}\n````\n\nIf an `Array` is given, it must consist of `Object`s of the form just described.\n\n### templateOptions.template\nType: `String | Object`\nDefault: jasmine's default template\n\nThe template to mix-in coverage.\n\n### templateOptions.templateOptions\nType: `Object`\nDefault: `undefined`\n\nThe options to pass to the mixed-in template.\n\n## Sample usage\n\nHave a look at\n[this example](https://github.com/maenu/grunt-template-jasmine-istanbul-example).\n\n```js\n// Example configuration\ngrunt.initConfig({\n\tjasmine: {\n\t\tcoverage: {\n\t\t\tsrc: ['src/main/js/*.js'],\n\t\t\toptions: {\n\t\t\t\tspecs: ['src/test/js/*.js'],\n\t\t\t\ttemplate: require('grunt-template-jasmine-istanbul'),\n\t\t\t\ttemplateOptions: {\n\t\t\t\t\tcoverage: 'bin/coverage/coverage.json',\n\t\t\t\t\treport: 'bin/coverage',\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n","readmeFilename":"README.md","_id":"grunt-template-jasmine-istanbul@0.2.0","dist":{"shasum":"758ad03fe1d9a3bc5f610dd52e90d4c80fbcc2f7","tarball":"http://registry.npmjs.org/grunt-template-jasmine-istanbul/-/grunt-template-jasmine-istanbul-0.2.0.tgz"},"_from":".","_npmVersion":"1.2.12","_npmUser":{"name":"maenu","email":"maenuleu@gmx.ch"},"maintainers":[{"name":"maenu","email":"maenuleu@gmx.ch"}],"directories":{}},"0.2.1":{"name":"grunt-template-jasmine-istanbul","description":"Code coverage template mix-in for grunt-contrib-jasmine, using istanbul","version":"0.2.1","keywords":["grunt","template","jasmine","istanbul"],"author":{"name":"Manuel Leuenberger"},"repository":{"type":"git","url":"https://github.com/maenu/grunt-template-jasmine-istanbul.git"},"main":"src/main/js/template.js","dependencies":{"istanbul":"~0.1.30"},"devDependencies":{"grunt":"~0.4.0","grunt-contrib-jasmine":"~0.3.1","grunt-contrib-nodeunit":"~0.1.2","grunt-contrib-clean":"~0.4.0"},"readme":"Code coverage template mix-in for [grunt-contrib-jasmine](https://github.com/gruntjs/grunt-contrib-jasmine), using [istanbul](https://github.com/gotwarlost/istanbul)\n-----------------------------------------\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-istanbul --save-dev\n```\n\n## Template Options\n\n### templateOptions.coverage\nType: `String`\nMandatory.\n\nThe file path where to store the `coverage.json`.\n\n### templateOptions.report\nType: `String | Object | Array`\nMandatory.\n\nIf a `String` is given, it will be used as the path where a HTML report is generated.\nIf an `Object` is given, it must have the properties `type` and `options`, where `type` is a `String` and `options` an `Object`.\n`type` and `options` are used to create the report by passing it to `istanbul`s [`Report.create(type, options)`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/Report.html).\nFor example, if you want to generate a Cobertura report at `bin/coverage/cobertura`, use this:\n\n````js\nreport: {\n\ttype: 'cobertura',\n\toptions: {\n\t\tdir: 'bin/coverage/cobertura'\n\t}\n}\n````\n\nIf an `Array` is given, it must consist of `Object`s of the form just described.\n\n### templateOptions.template\nType: `String | Object`\nDefault: jasmine's default template\n\nThe template to mix-in coverage.\n\n### templateOptions.templateOptions\nType: `Object`\nDefault: `undefined`\n\nThe options to pass to the mixed-in template.\n\n## Sample Usage\n\n### Basic\n\nHave a look at [this example](https://github.com/maenu/grunt-template-jasmine-istanbul-example).\n\n```js\n// Example configuration\ngrunt.initConfig({\n\tjasmine: {\n\t\tcoverage: {\n\t\t\tsrc: ['src/main/js/*.js'],\n\t\t\toptions: {\n\t\t\t\tspecs: ['src/test/js/*.js'],\n\t\t\t\ttemplate: require('grunt-template-jasmine-istanbul'),\n\t\t\t\ttemplateOptions: {\n\t\t\t\t\tcoverage: 'bin/coverage/coverage.json',\n\t\t\t\t\treport: 'bin/coverage',\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### RequireJS\n\nHave a look at [this example](https://github.com/maenu/grunt-template-jasmine-istanbul-example/tree/requirejs).\nNote that you need to configure the `baseUrl` to point to the instrumented sources, as described in the section [below](https://github.com/maenu/grunt-template-jasmine-istanbul#a-single-requirement).\n\n```js\ngrunt.initConfig({\n    jasmine: {\n        coverage: {\n            src: ['src/main/js/*.js'],\n            options: {\n                specs: ['src/test/js/*.js'],\n                template: require('grunt-template-jasmine-istanbul'),\n                templateOptions: {\n                    coverage: 'bin/coverage/coverage.json',\n                    report: 'bin/coverage',\n                    template: require('grunt-template-jasmine-requirejs'),\n                    templateOptions: {\n                        requireConfig: {\n                            baseUrl: '.grunt/grunt-contrib-jasmine/src/main/js/'\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n## Mixed-in Templates\n\n### The Idea\n\nDo you have another template you want to use, but you also want to collect code coverage at the same time?\nThen you can use a mixed-in template, that's what they are for.\nThe idea behind a mixed-in template is simple:\nIstanbul generates code coverage information by instrumenting the sources before they are run and by generating reports after they have run.\nTherefore this templates acts as a test pre- and post-processor, but it doesn't interfere with the actual running of the tests.\nThis makes it possible to use another template as a mix-in template to run the tests, defined by `templateOptions.template` and can be configured with `templateOptions.templateOptions`.\n\n### A Single Requirement\n\nA mixed-in template needs to load the instrumented sources in order for the coverage reports to be correctly generated.\nThis template copies instrumented versions of the sources to a temporary location at `.grunt/grunt-contrib-jasmine/`.\nIf your mixed-in template simply includes the sources, as the default template does, you don't need to account for that, since this template replaces the `src` option with the paths to the instrumented versions.\nIf your mixed-in template loads the sources differently, e.g. directly from the file system, you may need to reconfigure the mixed-in template.\n","readmeFilename":"README.md","_id":"grunt-template-jasmine-istanbul@0.2.1","dist":{"shasum":"5f2922caa65ed028e1c43edb853ff30b6ece439e","tarball":"http://registry.npmjs.org/grunt-template-jasmine-istanbul/-/grunt-template-jasmine-istanbul-0.2.1.tgz"},"_from":".","_npmVersion":"1.2.12","_npmUser":{"name":"maenu","email":"maenuleu@gmx.ch"},"maintainers":[{"name":"maenu","email":"maenuleu@gmx.ch"}],"directories":{}},"0.2.2":{"name":"grunt-template-jasmine-istanbul","description":"Code coverage template mix-in for grunt-contrib-jasmine, using istanbul","version":"0.2.2","keywords":["grunt","template","jasmine","istanbul"],"author":{"name":"maenu"},"repository":{"type":"git","url":"https://github.com/maenu/grunt-template-jasmine-istanbul.git"},"main":"src/main/js/template.js","dependencies":{"istanbul":">=0.1.30"},"peerDependencies":{"grunt-contrib-jasmine":">=0.3.1"},"devDependencies":{"grunt":">=0.4.0","grunt-contrib-jasmine":">=0.3.1","grunt-contrib-nodeunit":">=0.1.2","grunt-contrib-clean":">=0.4.0","grunt-contrib-yuidoc":">=0.4.0","grunt-contrib-jshint":">=0.4.3"},"readme":"# Code coverage template mix-in for [grunt-contrib-jasmine](https://github.com/gruntjs/grunt-contrib-jasmine), using [istanbul](https://github.com/gotwarlost/istanbul)\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-istanbul --save-dev\n```\n\n## Template Options\n\n### templateOptions.coverage\nType: `String`\nMandatory.\n\nThe file path where to store the `coverage.json`.\n\n### templateOptions.report\nType: `String | Object | Array`\nMandatory.\n\nIf a `String` is given, it will be used as the path where a HTML report is generated.\nIf an `Object` is given, it must have the properties `type` and `options`, where `type` is a `String` and `options` an `Object`.\n`type` and `options` are used to create the report by passing it to `istanbul`s [`Report.create(type, options)`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/Report.html).\nFor example, if you want to generate a Cobertura report at `bin/coverage/cobertura`, use this:\n\n````js\nreport: {\n\ttype: 'cobertura',\n\toptions: {\n\t\tdir: 'bin/coverage/cobertura'\n\t}\n}\n````\n\nIf an `Array` is given, it must consist of `Object`s of the form just described.\n\nThe supported types are:\n\n * [`html`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/HtmlReport.html)\n * [`text`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/TextReport.html)\n * [`text-summary`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/TextSummaryReport.html)\n * [`lcov`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/LcovReport.html)\n * [`lcovonly`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/LcovOnlyReport.html)\n * [`cobertura`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/CoberturaReport.html)\n\n### templateOptions.replace\n\nType: `Boolean`\nDefault: `true`\n\nWhether or not the `src` scripts are replaced by the paths to their instrumented versions.\nThis is useful when you want the mixed-in template to work with the original sources, and you want to serve the instrumented sources by redirecting request on the server side.\n\n### templateOptions.template\nType: `String | Object`\nDefault: jasmine's default template\n\nThe template to mix-in coverage.\n\n### templateOptions.templateOptions\nType: `Object`\nDefault: `undefined`\n\nThe options to pass to the mixed-in template.\n\n## Sample Usage\n\n### Basic\n\nHave a look at [this example](https://github.com/maenu/grunt-template-jasmine-istanbul-example).\n\n```js\n// Example configuration\ngrunt.initConfig({\n\tjasmine: {\n\t\tcoverage: {\n\t\t\tsrc: ['src/main/js/*.js'],\n\t\t\toptions: {\n\t\t\t\tspecs: ['src/test/js/*.js'],\n\t\t\t\ttemplate: require('grunt-template-jasmine-istanbul'),\n\t\t\t\ttemplateOptions: {\n\t\t\t\t\tcoverage: 'bin/coverage/coverage.json',\n\t\t\t\t\treport: 'bin/coverage',\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### RequireJS\n\nHave a look at [this example](https://github.com/maenu/grunt-template-jasmine-istanbul-example/tree/requirejs).\nNote that you need to configure the `baseUrl` to point to the instrumented sources, as described in the section [below](https://github.com/maenu/grunt-template-jasmine-istanbul#a-single-arequirement).\n\n```js\ngrunt.initConfig({\n    jasmine: {\n        coverage: {\n            src: ['src/main/js/*.js'],\n            options: {\n                specs: ['src/test/js/*.js'],\n                template: require('grunt-template-jasmine-istanbul'),\n                templateOptions: {\n                    coverage: 'bin/coverage/coverage.json',\n                    report: 'bin/coverage',\n                    template: require('grunt-template-jasmine-requirejs'),\n                    templateOptions: {\n                        requireConfig: {\n                            baseUrl: './.grunt/grunt-contrib-jasmine/src/main/js/'\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n#### Is it really that easy?\n\nNo.\n\nSetting `baseUrl` to that location may screw up your whole configuration, because paths relative to the original sources are broken.\nTherefore, if this happens to you, instead of directly loading the instrumented sources, set `replace: false`, intercept request to the original sources and redirect them to the instrumented versions.\nYou can do this on both the [client side](https://github.com/maenu/grunt-template-jasmine-istanbul-example/tree/requirejs-client), or the [server side](https://github.com/maenu/grunt-template-jasmine-istanbul-example/tree/requirejs-server).\nLook at the corresponding `Grunfile.js` files and be filled with horror: Yes, this is nasty, but it (seems to) works.\n\n## Mixed-in Templates\n\n### The Idea\n\nDo you have another template you want to use, but you also want to collect code coverage at the same time?\nThen you can use a mixed-in template, that's what they are for.\nThe idea behind a mixed-in template is simple:\nIstanbul generates code coverage information by instrumenting the sources before they are run and by generating reports after they have run.\nTherefore this templates acts as a test pre- and post-processor, but it doesn't interfere with the actual running of the tests.\nThis makes it possible to use another template as a mix-in template to run the tests, defined by `templateOptions.template` and can be configured with `templateOptions.templateOptions`.\n\n### A Single Requirement\n\nA mixed-in template needs to load the instrumented sources in order for the coverage reports to be correctly generated.\nThis template copies instrumented versions of the sources to a temporary location at `.grunt/grunt-contrib-jasmine/`.\nIf your mixed-in template simply includes the sources, as the default template does, you don't need to account for that, since this template replaces the `src` option with the paths to the instrumented versions.\nIf your mixed-in template loads the sources differently, e.g. directly from the file system, you may need to reconfigure the mixed-in template.\n\n## Change log\n\n * v0.2.2, 11.05.13, added `replace` option, so it can be prevented that the original `src` option is replaced with their instrumented versions","readmeFilename":"README.md","_id":"grunt-template-jasmine-istanbul@0.2.2","dist":{"shasum":"2070f12d0961b116de7719aa5199f55b2d08c803","tarball":"http://registry.npmjs.org/grunt-template-jasmine-istanbul/-/grunt-template-jasmine-istanbul-0.2.2.tgz"},"_from":".","_npmVersion":"1.2.17","_npmUser":{"name":"maenu","email":"maenuleu@gmx.ch"},"maintainers":[{"name":"maenu","email":"maenuleu@gmx.ch"}],"directories":{}},"0.2.3":{"name":"grunt-template-jasmine-istanbul","description":"Code coverage template mix-in for grunt-contrib-jasmine, using istanbul","version":"0.2.3","keywords":["grunt","template","jasmine","istanbul"],"author":{"name":"maenu"},"repository":{"type":"git","url":"https://github.com/maenu/grunt-template-jasmine-istanbul.git"},"main":"src/main/js/template.js","dependencies":{"istanbul":">=0.1.30"},"peerDependencies":{"grunt":">=0.4.0","grunt-contrib-jasmine":">=0.3.1"},"devDependencies":{"grunt":">=0.4.0","grunt-contrib-jasmine":">=0.3.1","grunt-contrib-nodeunit":">=0.1.2","grunt-contrib-clean":">=0.4.0","grunt-contrib-yuidoc":">=0.4.0","grunt-contrib-jshint":">=0.4.3"},"readme":"# Code coverage template mix-in for [grunt-contrib-jasmine](https://github.com/gruntjs/grunt-contrib-jasmine), using [istanbul](https://github.com/gotwarlost/istanbul)\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-istanbul --save-dev\n```\n\n## Template Options\n\n### templateOptions.coverage\nType: `String`\nMandatory.\n\nThe file path where to store the `coverage.json`.\n\n### templateOptions.report\nType: `String | Object | Array`\nMandatory.\n\nIf a `String` is given, it will be used as the path where a HTML report is generated.\nIf an `Object` is given, it must have the properties `type` and `options`, where `type` is a `String` and `options` an `Object`.\n`type` and `options` are used to create the report by passing it to `istanbul`s [`Report.create(type, options)`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/Report.html).\nFor example, if you want to generate a Cobertura report at `bin/coverage/cobertura`, use this:\n\n````js\nreport: {\n\ttype: 'cobertura',\n\toptions: {\n\t\tdir: 'bin/coverage/cobertura'\n\t}\n}\n````\n\nIf an `Array` is given, it must consist of `Object`s of the form just described.\n\nThe supported types are:\n\n * [`html`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/HtmlReport.html)\n * [`text`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/TextReport.html)\n * [`text-summary`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/TextSummaryReport.html)\n * [`lcov`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/LcovReport.html)\n * [`lcovonly`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/LcovOnlyReport.html)\n * [`cobertura`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/CoberturaReport.html)\n\n### templateOptions.replace\n\nType: `Boolean`\nDefault: `true`\n\nWhether or not the `src` scripts are replaced by the paths to their instrumented versions.\nThis is useful when you want the mixed-in template to work with the original sources, and you want to serve the instrumented sources by redirecting request on the server side.\n\n### templateOptions.thresholds\nType: `Object`\nDefault: `undefined`\n\nThresholds for any of the metrics that Istanbul measures.\nIf a threshold is not met, a warning is emitted.\nSee example below for available metrics.\n\n### templateOptions.template\nType: `String | Object`\nDefault: jasmine's default template\n\nThe template to mix-in coverage.\n\n### templateOptions.templateOptions\nType: `Object`\nDefault: `undefined`\n\nThe options to pass to the mixed-in template.\n\n## Examples\n\nThere are multiple examples at a [example repository](https://github.com/maenu/grunt-template-jasmine-istanbul-example).\n\n### Simple\n\nHave a look at [this example](https://github.com/maenu/grunt-template-jasmine-istanbul-example).\n\n```js\n// Example configuration\ngrunt.initConfig({\n\tjasmine: {\n\t\tcoverage: {\n\t\t\tsrc: ['src/main/js/*.js'],\n\t\t\toptions: {\n\t\t\t\tspecs: ['src/test/js/*.js'],\n\t\t\t\ttemplate: require('grunt-template-jasmine-istanbul'),\n\t\t\t\ttemplateOptions: {\n\t\t\t\t\tcoverage: 'bin/coverage/coverage.json',\n\t\t\t\t\treport: 'bin/coverage',\n                    thresholds: {\n                        lines: 75,\n                        statements: 75,\n                        branches: 75,\n                        functions: 90\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### RequireJS\n\nHave a look at [this example](https://github.com/maenu/grunt-template-jasmine-istanbul-example/tree/requirejs).\nNote that you need to configure the `baseUrl` to point to the instrumented sources, as described in the section [below](https://github.com/maenu/grunt-template-jasmine-istanbul#a-single-arequirement).\n\n```js\ngrunt.initConfig({\n    jasmine: {\n        coverage: {\n            src: ['src/main/js/*.js'],\n            options: {\n                specs: ['src/test/js/*.js'],\n                template: require('grunt-template-jasmine-istanbul'),\n                templateOptions: {\n                    coverage: 'bin/coverage/coverage.json',\n                    report: 'bin/coverage',\n                    template: require('grunt-template-jasmine-requirejs'),\n                    templateOptions: {\n                        requireConfig: {\n                            baseUrl: '.grunt/grunt-contrib-jasmine/src/main/js/'\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n#### Is it really that easy?\n\nNo.\n\nSetting `baseUrl` to that location may screw up your whole configuration, because paths relative to the original sources are broken.\nTherefore, if this happens to you, instead of directly loading the instrumented sources, set `replace: false`, intercept request to the original sources and redirect them to the instrumented versions.\nYou can do this on both the [client side](https://github.com/maenu/grunt-template-jasmine-istanbul-example/tree/requirejs-client), or the [server side](https://github.com/maenu/grunt-template-jasmine-istanbul-example/tree/requirejs-server).\nLook at the corresponding `Grunfile.js` files and be filled with horror: Yes, this is nasty, but it (seems to) works.\n\n## Mixed-in Templates\n\n### The Idea\n\nDo you have another template you want to use, but you also want to collect code coverage at the same time?\nThen you can use a mixed-in template, that's what they are for.\nThe idea behind a mixed-in template is simple:\nIstanbul generates code coverage information by instrumenting the sources before they are run and by generating reports after they have run.\nTherefore this templates acts as a test pre- and post-processor, but it doesn't interfere with the actual running of the tests.\nThis makes it possible to use another template as a mix-in template to run the tests, defined by `templateOptions.template` and can be configured with `templateOptions.templateOptions`.\n\n### A Single Requirement\n\nA mixed-in template needs to load the instrumented sources in order for the coverage reports to be correctly generated.\nThis template copies instrumented versions of the sources to a temporary location at `.grunt/grunt-contrib-jasmine/`.\nIf your mixed-in template simply includes the sources, as the default template does, you don't need to account for that, since this template replaces the `src` option with the paths to the instrumented versions.\nIf your mixed-in template loads the sources differently, e.g. directly from the file system, you may need to reconfigure the mixed-in template.\n\n## Change log\n\n * v0.2.3, 12.05.13, merged `thresholds` from @larsthorup #9 which can abort a build with too low coverage\n * v0.2.2, 11.05.13, added `replace` option, so it can be prevented that the original `src` option is replaced with their instrumented versions\n","readmeFilename":"README.md","_id":"grunt-template-jasmine-istanbul@0.2.3","dist":{"shasum":"2471ba7885ece7899ba763f17a2d5f21088fa8bc","tarball":"http://registry.npmjs.org/grunt-template-jasmine-istanbul/-/grunt-template-jasmine-istanbul-0.2.3.tgz"},"_from":".","_npmVersion":"1.2.17","_npmUser":{"name":"maenu","email":"maenuleu@gmx.ch"},"maintainers":[{"name":"maenu","email":"maenuleu@gmx.ch"}],"directories":{}},"0.2.4":{"name":"grunt-template-jasmine-istanbul","description":"Code coverage template mix-in for grunt-contrib-jasmine, using istanbul","version":"0.2.4","keywords":["grunt","template","jasmine","istanbul"],"author":{"name":"maenu"},"repository":{"type":"git","url":"https://github.com/maenu/grunt-template-jasmine-istanbul.git"},"main":"src/main/js/template.js","dependencies":{"istanbul":">=0.1.30"},"peerDependencies":{"grunt":">=0.4.0","grunt-contrib-jasmine":">=0.3.1"},"devDependencies":{"grunt":">=0.4.0","grunt-contrib-jasmine":">=0.3.1","grunt-contrib-nodeunit":">=0.1.2","grunt-contrib-clean":">=0.4.0","grunt-contrib-yuidoc":">=0.4.0","grunt-contrib-jshint":">=0.4.3"},"readme":"# Code coverage template mix-in for [grunt-contrib-jasmine](https://github.com/gruntjs/grunt-contrib-jasmine), using [istanbul](https://github.com/gotwarlost/istanbul)\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-istanbul --save-dev\n```\n\n## Template Options\n\n### templateOptions.coverage\nType: `String`\nMandatory.\n\nThe file path where to store the `coverage.json`.\n\n### templateOptions.report\nType: `String | Object | Array`\nMandatory.\n\nIf a `String` is given, it will be used as the path where a HTML report is generated.\nIf an `Object` is given, it must have the properties `type` and `options`, where `type` is a `String` and `options` an `Object`.\n`type` and `options` are used to create the report by passing it to `istanbul`s [`Report.create(type, options)`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/Report.html).\nFor example, if you want to generate a Cobertura report at `bin/coverage/cobertura`, use this:\n\n````js\nreport: {\n\ttype: 'cobertura',\n\toptions: {\n\t\tdir: 'bin/coverage/cobertura'\n\t}\n}\n````\n\nIf an `Array` is given, it must consist of `Object`s of the form just described.\n\nThe supported types are:\n\n * [`html`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/HtmlReport.html)\n * [`text`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/TextReport.html)\n * [`text-summary`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/TextSummaryReport.html)\n * [`lcov`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/LcovReport.html)\n * [`lcovonly`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/LcovOnlyReport.html)\n * [`cobertura`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/CoberturaReport.html)\n\n### templateOptions.replace\n\nType: `Boolean`\nDefault: `true`\n\nWhether or not the `src` scripts are replaced by the paths to their instrumented versions.\nThis is useful when you want the mixed-in template to work with the original sources, and you want to serve the instrumented sources by redirecting request on the server side.\n\n### templateOptions.thresholds\nType: `Object`\nDefault: `undefined`\n\nThresholds for any of the metrics that Istanbul measures.\nIf a threshold is not met, a warning is emitted.\nSee example below for available metrics.\n\n### templateOptions.template\nType: `String | Object`\nDefault: jasmine's default template\n\nThe template to mix-in coverage.\n\n### templateOptions.templateOptions\nType: `Object`\nDefault: `undefined`\n\nThe options to pass to the mixed-in template.\n\n## Examples\n\nThere are multiple examples at a [example repository](https://github.com/maenu/grunt-template-jasmine-istanbul-example).\n\n### Simple\n\nHave a look at [this example](https://github.com/maenu/grunt-template-jasmine-istanbul-example).\n\n```js\n// Example configuration\ngrunt.initConfig({\n\tjasmine: {\n\t\tcoverage: {\n\t\t\tsrc: ['src/main/js/*.js'],\n\t\t\toptions: {\n\t\t\t\tspecs: ['src/test/js/*.js'],\n\t\t\t\ttemplate: require('grunt-template-jasmine-istanbul'),\n\t\t\t\ttemplateOptions: {\n\t\t\t\t\tcoverage: 'bin/coverage/coverage.json',\n\t\t\t\t\treport: 'bin/coverage',\n                    thresholds: {\n                        lines: 75,\n                        statements: 75,\n                        branches: 75,\n                        functions: 90\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### RequireJS\n\nHave a look at [this example](https://github.com/maenu/grunt-template-jasmine-istanbul-example/tree/requirejs).\nNote that you need to configure the `baseUrl` to point to the instrumented sources, as described in the section [below](https://github.com/maenu/grunt-template-jasmine-istanbul#a-single-arequirement).\n\n```js\ngrunt.initConfig({\n    jasmine: {\n        coverage: {\n            src: ['src/main/js/*.js'],\n            options: {\n                specs: ['src/test/js/*.js'],\n                template: require('grunt-template-jasmine-istanbul'),\n                templateOptions: {\n                    coverage: 'bin/coverage/coverage.json',\n                    report: 'bin/coverage',\n                    template: require('grunt-template-jasmine-requirejs'),\n                    templateOptions: {\n                        requireConfig: {\n                            baseUrl: '.grunt/grunt-contrib-jasmine/src/main/js/'\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n#### Is it really that easy?\n\nNo.\n\nSetting `baseUrl` to that location may screw up your whole configuration, because paths relative to the original sources are broken.\nTherefore, if this happens to you, instead of directly loading the instrumented sources, set `replace: false`, intercept request to the original sources and redirect them to the instrumented versions.\nYou can do this on both the [client side](https://github.com/maenu/grunt-template-jasmine-istanbul-example/tree/requirejs-client), or the [server side](https://github.com/maenu/grunt-template-jasmine-istanbul-example/tree/requirejs-server).\nLook at the corresponding `Grunfile.js` files and be filled with horror: Yes, this is nasty, but it (seems to) works.\n\n## Mixed-in Templates\n\n### The Idea\n\nDo you have another template you want to use, but you also want to collect code coverage at the same time?\nThen you can use a mixed-in template, that's what they are for.\nThe idea behind a mixed-in template is simple:\nIstanbul generates code coverage information by instrumenting the sources before they are run and by generating reports after they have run.\nTherefore this templates acts as a test pre- and post-processor, but it doesn't interfere with the actual running of the tests.\nThis makes it possible to use another template as a mix-in template to run the tests, defined by `templateOptions.template` and can be configured with `templateOptions.templateOptions`.\n\n### A Single Requirement\n\nA mixed-in template needs to load the instrumented sources in order for the coverage reports to be correctly generated.\nThis template copies instrumented versions of the sources to a temporary location at `.grunt/grunt-contrib-jasmine/`.\nIf your mixed-in template simply includes the sources, as the default template does, you don't need to account for that, since this template replaces the `src` option with the paths to the instrumented versions.\nIf your mixed-in template loads the sources differently, e.g. directly from the file system, you may need to reconfigure the mixed-in template.\n\n## Change log\n * v0.2.4, 26.05.13, merged #12 from @kayhadrin, instrumented versions of files loaded via absolute paths on windows are now created at a valid path\n * v0.2.3, 12.05.13, merged `thresholds` from @larsthorup #9 which can abort a build with too low coverage\n * v0.2.2, 11.05.13, added `replace` option, so it can be prevented that the original `src` option is replaced with their instrumented versions\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/maenu/grunt-template-jasmine-istanbul/issues"},"_id":"grunt-template-jasmine-istanbul@0.2.4","dist":{"shasum":"582c5d5ae53f74f1ba613854472033042a4b32f3","tarball":"http://registry.npmjs.org/grunt-template-jasmine-istanbul/-/grunt-template-jasmine-istanbul-0.2.4.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"maenu","email":"maenuleu@gmx.ch"},"maintainers":[{"name":"maenu","email":"maenuleu@gmx.ch"}],"directories":{}},"0.2.5":{"name":"grunt-template-jasmine-istanbul","description":"Code coverage template mix-in for grunt-contrib-jasmine, using istanbul","version":"0.2.5","keywords":["grunt","template","jasmine","istanbul"],"author":{"name":"maenu"},"repository":{"type":"git","url":"https://github.com/maenu/grunt-template-jasmine-istanbul.git"},"main":"src/main/js/template.js","dependencies":{"istanbul":">=0.1.30"},"peerDependencies":{"grunt":">=0.4.0","grunt-contrib-jasmine":">=0.3.1"},"devDependencies":{"grunt":">=0.4.0","grunt-contrib-jasmine":">=0.3.1","grunt-contrib-nodeunit":">=0.1.2","grunt-contrib-clean":">=0.4.0","grunt-contrib-yuidoc":">=0.4.0","grunt-contrib-jshint":">=0.4.3"},"readme":"# Code coverage template mix-in for [grunt-contrib-jasmine](https://github.com/gruntjs/grunt-contrib-jasmine), using [istanbul](https://github.com/gotwarlost/istanbul)\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-istanbul --save-dev\n```\n\n## Template Options\n\n### templateOptions.coverage\nType: `String`\nMandatory.\n\nThe file path where to store the `coverage.json`.\n\n### templateOptions.report\nType: `String | Object | Array`\nMandatory.\n\nIf a `String` is given, it will be used as the path where a HTML report is generated.\nIf an `Object` is given, it must have the properties `type` and `options`, where `type` is a `String` and `options` an `Object`.\n`type` and `options` are used to create the report by passing it to `istanbul`s [`Report.create(type, options)`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/Report.html).\nFor example, if you want to generate a Cobertura report at `bin/coverage/cobertura`, use this:\n\n````js\nreport: {\n\ttype: 'cobertura',\n\toptions: {\n\t\tdir: 'bin/coverage/cobertura'\n\t}\n}\n````\n\nIf an `Array` is given, it must consist of `Object`s of the form just described.\n\nThe supported types are:\n\n * [`html`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/HtmlReport.html)\n * [`text`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/TextReport.html)\n * [`text-summary`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/TextSummaryReport.html)\n * [`lcov`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/LcovReport.html)\n * [`lcovonly`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/LcovOnlyReport.html)\n * [`cobertura`](http://gotwarlost.github.com/istanbul/public/apidocs/classes/CoberturaReport.html)\n\n### templateOptions.replace\n\nType: `Boolean`\nDefault: `true`\n\nWhether or not the `src` scripts are replaced by the paths to their instrumented versions.\nThis is useful when you want the mixed-in template to work with the original sources, and you want to serve the instrumented sources by redirecting request on the server side.\n\n### templateOptions.thresholds\nType: `Object`\nDefault: `undefined`\n\nThresholds for any of the metrics that Istanbul measures.\nIf a threshold is not met, a warning is emitted.\nSee example below for available metrics.\n\n### templateOptions.template\nType: `String | Object`\nDefault: jasmine's default template\n\nThe template to mix-in coverage.\n\n### templateOptions.templateOptions\nType: `Object`\nDefault: `undefined`\n\nThe options to pass to the mixed-in template.\n\n## Examples\n\nThere are multiple examples at a [example repository](https://github.com/maenu/grunt-template-jasmine-istanbul-example).\n\n### Simple\n\nHave a look at [this example](https://github.com/maenu/grunt-template-jasmine-istanbul-example).\n\n```js\n// Example configuration\ngrunt.initConfig({\n\tjasmine: {\n\t\tcoverage: {\n\t\t\tsrc: ['src/main/js/*.js'],\n\t\t\toptions: {\n\t\t\t\tspecs: ['src/test/js/*.js'],\n\t\t\t\ttemplate: require('grunt-template-jasmine-istanbul'),\n\t\t\t\ttemplateOptions: {\n\t\t\t\t\tcoverage: 'bin/coverage/coverage.json',\n\t\t\t\t\treport: 'bin/coverage',\n                    thresholds: {\n                        lines: 75,\n                        statements: 75,\n                        branches: 75,\n                        functions: 90\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### RequireJS\n\nHave a look at [this example](https://github.com/maenu/grunt-template-jasmine-istanbul-example/tree/requirejs).\nNote that you need to configure the `baseUrl` to point to the instrumented sources, as described in the section [below](https://github.com/maenu/grunt-template-jasmine-istanbul#a-single-arequirement).\n\n```js\ngrunt.initConfig({\n    jasmine: {\n        coverage: {\n            src: ['src/main/js/*.js'],\n            options: {\n                specs: ['src/test/js/*.js'],\n                template: require('grunt-template-jasmine-istanbul'),\n                templateOptions: {\n                    coverage: 'bin/coverage/coverage.json',\n                    report: 'bin/coverage',\n                    template: require('grunt-template-jasmine-requirejs'),\n                    templateOptions: {\n                        requireConfig: {\n                            baseUrl: '.grunt/grunt-contrib-jasmine/src/main/js/'\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n#### Is it really that easy?\n\nNo.\n\nSetting `baseUrl` to that location may screw up your whole configuration, because paths relative to the original sources are broken.\nTherefore, if this happens to you, instead of directly loading the instrumented sources, set `replace: false`, intercept request to the original sources and redirect them to the instrumented versions.\nYou can do this on both the [client side](https://github.com/maenu/grunt-template-jasmine-istanbul-example/tree/requirejs-client), or the [server side](https://github.com/maenu/grunt-template-jasmine-istanbul-example/tree/requirejs-server).\nLook at the corresponding `Grunfile.js` files and be filled with horror: Yes, this is nasty, but it (seems to) works.\n\n## Mixed-in Templates\n\n### The Idea\n\nDo you have another template you want to use, but you also want to collect code coverage at the same time?\nThen you can use a mixed-in template, that's what they are for.\nThe idea behind a mixed-in template is simple:\nIstanbul generates code coverage information by instrumenting the sources before they are run and by generating reports after they have run.\nTherefore this templates acts as a test pre- and post-processor, but it doesn't interfere with the actual running of the tests.\nThis makes it possible to use another template as a mix-in template to run the tests, defined by `templateOptions.template` and can be configured with `templateOptions.templateOptions`.\n\n### A Single Requirement\n\nA mixed-in template needs to load the instrumented sources in order for the coverage reports to be correctly generated.\nThis template copies instrumented versions of the sources to a temporary location at `.grunt/grunt-contrib-jasmine/`.\nIf your mixed-in template simply includes the sources, as the default template does, you don't need to account for that, since this template replaces the `src` option with the paths to the instrumented versions.\nIf your mixed-in template loads the sources differently, e.g. directly from the file system, you may need to reconfigure the mixed-in template.\n\n## Change Log\n * v0.2.5, 10.08.13, reporter is now moved to and loaded from jasmine's temporary directory, fixes #11\n * v0.2.4, 26.05.13, merged #12 from @kayhadrin, instrumented versions of files loaded via absolute paths on windows are now created at a valid path\n * v0.2.3, 12.05.13, merged `thresholds` from @larsthorup #9 which can abort a build with too low coverage\n * v0.2.2, 11.05.13, added `replace` option, so it can be prevented that the original `src` option is replaced with their instrumented versions\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/maenu/grunt-template-jasmine-istanbul/issues"},"_id":"grunt-template-jasmine-istanbul@0.2.5","dist":{"shasum":"202a00d6d074708d7fcd3f8197343b9973fe0625","tarball":"http://registry.npmjs.org/grunt-template-jasmine-istanbul/-/grunt-template-jasmine-istanbul-0.2.5.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"maenu","email":"maenuleu@gmx.ch"},"maintainers":[{"name":"maenu","email":"maenuleu@gmx.ch"}],"directories":{}}},"readme":"Code coverage template mix-in for grunt-contrib-jasmine, using istanbul\n-----------------------------------------\n\n**This template is not yet published on npm**\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-istanbul --save-dev\n```\n\n## Template Options\n\n### templateOptions.coverage\nType: `String`\nMandatory.\n\nThe file path where to store the `coverage.json`.\n\n### templateOptions.report\nType: `String`\nMandatory.\n\nThe directory path where to store the coverage report.\n\n### templateOptions.template\nType: `String` `Object`\nDefault: jasmine's default template\n\nThe template to mix-in coverage.\n\n### templateOptions.templateOptions\nType: `Object`\nDefault: `undefined`\n\nThe options to pass to the mixed-in template.\n\n## Sample usage\n\n```js\n// Example configuration\ngrunt.initConfig({\n\tjasmine: {\n\t\tcoverage: ['src/main/js/*.js'],\n\t\toptions: {\n\t\t\tspecs: ['src/test/js/*.js'],\n\t\t\ttemplate: require('grunt-template-jasmine-istanbul'),\n\t\t\ttemplateOptions: {\n\t\t\t\tcoverage: 'bin/coverage/coverage.json',\n\t\t\t\treport: 'bin/coverage',\n\t\t\t}\n\t\t}\n\t}\n}\n```\n","maintainers":[{"name":"maenu","email":"maenuleu@gmx.ch"}],"time":{"0.1.0":"2013-02-13T15:24:32.535Z","0.1.1":"2013-02-13T15:37:09.959Z","0.2.0":"2013-03-09T15:21:11.758Z","0.2.1":"2013-04-04T11:16:49.213Z","0.2.2":"2013-05-11T20:41:38.408Z","0.2.3":"2013-05-12T18:46:18.825Z","0.2.4":"2013-05-26T15:11:15.504Z","0.2.5":"2013-08-10T13:03:36.925Z"},"author":{"name":"maenu"},"repository":{"type":"git","url":"https://github.com/maenu/grunt-template-jasmine-istanbul.git"},"users":{"ymainier":true},"_attachments":{"grunt-template-jasmine-istanbul-0.2.5.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-sIh8FcA5SI4EFI5LuUNUKw==","length":52682,"stub":true},"grunt-template-jasmine-istanbul-0.2.4.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-BsuBzInyompw/izRXE0fHg==","length":52539,"stub":true},"grunt-template-jasmine-istanbul-0.2.3.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-hc1yhtOARIlrNtJH5oNcuw==","length":52133,"stub":true},"grunt-template-jasmine-istanbul-0.2.2.tgz":{"content_type":"application/octet-stream","revpos":11,"digest":"md5-V8xy2Thlx/liA1rZml/AEw==","length":49327,"stub":true},"grunt-template-jasmine-istanbul-0.2.1.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-DDLWyI3G82yqFw0LhHLSiw==","length":6533,"stub":true},"grunt-template-jasmine-istanbul-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":6,"digest":"md5-A85KfLh8+JCZvdhk1M04lw==","length":5707,"stub":true},"grunt-template-jasmine-istanbul-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-th0HTkBh/190ZU1P37Wl6A==","length":4892,"stub":true},"grunt-template-jasmine-istanbul-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-+RLhJ3tlRDiH0nwGf5gB4w==","length":4927,"stub":true}},"_etag":"\"EAM2T0YJKDCTSL61SDSCP11PW\""}