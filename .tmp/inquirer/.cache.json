{"_id":"inquirer","_rev":"54-1906a12b4b7e9bc1e812da06c4f5d942","name":"inquirer","description":"A collection of common interactive command line user interfaces.","dist-tags":{"latest":"0.4.0"},"versions":{"0.1.0":{"name":"inquirer","version":"0.1.0","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","charm":"~0.1.2"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\r\n=====================\r\n\r\nA collection of common interactive command line user interfaces.\r\n\r\nGoal and philosophy\r\n---------------------\r\n\r\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\r\nsome hope in becoming the CLI Xanadu.\r\n\r\n_Inquirer_ should ease the process of asking end user questions, parsing, validating answers, and providing error feedback.\r\n\r\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Charm](https://github.com/substack/node-charm) (used internally).\r\n\r\nDocumentation\r\n=====================\r\n\r\nInstallation\r\n---------------------\r\n\r\n``` prompt\r\nnpm install inquirer\r\n```\r\n\r\n```javascript\r\nvar inquirer = require(\"inquirer\");\r\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\r\n\t// Use user feedback for... whatever!!\r\n});\r\n```\r\n\r\nExamples (Run it and see it)\r\n---------------------\r\n\r\nCheckout the `example/` folder for code and interface example.\r\n\r\n``` prompt\r\nnode example/pizza.js\r\n# etc\r\n```\r\n\r\nMethods\r\n---------------------\r\n\r\n### `inquirer.prompt( questions, callback )`\r\n\r\nLaunch the prompt interface (inquiry session)\r\n\r\n+ **questions** (Array) contains [Question Object](#question)\r\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\r\n\r\nObjects\r\n---------------------\r\n\r\n### Question\r\nA question object is a `hash` containing question related values:\r\n\r\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\r\n`list`, `rawlist`\r\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\r\n+ **message**: (String) The question to print.\r\n+ **default**: (String) Default value to use if nothing is entered\r\n+ **choices**: (Array) Choices array.  \r\nValues can be simple `string`s, or `object`s containing a `name` (to display) and a `value` properties (to save in the answers hash).\r\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If no error message is returned, a default one is provided.\r\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the `Answers` hash.\r\n\r\n### Answers\r\nA key/value hash containing the client answers in each prompt.\r\n\r\n+ **Key** The `name` property of the _question_ object\r\n+ **Value** (Depends on the prompt)\r\n  + `confirm`: (Boolean)\r\n  + `input` : User input (String)\r\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\r\n\r\nPrompts\r\n---------------------\r\n\r\n### List - `{ type: \"list\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`] properties.\r\n\r\n``` prompt\r\nWhat about the toping?\r\n  [X] Peperonni and chesse\r\n  [ ] All dressed\r\n  [ ] Hawaïan\r\n(Use arrow key)\r\n```\r\n\r\n### Raw List - `{ type: \"rawlist\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`] properties.\r\n\r\n``` prompt\r\nYou also get a free 2L liquor! Which one?\r\n  1) Pepsi\r\n  2) 7up\r\n  3) Coke\r\n  Default (1)\r\n```\r\n\r\n### Confirm - `{ type: \"confirm\" }`\r\n\r\nTake `type`, `name`, `message` properties.\r\n\r\n``` prompt\r\nHi, welcome to Node Pizza plaza. Is it for a delivery? (Y/n)\r\n```\r\n\r\n### Input - `{ type: \"input\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n``` prompt\r\nBefore leaving, any comments on your purchase experience? (default \"Nope, all good!\"):\r\n```\r\n\r\n\r\nNews on the march (Release notes)\r\n=====================\r\n\r\n+ **0.1.0** : First official release. There's 4 prompt types: `input`, `confirm`, `list` and\r\n`rawlist`. There's functionnality to allow the validation of input, and the filtering of values.\r\n\r\nLicense\r\n=====================\r\n\r\nCopyright (c) 2012 Simon Boudrias  \r\nLicensed under the MIT license.\r\n","_id":"inquirer@0.1.0","dist":{"shasum":"4f8179ee5d10a3c825c837be841fc589d7beb963","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.1.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.1.1":{"name":"inquirer","version":"0.1.1","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","charm":"~0.1.2"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\r\n=====================\r\n\r\nA collection of common interactive command line user interfaces.\r\n\r\nGoal and philosophy\r\n---------------------\r\n\r\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\r\nsome hope in becoming the CLI Xanadu.\r\n\r\n_Inquirer_ should ease the process of asking end user questions, parsing, validating answers, and providing error feedback.\r\n\r\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Charm](https://github.com/substack/node-charm) (used internally).\r\n\r\nDocumentation\r\n=====================\r\n\r\nInstallation\r\n---------------------\r\n\r\n``` prompt\r\nnpm install inquirer\r\n```\r\n\r\n```javascript\r\nvar inquirer = require(\"inquirer\");\r\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\r\n\t// Use user feedback for... whatever!!\r\n});\r\n```\r\n\r\nExamples (Run it and see it)\r\n---------------------\r\n\r\nCheckout the `examples/` folder for code and interface examples.\r\n\r\n``` prompt\r\nnode examples/pizza.js\r\n# etc\r\n```\r\n\r\nMethods\r\n---------------------\r\n\r\n### `inquirer.prompt( questions, callback )`\r\n\r\nLaunch the prompt interface (inquiry session)\r\n\r\n+ **questions** (Array) contains [Question Object](#question)\r\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\r\n\r\nObjects\r\n---------------------\r\n\r\n### Question\r\nA question object is a `hash` containing question related values:\r\n\r\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\r\n`list`, `rawlist`\r\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\r\n+ **message**: (String) The question to print.\r\n+ **default**: (String) Default value to use if nothing is entered\r\n+ **choices**: (Array) Choices array.  \r\nValues can be simple `string`s, or `object`s containing a `name` (to display) and a `value` properties (to save in the answers hash).\r\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If no error message is returned, a default one is provided.\r\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the `Answers` hash.\r\n\r\n### Answers\r\nA key/value hash containing the client answers in each prompt.\r\n\r\n+ **Key** The `name` property of the _question_ object\r\n+ **Value** (Depends on the prompt)\r\n  + `confirm`: (Boolean)\r\n  + `input` : User input (String)\r\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\r\n\r\nPrompts\r\n---------------------\r\n\r\n### List - `{ type: \"list\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`] properties.\r\n\r\n``` prompt\r\nWhat about the toping?\r\n  [X] Peperonni and chesse\r\n  [ ] All dressed\r\n  [ ] Hawaïan\r\n(Use arrow key)\r\n```\r\n\r\n### Raw List - `{ type: \"rawlist\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`] properties.\r\n\r\n``` prompt\r\nYou also get a free 2L liquor! Which one?\r\n  1) Pepsi\r\n  2) 7up\r\n  3) Coke\r\n  Default (1)\r\n```\r\n\r\n### Confirm - `{ type: \"confirm\" }`\r\n\r\nTake `type`, `name`, `message` properties.\r\n\r\n``` prompt\r\nHi, welcome to Node Pizza plaza. Is it for a delivery? (Y/n)\r\n```\r\n\r\n### Input - `{ type: \"input\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n``` prompt\r\nBefore leaving, any comments on your purchase experience? (default \"Nope, all good!\"):\r\n```\r\n\r\n\r\nNews on the march (Release notes)\r\n=====================\r\n\r\n+ **0.1.0** : First official release. There's 4 prompt types: `input`, `confirm`, `list` and\r\n`rawlist`. There's functionnality to allow the validation of input, and the filtering of values.\r\n\r\nLicense\r\n=====================\r\n\r\nCopyright (c) 2012 Simon Boudrias  \r\nLicensed under the MIT license.\r\n","_id":"inquirer@0.1.1","dist":{"shasum":"c0725ded1d294a68778ab9651de4d69869cdefcb","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.1.1.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.1.2":{"name":"inquirer","version":"0.1.2","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","charm":"~0.1.2"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\r\n=====================\r\n\r\nA collection of common interactive command line user interfaces.\r\n\r\nGoal and philosophy\r\n---------------------\r\n\r\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\r\nsome hope in becoming the CLI Xanadu.\r\n\r\n_Inquirer_ should ease the process of asking end user questions, parsing, validating answers, and providing error feedback.\r\n\r\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Charm](https://github.com/substack/node-charm) (used internally).\r\n\r\nDocumentation\r\n=====================\r\n\r\nInstallation\r\n---------------------\r\n\r\n``` prompt\r\nnpm install inquirer\r\n```\r\n\r\n```javascript\r\nvar inquirer = require(\"inquirer\");\r\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\r\n\t// Use user feedback for... whatever!!\r\n});\r\n```\r\n\r\nExamples (Run it and see it)\r\n---------------------\r\n\r\nCheckout the `examples/` folder for code and interface examples.\r\n\r\n``` prompt\r\nnode examples/pizza.js\r\n# etc\r\n```\r\n\r\nMethods\r\n---------------------\r\n\r\n### `inquirer.prompt( questions, callback )`\r\n\r\nLaunch the prompt interface (inquiry session)\r\n\r\n+ **questions** (Array) contains [Question Object](#question)\r\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\r\n\r\nObjects\r\n---------------------\r\n\r\n### Question\r\nA question object is a `hash` containing question related values:\r\n\r\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\r\n`list`, `rawlist`\r\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\r\n+ **message**: (String) The question to print.\r\n+ **default**: (String) Default value to use if nothing is entered\r\n+ **choices**: (Array) Choices array.  \r\nValues can be simple `string`s, or `object`s containing a `name` (to display) and a `value` properties (to save in the answers hash).\r\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If no error message is returned, a default one is provided.\r\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the `Answers` hash.\r\n\r\n### Answers\r\nA key/value hash containing the client answers in each prompt.\r\n\r\n+ **Key** The `name` property of the _question_ object\r\n+ **Value** (Depends on the prompt)\r\n  + `confirm`: (Boolean)\r\n  + `input` : User input (String)\r\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\r\n\r\nPrompts\r\n---------------------\r\n\r\n### List - `{ type: \"list\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`] properties.\r\n\r\n``` prompt\r\nWhat about the toping?\r\n  [X] Peperonni and chesse\r\n  [ ] All dressed\r\n  [ ] Hawaïan\r\n(Use arrow key)\r\n```\r\n\r\n### Raw List - `{ type: \"rawlist\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`] properties.\r\n\r\n``` prompt\r\nYou also get a free 2L liquor! Which one?\r\n  1) Pepsi\r\n  2) 7up\r\n  3) Coke\r\n  Default (1)\r\n```\r\n\r\n### Confirm - `{ type: \"confirm\" }`\r\n\r\nTake `type`, `name`, `message` properties.\r\n\r\n``` prompt\r\nHi, welcome to Node Pizza plaza. Is it for a delivery? (Y/n)\r\n```\r\n\r\n### Input - `{ type: \"input\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n``` prompt\r\nBefore leaving, any comments on your purchase experience? (default \"Nope, all good!\"):\r\n```\r\n\r\n\r\nNews on the march (Release notes)\r\n=====================\r\n\r\n+ **0.1.0** : First official release. There's 4 prompt types: `input`, `confirm`, `list` and\r\n`rawlist`. There's functionnality to allow the validation of input, and the filtering of values.\r\n\r\nLicense\r\n=====================\r\n\r\nCopyright (c) 2012 Simon Boudrias  \r\nLicensed under the MIT license.\r\n","_id":"inquirer@0.1.2","dist":{"shasum":"ec38be32a2a117b24e360ed57b811503b71071ae","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.1.2.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.1.3":{"name":"inquirer","version":"0.1.3","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","charm":"~0.1.2"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\r\n=====================\r\n\r\nA collection of common interactive command line user interfaces.\r\n\r\nGoal and philosophy\r\n---------------------\r\n\r\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\r\nsome hope in becoming the CLI Xanadu.\r\n\r\n_Inquirer_ should ease the process of asking end user questions, parsing, validating answers, and providing error feedback.\r\n\r\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Charm](https://github.com/substack/node-charm) (used internally).\r\n\r\nDocumentation\r\n=====================\r\n\r\nInstallation\r\n---------------------\r\n\r\n``` prompt\r\nnpm install inquirer\r\n```\r\n\r\n```javascript\r\nvar inquirer = require(\"inquirer\");\r\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\r\n\t// Use user feedback for... whatever!!\r\n});\r\n```\r\n\r\nExamples (Run it and see it)\r\n---------------------\r\n\r\nCheckout the `examples/` folder for code and interface examples.\r\n\r\n``` prompt\r\nnode examples/pizza.js\r\n# etc\r\n```\r\n\r\nMethods\r\n---------------------\r\n\r\n### `inquirer.prompt( questions, callback )`\r\n\r\nLaunch the prompt interface (inquiry session)\r\n\r\n+ **questions** (Array) contains [Question Object](#question)\r\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\r\n\r\nObjects\r\n---------------------\r\n\r\n### Question\r\nA question object is a `hash` containing question related values:\r\n\r\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\r\n`list`, `rawlist`\r\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\r\n+ **message**: (String) The question to print.\r\n+ **default**: (String) Default value to use if nothing is entered\r\n+ **choices**: (Array) Choices array.  \r\nValues can be simple `string`s, or `object`s containing a `name` (to display) and a `value` properties (to save in the answers hash).\r\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If no error message is returned, a default one is provided.\r\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the `Answers` hash.\r\n\r\n`validate` and `filter` function can be asynchronous using `this.async()`. You just have to pass the value you'd normally return to the callback option.\r\n\r\n``` javascript\r\n{\r\n  validate: function(input) {\r\n    var done = this.async();\r\n    setTimeout(function() {\r\n      if (typeof input !== \"number\") {\r\n        done(\"You need to provide a number\");\r\n        return;\r\n      }\r\n      done(true);\r\n    }, 3000);\r\n  }\r\n}\r\n```\r\n\r\n### Answers\r\nA key/value hash containing the client answers in each prompt.\r\n\r\n+ **Key** The `name` property of the _question_ object\r\n+ **Value** (Depends on the prompt)\r\n  + `confirm`: (Boolean)\r\n  + `input` : User input (String)\r\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\r\n\r\nPrompts\r\n---------------------\r\n\r\n### List - `{ type: \"list\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`] properties.\r\n\r\n``` prompt\r\nWhat about the toping?\r\n  [X] Peperonni and chesse\r\n  [ ] All dressed\r\n  [ ] Hawaïan\r\n(Use arrow key)\r\n```\r\n\r\n### Raw List - `{ type: \"rawlist\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`] properties.\r\n\r\n``` prompt\r\nYou also get a free 2L liquor! Which one?\r\n  1) Pepsi\r\n  2) 7up\r\n  3) Coke\r\n  Default (1)\r\n```\r\n\r\n### Confirm - `{ type: \"confirm\" }`\r\n\r\nTake `type`, `name`, `message` properties.\r\n\r\n``` prompt\r\nHi, welcome to Node Pizza plaza. Is it for a delivery? (Y/n)\r\n```\r\n\r\n### Input - `{ type: \"input\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n``` prompt\r\nAny comments on your purchase experience? (default \"Nope, all good!\"):\r\n```\r\n\r\n\r\nNews on the march (Release notes)\r\n=====================\r\n\r\n+ **0.1.0** : First official release. There's 4 prompt types: `input`, `confirm`, `list` and\r\n`rawlist`. There's functionnality to allow the validation of input, and the filtering of values.\r\n\r\nLicense\r\n=====================\r\n\r\nCopyright (c) 2012 Simon Boudrias  \r\nLicensed under the MIT license.\r\n","_id":"inquirer@0.1.3","dist":{"shasum":"60c8c73d5fc9ce5c45f35c5a0f265a964b9b90c2","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.1.3.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.1.4":{"name":"inquirer","version":"0.1.4","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","charm":"~0.1.2"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\r\n=====================\r\n\r\nA collection of common interactive command line user interfaces.\r\n\r\nGoal and philosophy\r\n---------------------\r\n\r\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\r\nsome hope in becoming the CLI Xanadu.\r\n\r\n_Inquirer_ should ease the process of asking end user questions, parsing, validating answers, and providing error feedback.\r\n\r\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Charm](https://github.com/substack/node-charm) (used internally).\r\n\r\nDocumentation\r\n=====================\r\n\r\nInstallation\r\n---------------------\r\n\r\n``` prompt\r\nnpm install inquirer\r\n```\r\n\r\n```javascript\r\nvar inquirer = require(\"inquirer\");\r\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\r\n\t// Use user feedback for... whatever!!\r\n});\r\n```\r\n\r\nExamples (Run it and see it)\r\n---------------------\r\n\r\nCheckout the `examples/` folder for code and interface examples.\r\n\r\n``` prompt\r\nnode examples/pizza.js\r\n# etc\r\n```\r\n\r\nMethods\r\n---------------------\r\n\r\n### `inquirer.prompt( questions, callback )`\r\n\r\nLaunch the prompt interface (inquiry session)\r\n\r\n+ **questions** (Array) contains [Question Object](#question)\r\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\r\n\r\nObjects\r\n---------------------\r\n\r\n### Question\r\nA question object is a `hash` containing question related values:\r\n\r\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\r\n`list`, `rawlist`\r\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\r\n+ **message**: (String) The question to print.\r\n+ **default**: (String) Default value to use if nothing is entered\r\n+ **choices**: (Array) Choices array.  \r\nValues can be simple `string`s, or `object`s containing a `name` (to display) and a `value` properties (to save in the answers hash).\r\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If no error message is returned, a default one is provided.\r\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the `Answers` hash.\r\n\r\n`validate` and `filter` function can be asynchronous using `this.async()`. You just have to pass the value you'd normally return to the callback option.\r\n\r\n``` javascript\r\n{\r\n  validate: function(input) {\r\n    var done = this.async();\r\n    setTimeout(function() {\r\n      if (typeof input !== \"number\") {\r\n        done(\"You need to provide a number\");\r\n        return;\r\n      }\r\n      done(true);\r\n    }, 3000);\r\n  }\r\n}\r\n```\r\n\r\n### Answers\r\nA key/value hash containing the client answers in each prompt.\r\n\r\n+ **Key** The `name` property of the _question_ object\r\n+ **Value** (Depends on the prompt)\r\n  + `confirm`: (Boolean)\r\n  + `input` : User input (String)\r\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\r\n\r\nPrompts\r\n---------------------\r\n\r\n### List - `{ type: \"list\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`] properties.\r\n\r\n``` prompt\r\nWhat about the toping?\r\n  [X] Peperonni and chesse\r\n  [ ] All dressed\r\n  [ ] Hawaïan\r\n(Use arrow key)\r\n```\r\n\r\n### Raw List - `{ type: \"rawlist\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`] properties.\r\n\r\n``` prompt\r\nYou also get a free 2L liquor! Which one?\r\n  1) Pepsi\r\n  2) 7up\r\n  3) Coke\r\n  Default (1)\r\n```\r\n\r\n### Confirm - `{ type: \"confirm\" }`\r\n\r\nTake `type`, `name`, `message` properties.\r\n\r\n``` prompt\r\nHi, welcome to Node Pizza plaza. Is it for a delivery? (Y/n)\r\n```\r\n\r\n### Input - `{ type: \"input\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n``` prompt\r\nAny comments on your purchase experience? (default \"Nope, all good!\"):\r\n```\r\n\r\n\r\nNews on the march (Release notes)\r\n=====================\r\n\r\n+ **0.1.3** : Add async support for validation and filtering functions.\r\n+ **0.1.0** : First official release. There's 4 prompt types: `input`, `confirm`, `list` and\r\n`rawlist`. There's functionnality to allow the validation of input, and the filtering of values.\r\n\r\nLicense\r\n=====================\r\n\r\nCopyright (c) 2012 Simon Boudrias  \r\nLicensed under the MIT license.\r\n","_id":"inquirer@0.1.4","dist":{"shasum":"4dae371f42f63456727f6f6af757e692a0b04bfa","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.1.4.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.1.5":{"name":"inquirer","version":"0.1.5","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\r\n=====================\r\n\r\nA collection of common interactive command line user interfaces.\r\n\r\n\r\nGoal and philosophy\r\n---------------------\r\n\r\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\r\nsome hope in becoming the CLI Xanadu.\r\n\r\n_Inquirer_ should ease the process of asking end user questions, parsing, validating answers, and providing error feedback.\r\n\r\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\r\n\r\n\r\nDocumentation\r\n=====================\r\n\r\n\r\nInstallation\r\n---------------------\r\n\r\n``` prompt\r\nnpm install inquirer\r\n```\r\n\r\n```javascript\r\nvar inquirer = require(\"inquirer\");\r\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\r\n\t// Use user feedback for... whatever!!\r\n});\r\n```\r\n\r\n\r\nExamples (Run it and see it)\r\n---------------------\r\n\r\nCheckout the `examples/` folder for code and interface examples.\r\n\r\n``` prompt\r\nnode examples/pizza.js\r\n# etc\r\n```\r\n\r\n\r\nMethods\r\n---------------------\r\n\r\n### `inquirer.prompt( questions, callback )`\r\n\r\nLaunch the prompt interface (inquiry session)\r\n\r\n+ **questions** (Array) contains [Question Object](#question)\r\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\r\n\r\n\r\nObjects\r\n---------------------\r\n\r\n### Question\r\nA question object is a `hash` containing question related values:\r\n\r\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\r\n`list`, `rawlist`\r\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\r\n+ **message**: (String) The question to print.\r\n+ **default**: (String) Default value to use if nothing is entered\r\n+ **choices**: (Array) Choices array.  \r\nValues can be simple `string`s, or `object`s containing a `name` (to display) and a `value` properties (to save in the answers hash).\r\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If no error message is returned, a default one is provided.\r\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the `Answers` hash.\r\n\r\n`validate` and `filter` function can be asynchronous using `this.async()`. You just have to pass the value you'd normally return to the callback option.\r\n\r\n``` javascript\r\n{\r\n  validate: function(input) {\r\n    var done = this.async();\r\n    setTimeout(function() {\r\n      if (typeof input !== \"number\") {\r\n        done(\"You need to provide a number\");\r\n        return;\r\n      }\r\n      done(true);\r\n    }, 3000);\r\n  }\r\n}\r\n```\r\n\r\n### Answers\r\nA key/value hash containing the client answers in each prompt.\r\n\r\n+ **Key** The `name` property of the _question_ object\r\n+ **Value** (Depends on the prompt)\r\n  + `confirm`: (Boolean)\r\n  + `input` : User input (String)\r\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\r\n\r\n\r\nPrompts\r\n---------------------\r\n\r\n### List - `{ type: \"list\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`] properties.\r\n\r\n``` prompt\r\nWhat about the toping?\r\n  [X] Peperonni and chesse\r\n  [ ] All dressed\r\n  [ ] Hawaïan\r\n(Use arrow key)\r\n```\r\n\r\n### Raw List - `{ type: \"rawlist\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`] properties.\r\n\r\n``` prompt\r\nYou also get a free 2L liquor! Which one?\r\n  1) Pepsi\r\n  2) 7up\r\n  3) Coke\r\n  Default (1)\r\n```\r\n\r\n### Confirm - `{ type: \"confirm\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`] properties.\r\n\r\n``` prompt\r\nHi, welcome to Node Pizza plaza. Is it for a delivery? (Y/n)\r\n```\r\n\r\n### Input - `{ type: \"input\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n``` prompt\r\nAny comments on your purchase experience? (default \"Nope, all good!\"):\r\n```\r\n\r\n\r\nNews on the march (Release notes)\r\n=====================\r\n\r\n+ **0.1.3** : Add async support for validation and filtering functions.\r\n+ **0.1.0** : First official release. There's 4 prompt types: `input`, `confirm`, `list` and\r\n`rawlist`. There's functionnality to allow the validation of input, and the filtering of values.\r\n\r\n\r\nContributing\r\n=====================\r\n\r\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \r\n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\r\nor bug fix. `npm test` to run the test suite.  \r\n**Documentation**: Add documentation for every API change. Feel free to send corrections\r\nor better docs!  \r\n\r\n\r\nLicense\r\n=====================\r\n\r\nCopyright (c) 2012 Simon Boudrias  \r\nLicensed under the MIT license.\r\n","_id":"inquirer@0.1.5","dist":{"shasum":"c9de6d9654a7d915946976afd1d189a0b3b942b0","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.1.5.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.1.6":{"name":"inquirer","version":"0.1.6","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\r\n=====================\r\n\r\nA collection of common interactive command line user interfaces.\r\n\r\n\r\nGoal and philosophy\r\n---------------------\r\n\r\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\r\nsome hope in becoming the CLI Xanadu.\r\n\r\n_Inquirer_ should ease the process of asking end user questions, parsing, validating answers, and providing error feedback.\r\n\r\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\r\n\r\n\r\nDocumentation\r\n=====================\r\n\r\n\r\nInstallation\r\n---------------------\r\n\r\n``` prompt\r\nnpm install inquirer\r\n```\r\n\r\n```javascript\r\nvar inquirer = require(\"inquirer\");\r\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\r\n\t// Use user feedback for... whatever!!\r\n});\r\n```\r\n\r\n\r\nExamples (Run it and see it)\r\n---------------------\r\n\r\nCheckout the `examples/` folder for code and interface examples.\r\n\r\n``` prompt\r\nnode examples/pizza.js\r\n# etc\r\n```\r\n\r\n\r\nMethods\r\n---------------------\r\n\r\n### `inquirer.prompt( questions, callback )`\r\n\r\nLaunch the prompt interface (inquiry session)\r\n\r\n+ **questions** (Array) containing [Question Object](#question)\r\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\r\n\r\n\r\nObjects\r\n---------------------\r\n\r\n### Question\r\nA question object is a `hash` containing question related values:\r\n\r\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\r\n`list`, `rawlist`\r\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\r\n+ **message**: (String) The question to print.\r\n+ **default**: (String) Default value to use if nothing is entered\r\n+ **choices**: (Array) Choices array.  \r\nValues can be simple `string`s, or `object`s containing a `name` (to display) and a `value` properties (to save in the answers hash).\r\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\r\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\r\n\r\n`validate` and `filter` function can be asynchronous using `this.async()`. You just have to pass the value you'd normally return to the callback option.\r\n\r\n``` javascript\r\n{\r\n  validate: function(input) {\r\n    var done = this.async();\r\n    setTimeout(function() {\r\n      if (typeof input !== \"number\") {\r\n        done(\"You need to provide a number\");\r\n        return;\r\n      }\r\n      done(true);\r\n    }, 3000);\r\n  }\r\n}\r\n```\r\n\r\n### Answers\r\nA key/value hash containing the client answers in each prompt.\r\n\r\n+ **Key** The `name` property of the _question_ object\r\n+ **Value** (Depends on the prompt)\r\n  + `confirm`: (Boolean)\r\n  + `input` : User input (filtered if `filter` is defined) (String)\r\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\r\n\r\n\r\nPrompts\r\n---------------------\r\n\r\n### List - `{ type: \"list\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`] properties.\r\n\r\n``` prompt\r\n[?] What about the toping: (Use arrow key)\r\n  [X] Peperonni and chesse\r\n  [ ] All dressed\r\n  [ ] Hawaïan\r\n```\r\n\r\n### Raw List - `{ type: \"rawlist\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`] properties.\r\n\r\n``` prompt\r\n[?] You also get a free 2L liquor: \r\n  1) Pepsi\r\n  2) 7up\r\n  3) Coke\r\n  Answer: \r\n```\r\n\r\n### Confirm - `{ type: \"confirm\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`] properties.\r\n\r\n``` prompt\r\n[?] Is it for a delivery: (Y/n)\r\n```\r\n\r\n### Input - `{ type: \"input\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n``` prompt\r\n[?] Any comments on your purchase experience: (Nope, all good!)\r\n```\r\n\r\n\r\nNews on the march (Release notes)\r\n=====================\r\n\r\n+ **0.1.5** : Enhance visual style; prompts are now more succint. Lots of bug fixes.\r\n+ **0.1.3** : Add async support for validation and filtering functions.\r\n+ **0.1.0** : First official release. There's 4 prompt types: `input`, `confirm`, `list` and\r\n`rawlist`. There's functionnality to allow the validation of input, and the filtering of values.\r\n\r\n\r\nContributing\r\n=====================\r\n\r\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \r\n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\r\nor bug fix. `npm test` to run the test suite.  \r\n**Documentation**: Add documentation for every API change. Feel free to send corrections\r\nor better docs!  \r\n\r\n\r\nLicense\r\n=====================\r\n\r\nCopyright (c) 2012 Simon Boudrias  \r\nLicensed under the MIT license.\r\n","_id":"inquirer@0.1.6","dist":{"shasum":"29f38d7cf959695c3205bae89bb6e9a86817d0b5","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.1.6.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.1.7":{"name":"inquirer","version":"0.1.7","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\r\n=====================\r\n\r\nA collection of common interactive command line user interfaces.\r\n\r\n\r\nGoal and philosophy\r\n---------------------\r\n\r\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\r\nsome hope in becoming the CLI Xanadu.\r\n\r\n_Inquirer_ should ease the process of asking end user questions, parsing, validating answers, and providing error feedback.\r\n\r\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\r\n\r\n\r\nDocumentation\r\n=====================\r\n\r\n\r\nInstallation\r\n---------------------\r\n\r\n``` prompt\r\nnpm install inquirer\r\n```\r\n\r\n```javascript\r\nvar inquirer = require(\"inquirer\");\r\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\r\n\t// Use user feedback for... whatever!!\r\n});\r\n```\r\n\r\n\r\nExamples (Run it and see it)\r\n---------------------\r\n\r\nCheckout the `examples/` folder for code and interface examples.\r\n\r\n``` prompt\r\nnode examples/pizza.js\r\n# etc\r\n```\r\n\r\n\r\nMethods\r\n---------------------\r\n\r\n### `inquirer.prompt( questions, callback )`\r\n\r\nLaunch the prompt interface (inquiry session)\r\n\r\n+ **questions** (Array) containing [Question Object](#question)\r\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\r\n\r\n\r\nObjects\r\n---------------------\r\n\r\n### Question\r\nA question object is a `hash` containing question related values:\r\n\r\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\r\n`list`, `rawlist`\r\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\r\n+ **message**: (String) The question to print.\r\n+ **default**: (String) Default value to use if nothing is entered\r\n+ **choices**: (Array) Choices array.  \r\nValues can be simple `string`s, or `object`s containing a `name` (to display) and a `value` properties (to save in the answers hash).\r\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\r\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\r\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\r\n\r\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\r\n\r\n``` javascript\r\n{\r\n  validate: function(input) {\r\n\r\n    // Declare function as asynchronous, and save the done callback\r\n    var done = this.async();\r\n\r\n    // Do async stuff\r\n    setTimeout(function() {\r\n      if (typeof input !== \"number\") {\r\n        // Pass the return value in the done callback\r\n        done(\"You need to provide a number\");\r\n        return;\r\n      }\r\n      // Pass the return value in the done callback\r\n      done(true);\r\n    }, 3000);\r\n  }\r\n}\r\n```\r\n\r\n### Answers\r\nA key/value hash containing the client answers in each prompt.\r\n\r\n+ **Key** The `name` property of the _question_ object\r\n+ **Value** (Depends on the prompt)\r\n  + `confirm`: (Boolean)\r\n  + `input` : User input (filtered if `filter` is defined) (String)\r\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\r\n\r\n\r\nPrompts\r\n---------------------\r\n\r\n### List - `{ type: \"list\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must the choice `index` in the array)\r\n\r\n``` prompt\r\n[?] What about the toping: (Use arrow key)\r\n  [X] Peperonni and chesse\r\n  [ ] All dressed\r\n  [ ] Hawaïan\r\n```\r\n\r\n### Raw List - `{ type: \"rawlist\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must the choice `index` in the array)\r\n\r\n``` prompt\r\n[?] You also get a free 2L liquor: \r\n  1) Pepsi\r\n  2) 7up\r\n  3) Coke\r\n  Answer: \r\n```\r\n\r\n### Confirm - `{ type: \"confirm\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`] properties.\r\n\r\n``` prompt\r\n[?] Is it for a delivery: (Y/n)\r\n```\r\n\r\n### Input - `{ type: \"input\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n``` prompt\r\n[?] Any comments on your purchase experience: (Nope, all good!)\r\n```\r\n\r\n\r\nNews on the march (Release notes)\r\n=====================\r\n\r\n+ **0.1.7** : Add a hierarchical prompt API with `when`, allow lists from having a default\r\n+ **0.1.6** : Fix bug on unix and minor enhancement\r\n+ **0.1.5** : Enhance visual style; prompts are now more succint. Lots of bug fixes.\r\n+ **0.1.3** : Add async support for validation and filtering functions.\r\n+ **0.1.0** : First official release. There's 4 prompt types: `input`, `confirm`, `list` and\r\n`rawlist`. There's functionnality to allow the validation of input, and the filtering of values.\r\n\r\n\r\nContributing\r\n=====================\r\n\r\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \r\n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\r\nor bug fix. `npm test` to run the test suite.  \r\n**Documentation**: Add documentation for every API change. Feel free to send corrections\r\nor better docs!  \r\n\r\n\r\nLicense\r\n=====================\r\n\r\nCopyright (c) 2012 Simon Boudrias  \r\nLicensed under the MIT license.\r\n","_id":"inquirer@0.1.7","dist":{"shasum":"e96a5b619f2ffb7c8c2347036b4bfc68ed491d92","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.1.7.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.1.8":{"name":"inquirer","version":"0.1.8","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\r\n=====================\r\n\r\nA collection of common interactive command line user interfaces.\r\n\r\n\r\nGoal and philosophy\r\n---------------------\r\n\r\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\r\nsome hope in becoming the CLI Xanadu.\r\n\r\n_Inquirer_ should ease the process of asking end user questions, parsing, validating answers, and providing error feedback.\r\n\r\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\r\n\r\n\r\nDocumentation\r\n=====================\r\n\r\n\r\nInstallation\r\n---------------------\r\n\r\n``` prompt\r\nnpm install inquirer\r\n```\r\n\r\n```javascript\r\nvar inquirer = require(\"inquirer\");\r\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\r\n\t// Use user feedback for... whatever!!\r\n});\r\n```\r\n\r\n\r\nExamples (Run it and see it)\r\n---------------------\r\n\r\nCheckout the `examples/` folder for code and interface examples.\r\n\r\n``` prompt\r\nnode examples/pizza.js\r\n# etc\r\n```\r\n\r\n\r\nMethods\r\n---------------------\r\n\r\n### `inquirer.prompt( questions, callback )`\r\n\r\nLaunch the prompt interface (inquiry session)\r\n\r\n+ **questions** (Array) containing [Question Object](#question)\r\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\r\n\r\n\r\nObjects\r\n---------------------\r\n\r\n### Question\r\nA question object is a `hash` containing question related values:\r\n\r\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\r\n`list`, `rawlist`\r\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\r\n+ **message**: (String) The question to print.\r\n+ **default**: (String) Default value to use if nothing is entered\r\n+ **choices**: (Array) Choices array.  \r\nValues can be simple `string`s, or `object`s containing a `name` (to display) and a `value` properties (to save in the answers hash).\r\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\r\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\r\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\r\n\r\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\r\n\r\n``` javascript\r\n{\r\n  validate: function(input) {\r\n\r\n    // Declare function as asynchronous, and save the done callback\r\n    var done = this.async();\r\n\r\n    // Do async stuff\r\n    setTimeout(function() {\r\n      if (typeof input !== \"number\") {\r\n        // Pass the return value in the done callback\r\n        done(\"You need to provide a number\");\r\n        return;\r\n      }\r\n      // Pass the return value in the done callback\r\n      done(true);\r\n    }, 3000);\r\n  }\r\n}\r\n```\r\n\r\n### Answers\r\nA key/value hash containing the client answers in each prompt.\r\n\r\n+ **Key** The `name` property of the _question_ object\r\n+ **Value** (Depends on the prompt)\r\n  + `confirm`: (Boolean)\r\n  + `input` : User input (filtered if `filter` is defined) (String)\r\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\r\n\r\n\r\nPrompts\r\n---------------------\r\n\r\n### List - `{ type: \"list\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must the choice `index` in the array)\r\n\r\n``` prompt\r\n[?] What about the toping: (Use arrow key)\r\n  [X] Peperonni and chesse\r\n  [ ] All dressed\r\n  [ ] Hawaïan\r\n```\r\n\r\n### Raw List - `{ type: \"rawlist\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must the choice `index` in the array)\r\n\r\n``` prompt\r\n[?] You also get a free 2L liquor: \r\n  1) Pepsi\r\n  2) 7up\r\n  3) Coke\r\n  Answer: \r\n```\r\n\r\n### Confirm - `{ type: \"confirm\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`] properties.\r\n\r\n``` prompt\r\n[?] Is it for a delivery: (Y/n)\r\n```\r\n\r\n### Input - `{ type: \"input\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n``` prompt\r\n[?] Any comments on your purchase experience: (Nope, all good!)\r\n```\r\n\r\n\r\nNews on the march (Release notes)\r\n=====================\r\n\r\n+ **0.1.7** : Add a hierarchical prompt API with `when`, allow lists from having a default\r\n+ **0.1.6** : Fix bug on unix and minor enhancement\r\n+ **0.1.5** : Enhance visual style; prompts are now more succint. Lots of bug fixes.\r\n+ **0.1.3** : Add async support for validation and filtering functions.\r\n+ **0.1.0** : First official release. There's 4 prompt types: `input`, `confirm`, `list` and\r\n`rawlist`. There's functionnality to allow the validation of input, and the filtering of values.\r\n\r\n\r\nContributing\r\n=====================\r\n\r\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \r\n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\r\nor bug fix. `npm test` to run the test suite.  \r\n**Documentation**: Add documentation for every API change. Feel free to send corrections\r\nor better docs!  \r\n\r\n\r\nLicense\r\n=====================\r\n\r\nCopyright (c) 2012 Simon Boudrias  \r\nLicensed under the MIT license.\r\n","_id":"inquirer@0.1.8","dist":{"shasum":"ea418a099e7d38a1e513735913c2329475b46dd0","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.1.8.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.1.9":{"name":"inquirer","version":"0.1.9","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\r\n=====================\r\n\r\nA collection of common interactive command line user interfaces.\r\n\r\n\r\nGoal and philosophy\r\n---------------------\r\n\r\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\r\nsome hope in becoming the CLI Xanadu.\r\n\r\n_Inquirer_ should ease the process of asking end user questions, parsing, validating answers, and providing error feedback.\r\n\r\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\r\n\r\n\r\nDocumentation\r\n=====================\r\n\r\n\r\nInstallation\r\n---------------------\r\n\r\n``` prompt\r\nnpm install inquirer\r\n```\r\n\r\n```javascript\r\nvar inquirer = require(\"inquirer\");\r\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\r\n\t// Use user feedback for... whatever!!\r\n});\r\n```\r\n\r\n\r\nExamples (Run it and see it)\r\n---------------------\r\n\r\nCheckout the `examples/` folder for code and interface examples.\r\n\r\n``` prompt\r\nnode examples/pizza.js\r\n# etc\r\n```\r\n\r\n\r\nMethods\r\n---------------------\r\n\r\n### `inquirer.prompt( questions, callback )`\r\n\r\nLaunch the prompt interface (inquiry session)\r\n\r\n+ **questions** (Array) containing [Question Object](#question)\r\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\r\n\r\n\r\nObjects\r\n---------------------\r\n\r\n### Question\r\nA question object is a `hash` containing question related values:\r\n\r\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\r\n`list`, `rawlist`\r\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\r\n+ **message**: (String) The question to print.\r\n+ **default**: (String) Default value to use if nothing is entered\r\n+ **choices**: (Array) Choices array.  \r\nValues can be simple `string`s, or `object`s containing a `name` (to display) and a `value` properties (to save in the answers hash).\r\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\r\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\r\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\r\n\r\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\r\n\r\n``` javascript\r\n{\r\n  validate: function(input) {\r\n\r\n    // Declare function as asynchronous, and save the done callback\r\n    var done = this.async();\r\n\r\n    // Do async stuff\r\n    setTimeout(function() {\r\n      if (typeof input !== \"number\") {\r\n        // Pass the return value in the done callback\r\n        done(\"You need to provide a number\");\r\n        return;\r\n      }\r\n      // Pass the return value in the done callback\r\n      done(true);\r\n    }, 3000);\r\n  }\r\n}\r\n```\r\n\r\n### Answers\r\nA key/value hash containing the client answers in each prompt.\r\n\r\n+ **Key** The `name` property of the _question_ object\r\n+ **Value** (Depends on the prompt)\r\n  + `confirm`: (Boolean)\r\n  + `input` : User input (filtered if `filter` is defined) (String)\r\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\r\n\r\n\r\nPrompts\r\n---------------------\r\n\r\n### List - `{ type: \"list\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must the choice `index` in the array)\r\n\r\n``` prompt\r\n[?] What about the toping: (Use arrow key)\r\n  [X] Peperonni and chesse\r\n  [ ] All dressed\r\n  [ ] Hawaïan\r\n```\r\n\r\n### Raw List - `{ type: \"rawlist\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must the choice `index` in the array)\r\n\r\n``` prompt\r\n[?] You also get a free 2L liquor: \r\n  1) Pepsi\r\n  2) 7up\r\n  3) Coke\r\n  Answer: \r\n```\r\n\r\n### Confirm - `{ type: \"confirm\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`] properties.\r\n\r\n``` prompt\r\n[?] Is it for a delivery: (Y/n)\r\n```\r\n\r\n### Input - `{ type: \"input\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n``` prompt\r\n[?] Any comments on your purchase experience: (Nope, all good!)\r\n```\r\n\r\n\r\nNews on the march (Release notes)\r\n=====================\r\n\r\n+ **0.1.7** : Add a hierarchical prompt API with `when`, allow lists from having a default\r\n+ **0.1.6** : Fix bug on unix and minor enhancement\r\n+ **0.1.5** : Enhance visual style; prompts are now more succint. Lots of bug fixes.\r\n+ **0.1.3** : Add async support for validation and filtering functions.\r\n+ **0.1.0** : First official release. There's 4 prompt types: `input`, `confirm`, `list` and\r\n`rawlist`. There's functionnality to allow the validation of input, and the filtering of values.\r\n\r\n\r\nContributing\r\n=====================\r\n\r\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \r\n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\r\nor bug fix. `npm test` to run the test suite.  \r\n**Documentation**: Add documentation for every API change. Feel free to send corrections\r\nor better docs!  \r\n\r\n\r\nLicense\r\n=====================\r\n\r\nCopyright (c) 2012 Simon Boudrias  \r\nLicensed under the MIT license.\r\n","_id":"inquirer@0.1.9","dist":{"shasum":"f30c4eb8afd49b7566cf851baf0dd9f73c8301ae","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.1.9.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.2.0":{"name":"inquirer","version":"0.2.0","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\n=====================\n\nA collection of common interactive command line user interfaces.\n\n\nGoal and philosophy\n---------------------\n\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\nsome hope in becoming the CLI Xanadu.\n\n_Inquirer_ should ease the process of asking end user questions, parsing, validating answers, and providing error feedback.\n\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\n\n\nDocumentation\n=====================\n\n\nInstallation\n---------------------\n\n``` prompt\nnpm install inquirer\n```\n\n```javascript\nvar inquirer = require(\"inquirer\");\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\n\t// Use user feedback for... whatever!!\n});\n```\n\n\nExamples (Run it and see it)\n---------------------\n\nCheckout the `examples/` folder for code and interface examples.\n\n``` prompt\nnode examples/pizza.js\n# etc\n```\n\n\nMethods\n---------------------\n\n### `inquirer.prompt( questions, callback )`\n\nLaunch the prompt interface (inquiry session)\n\n+ **questions** (Array) containing [Question Object](#question)\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\n\n\nObjects\n---------------------\n\n### Question\nA question object is a `hash` containing question related values:\n\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\n`list`, `rawlist`\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\n+ **message**: (String) The question to print.\n+ **default**: (String) Default value to use if nothing is entered\n+ **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.  \nArray values can be simple `strings`, or `objects` containing a `name` (to display) and a `value` properties (to save in the answers hash).\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\n\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\n\n``` javascript\n{\n  validate: function(input) {\n\n    // Declare function as asynchronous, and save the done callback\n    var done = this.async();\n\n    // Do async stuff\n    setTimeout(function() {\n      if (typeof input !== \"number\") {\n        // Pass the return value in the done callback\n        done(\"You need to provide a number\");\n        return;\n      }\n      // Pass the return value in the done callback\n      done(true);\n    }, 3000);\n  }\n}\n```\n\n### Answers\nA key/value hash containing the client answers in each prompt.\n\n+ **Key** The `name` property of the _question_ object\n+ **Value** (Depends on the prompt)\n  + `confirm`: (Boolean)\n  + `input` : User input (filtered if `filter` is defined) (String)\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\n\n\nPrompts type\n---------------------\n\n_allowed options written inside square brackets (`[]`) are optionnals. Others are required._\n\n### List - `{ type: \"list\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n![List prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/list-prompt.png)\n\n### Raw List - `{ type: \"rawlist\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n![Raw list prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/rawlist-prompt.png)\n\n### Expand - `{ type: \"expand\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\nNote that the `choice` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\n\nSee `examples/expand.js` for a running example.\n\n![Expand prompt closed](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-1.png)\n![Expand prompt expanded](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-2.png)\n\n\n### Checkbox - `{ type: \"checkbox\" }`\n\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`] properties.\n\nChoices marked as `{ checked: true }` will be checked by default.\n\n![Checkbox prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/checkbox-prompt.png)\n\n### Confirm - `{ type: \"confirm\" }`\n\nTake `type`, `name`, `message`[, `default`] properties. `default` is expected to be a boolean if used.\n\n![Confirm prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/confirm-prompt.png)\n\n### Input - `{ type: \"input\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Input prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/input-prompt.png)\n\n### Password - `{ type: \"password\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Password prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/password-prompt.png)\n\n\n\nSupport (OS - terminals)\n=====================\n\nYou should expect mostly good support for the CLI below. This does not mean we won't\nlook at issues found on other command line - feel free to report any!\n\n- **Mac OS**:\n  - Terminal.app\n  - iTerm\n- **Windows**:\n  - cmd.exe\n  - Powershell\n  - Cygwin\n- **Ubuntu**:\n  - Terminal\n\n\nNews on the march (Release notes)\n=====================\n\n+ **0.1.7** : Add a hierarchical prompt API with `when`, allow lists from having a default\n+ **0.1.6** : Fix bug on unix and minor enhancement\n+ **0.1.5** : Enhance visual style; prompts are now more succint. Lots of bug fixes.\n+ **0.1.3** : Add async support for validation and filtering functions.\n+ **0.1.0** : First official release. There's 4 prompt types: `input`, `confirm`, `list` and\n`rawlist`. There's functionnality to allow the validation of input, and the filtering of values.\n\n\nContributing\n=====================\n\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\nor bug fix. `npm test` to run the test suite.  \n**Documentation**: Add documentation for every API change. Feel free to send corrections\nor better docs!  \n\nWe're looking to offer good support for multiples prompt and environments. If you want to\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\nget feedback before release; let us know if you want to be added to the list! (just tweet\nto @vaxilart)\n\n\nLicense\n=====================\n\nCopyright (c) 2012 Simon Boudrias (twitter: @vaxilart)  \nLicensed under the MIT license.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/SBoudrias/Inquirer.js/issues"},"_id":"inquirer@0.2.0","dist":{"shasum":"718be57dce9b5bff5939e1725c2ac28d5eaf3371","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.2.0.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.2.1":{"name":"inquirer","version":"0.2.1","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\n=====================\n\nA collection of common interactive command line user interfaces.\n\n\nGoal and philosophy\n---------------------\n\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\nsome hope in becoming the CLI Xanadu.\n\n_Inquirer_ should ease the process of asking end user questions, parsing, validating answers, and providing error feedback.\n\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\n\n\nDocumentation\n=====================\n\n\nInstallation\n---------------------\n\n``` prompt\nnpm install inquirer\n```\n\n```javascript\nvar inquirer = require(\"inquirer\");\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\n\t// Use user feedback for... whatever!!\n});\n```\n\n\nExamples (Run it and see it)\n---------------------\n\nCheckout the `examples/` folder for code and interface examples.\n\n``` prompt\nnode examples/pizza.js\n# etc\n```\n\n\nMethods\n---------------------\n\n### `inquirer.prompt( questions, callback )`\n\nLaunch the prompt interface (inquiry session)\n\n+ **questions** (Array) containing [Question Object](#question)\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\n\n\nObjects\n---------------------\n\n### Question\nA question object is a `hash` containing question related values:\n\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\n`list`, `rawlist`\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\n+ **message**: (String) The question to print.\n+ **default**: (String) Default value to use if nothing is entered\n+ **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.  \nArray values can be simple `strings`, or `objects` containing a `name` (to display) and a `value` properties (to save in the answers hash).\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\n\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\n\n``` javascript\n{\n  validate: function(input) {\n\n    // Declare function as asynchronous, and save the done callback\n    var done = this.async();\n\n    // Do async stuff\n    setTimeout(function() {\n      if (typeof input !== \"number\") {\n        // Pass the return value in the done callback\n        done(\"You need to provide a number\");\n        return;\n      }\n      // Pass the return value in the done callback\n      done(true);\n    }, 3000);\n  }\n}\n```\n\n### Answers\nA key/value hash containing the client answers in each prompt.\n\n+ **Key** The `name` property of the _question_ object\n+ **Value** (Depends on the prompt)\n  + `confirm`: (Boolean)\n  + `input` : User input (filtered if `filter` is defined) (String)\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\n\n\nPrompts type\n---------------------\n\n_allowed options written inside square brackets (`[]`) are optionnals. Others are required._\n\n### List - `{ type: \"list\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n![List prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/list-prompt.png)\n\n### Raw List - `{ type: \"rawlist\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n![Raw list prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/rawlist-prompt.png)\n\n### Expand - `{ type: \"expand\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\nNote that the `choice` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\n\nSee `examples/expand.js` for a running example.\n\n![Expand prompt closed](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-1.png)\n![Expand prompt expanded](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-2.png)\n\n\n### Checkbox - `{ type: \"checkbox\" }`\n\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`] properties.\n\nChoices marked as `{ checked: true }` will be checked by default.\n\n![Checkbox prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/checkbox-prompt.png)\n\n### Confirm - `{ type: \"confirm\" }`\n\nTake `type`, `name`, `message`[, `default`] properties. `default` is expected to be a boolean if used.\n\n![Confirm prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/confirm-prompt.png)\n\n### Input - `{ type: \"input\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Input prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/input-prompt.png)\n\n### Password - `{ type: \"password\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Password prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/password-prompt.png)\n\n\n\nSupport (OS - terminals)\n=====================\n\nYou should expect mostly good support for the CLI below. This does not mean we won't\nlook at issues found on other command line - feel free to report any!\n\n- **Mac OS**:\n  - Terminal.app\n  - iTerm\n- **Windows**:\n  - cmd.exe\n  - Powershell\n  - Cygwin\n- **Ubuntu**:\n  - Terminal\n\n\nNews on the march (Release notes)\n=====================\n\n+ **0.1.7** : Add a hierarchical prompt API with `when`, allow lists from having a default\n+ **0.1.6** : Fix bug on unix and minor enhancement\n+ **0.1.5** : Enhance visual style; prompts are now more succint. Lots of bug fixes.\n+ **0.1.3** : Add async support for validation and filtering functions.\n+ **0.1.0** : First official release. There's 4 prompt types: `input`, `confirm`, `list` and\n`rawlist`. There's functionnality to allow the validation of input, and the filtering of values.\n\n\nContributing\n=====================\n\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\nor bug fix. `npm test` to run the test suite.  \n**Documentation**: Add documentation for every API change. Feel free to send corrections\nor better docs!  \n\nWe're looking to offer good support for multiples prompt and environments. If you want to\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\nget feedback before release; let us know if you want to be added to the list! (just tweet\nto @vaxilart)\n\n\nLicense\n=====================\n\nCopyright (c) 2012 Simon Boudrias (twitter: @vaxilart)  \nLicensed under the MIT license.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/SBoudrias/Inquirer.js/issues"},"_id":"inquirer@0.2.1","dist":{"shasum":"d9aebe0e28545b69a8b871c32c3dbfd8cf39c903","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.2.1.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.1.11":{"name":"inquirer","version":"0.1.11","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\n=====================\n\nA collection of common interactive command line user interfaces.\n\n\nGoal and philosophy\n---------------------\n\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\nsome hope in becoming the CLI Xanadu.\n\n_Inquirer_ should ease the process of asking end user questions, parsing, validating answers, and providing error feedback.\n\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\n\n\nDocumentation\n=====================\n\n\nInstallation\n---------------------\n\n``` prompt\nnpm install inquirer\n```\n\n```javascript\nvar inquirer = require(\"inquirer\");\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\n\t// Use user feedback for... whatever!!\n});\n```\n\n\nExamples (Run it and see it)\n---------------------\n\nCheckout the `examples/` folder for code and interface examples.\n\n``` prompt\nnode examples/pizza.js\n# etc\n```\n\n\nMethods\n---------------------\n\n### `inquirer.prompt( questions, callback )`\n\nLaunch the prompt interface (inquiry session)\n\n+ **questions** (Array) containing [Question Object](#question)\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\n\n\nObjects\n---------------------\n\n### Question\nA question object is a `hash` containing question related values:\n\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\n`list`, `rawlist`\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\n+ **message**: (String) The question to print.\n+ **default**: (String) Default value to use if nothing is entered\n+ **choices**: (Array) Choices array.  \nValues can be simple `string`s, or `object`s containing a `name` (to display) and a `value` properties (to save in the answers hash).\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\n\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\n\n``` javascript\n{\n  validate: function(input) {\n\n    // Declare function as asynchronous, and save the done callback\n    var done = this.async();\n\n    // Do async stuff\n    setTimeout(function() {\n      if (typeof input !== \"number\") {\n        // Pass the return value in the done callback\n        done(\"You need to provide a number\");\n        return;\n      }\n      // Pass the return value in the done callback\n      done(true);\n    }, 3000);\n  }\n}\n```\n\n### Answers\nA key/value hash containing the client answers in each prompt.\n\n+ **Key** The `name` property of the _question_ object\n+ **Value** (Depends on the prompt)\n  + `confirm`: (Boolean)\n  + `input` : User input (filtered if `filter` is defined) (String)\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\n\n\nPrompts\n---------------------\n\n### List - `{ type: \"list\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n``` prompt\n[?] What about the toping: (Use arrow key)\n  [X] Peperonni and chesse\n  [ ] All dressed\n  [ ] Hawaïan\n```\n\n### Raw List - `{ type: \"rawlist\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n``` prompt\n[?] You also get a free 2L liquor: \n  1) Pepsi\n  2) 7up\n  3) Coke\n  Answer: \n```\n\n### Confirm - `{ type: \"confirm\" }`\n\nTake `type`, `name`, `message`[, `default`] properties.\n\n``` prompt\n[?] Is it for a delivery: (Y/n)\n```\n\n### Input - `{ type: \"input\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n``` prompt\n[?] Any comments on your purchase experience: (Nope, all good!)\n```\n\n\nNews on the march (Release notes)\n=====================\n\n+ **0.1.7** : Add a hierarchical prompt API with `when`, allow lists from having a default\n+ **0.1.6** : Fix bug on unix and minor enhancement\n+ **0.1.5** : Enhance visual style; prompts are now more succint. Lots of bug fixes.\n+ **0.1.3** : Add async support for validation and filtering functions.\n+ **0.1.0** : First official release. There's 4 prompt types: `input`, `confirm`, `list` and\n`rawlist`. There's functionnality to allow the validation of input, and the filtering of values.\n\n\nContributing\n=====================\n\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\nor bug fix. `npm test` to run the test suite.  \n**Documentation**: Add documentation for every API change. Feel free to send corrections\nor better docs!  \n\n\nLicense\n=====================\n\nCopyright (c) 2012 Simon Boudrias  \nLicensed under the MIT license.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/SBoudrias/Inquirer.js/issues"},"_id":"inquirer@0.1.11","dist":{"shasum":"8647830c6c3b74d25db430fa15e30617516bb4a4","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.1.11.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.1.12":{"name":"inquirer","version":"0.1.12","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\n=====================\n\nA collection of common interactive command line user interfaces.\n\n\nGoal and philosophy\n---------------------\n\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\nsome hope in becoming the CLI Xanadu.\n\n_Inquirer_ should ease the process of asking end user questions, parsing, validating answers, and providing error feedback.\n\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\n\n\nDocumentation\n=====================\n\n\nInstallation\n---------------------\n\n``` prompt\nnpm install inquirer\n```\n\n```javascript\nvar inquirer = require(\"inquirer\");\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\n\t// Use user feedback for... whatever!!\n});\n```\n\n\nExamples (Run it and see it)\n---------------------\n\nCheckout the `examples/` folder for code and interface examples.\n\n``` prompt\nnode examples/pizza.js\n# etc\n```\n\n\nMethods\n---------------------\n\n### `inquirer.prompt( questions, callback )`\n\nLaunch the prompt interface (inquiry session)\n\n+ **questions** (Array) containing [Question Object](#question)\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\n\n\nObjects\n---------------------\n\n### Question\nA question object is a `hash` containing question related values:\n\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\n`list`, `rawlist`\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\n+ **message**: (String) The question to print.\n+ **default**: (String) Default value to use if nothing is entered\n+ **choices**: (Array) Choices array.  \nValues can be simple `string`s, or `object`s containing a `name` (to display) and a `value` properties (to save in the answers hash).\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\n\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\n\n``` javascript\n{\n  validate: function(input) {\n\n    // Declare function as asynchronous, and save the done callback\n    var done = this.async();\n\n    // Do async stuff\n    setTimeout(function() {\n      if (typeof input !== \"number\") {\n        // Pass the return value in the done callback\n        done(\"You need to provide a number\");\n        return;\n      }\n      // Pass the return value in the done callback\n      done(true);\n    }, 3000);\n  }\n}\n```\n\n### Answers\nA key/value hash containing the client answers in each prompt.\n\n+ **Key** The `name` property of the _question_ object\n+ **Value** (Depends on the prompt)\n  + `confirm`: (Boolean)\n  + `input` : User input (filtered if `filter` is defined) (String)\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\n\n\nPrompts\n---------------------\n\n### List - `{ type: \"list\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n``` prompt\n[?] What about the toping: (Use arrow key)\n  [X] Peperonni and chesse\n  [ ] All dressed\n  [ ] Hawaïan\n```\n\n### Raw List - `{ type: \"rawlist\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n``` prompt\n[?] You also get a free 2L liquor: \n  1) Pepsi\n  2) 7up\n  3) Coke\n  Answer: \n```\n\n### Confirm - `{ type: \"confirm\" }`\n\nTake `type`, `name`, `message`[, `default`] properties.\n\n``` prompt\n[?] Is it for a delivery: (Y/n)\n```\n\n### Input - `{ type: \"input\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n``` prompt\n[?] Any comments on your purchase experience: (Nope, all good!)\n```\n\n\nNews on the march (Release notes)\n=====================\n\n+ **0.1.7** : Add a hierarchical prompt API with `when`, allow lists from having a default\n+ **0.1.6** : Fix bug on unix and minor enhancement\n+ **0.1.5** : Enhance visual style; prompts are now more succint. Lots of bug fixes.\n+ **0.1.3** : Add async support for validation and filtering functions.\n+ **0.1.0** : First official release. There's 4 prompt types: `input`, `confirm`, `list` and\n`rawlist`. There's functionnality to allow the validation of input, and the filtering of values.\n\n\nContributing\n=====================\n\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\nor bug fix. `npm test` to run the test suite.  \n**Documentation**: Add documentation for every API change. Feel free to send corrections\nor better docs!  \n\n\nLicense\n=====================\n\nCopyright (c) 2012 Simon Boudrias  \nLicensed under the MIT license.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/SBoudrias/Inquirer.js/issues"},"_id":"inquirer@0.1.12","dist":{"shasum":"0fc05b79e3af1c565f0452ba18438372de44258e","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.1.12.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.2.2":{"name":"inquirer","version":"0.2.2","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\n=====================\n\nA collection of common interactive command line user interfaces.\n\n\nGoal and philosophy\n---------------------\n\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\nsome hope in becoming the CLI Xanadu.\n\n_Inquirer_ should ease the process of asking end user **questions**, **parsing**, **validating** answers, managing **hierarchical prompts** and providing **error feedback**.\n\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\n\n\nDocumentation\n=====================\n\n\nInstallation\n---------------------\n\n``` prompt\nnpm install inquirer\n```\n\n```javascript\nvar inquirer = require(\"inquirer\");\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\n\t// Use user feedback for... whatever!!\n});\n```\n\n\nExamples (Run it and see it)\n---------------------\n\nCheckout the `examples/` folder for code and interface examples.\n\n``` prompt\nnode examples/pizza.js\n# etc\n```\n\n\nMethods\n---------------------\n\n### `inquirer.prompt( questions, callback )`\n\nLaunch the prompt interface (inquiry session)\n\n+ **questions** (Array) containing [Question Object](#question)\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\n\n\nObjects\n---------------------\n\n### Question\nA question object is a `hash` containing question related values:\n\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\n`list`, `rawlist`\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\n+ **message**: (String) The question to print.\n+ **default**: (String) Default value to use if nothing is entered\n+ **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.  \nArray values can be simple `strings`, or `objects` containing a `name` (to display) and a `value` properties (to save in the answers hash).\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\n\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\n\n``` javascript\n{\n  validate: function(input) {\n\n    // Declare function as asynchronous, and save the done callback\n    var done = this.async();\n\n    // Do async stuff\n    setTimeout(function() {\n      if (typeof input !== \"number\") {\n        // Pass the return value in the done callback\n        done(\"You need to provide a number\");\n        return;\n      }\n      // Pass the return value in the done callback\n      done(true);\n    }, 3000);\n  }\n}\n```\n\n### Answers\nA key/value hash containing the client answers in each prompt.\n\n+ **Key** The `name` property of the _question_ object\n+ **Value** (Depends on the prompt)\n  + `confirm`: (Boolean)\n  + `input` : User input (filtered if `filter` is defined) (String)\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\n\n\nPrompts type\n---------------------\n\n_allowed options written inside square brackets (`[]`) are optionnals. Others are required._\n\n### List - `{ type: \"list\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n![List prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/list-prompt.png)\n\n### Raw List - `{ type: \"rawlist\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n![Raw list prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/rawlist-prompt.png)\n\n### Expand - `{ type: \"expand\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\nNote that the `choice` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\n\nSee `examples/expand.js` for a running example.\n\n![Expand prompt closed](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-1.png)\n![Expand prompt expanded](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-2.png)\n\n\n### Checkbox - `{ type: \"checkbox\" }`\n\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`] properties.\n\nChoices marked as `{ checked: true }` will be checked by default.\n\n![Checkbox prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/checkbox-prompt.png)\n\n### Confirm - `{ type: \"confirm\" }`\n\nTake `type`, `name`, `message`[, `default`] properties. `default` is expected to be a boolean if used.\n\n![Confirm prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/confirm-prompt.png)\n\n### Input - `{ type: \"input\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Input prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/input-prompt.png)\n\n### Password - `{ type: \"password\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Password prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/password-prompt.png)\n\n\n\nSupport (OS - terminals)\n=====================\n\nYou should expect mostly good support for the CLI below. This does not mean we won't\nlook at issues found on other command line - feel free to report any!\n\n- **Mac OS**:\n  - Terminal.app\n  - iTerm\n- **Windows**:\n  - cmd.exe\n  - Powershell\n  - Cygwin\n- **Ubuntu**:\n  - Terminal\n\n\nNews on the march (Release notes)\n=====================\n\nPlease refer to the [Github releases section for the changelog](https://github.com/SBoudrias/Inquirer.js/releases)\n\n\nContributing\n=====================\n\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\nor bug fix. `npm test` to run the test suite.  \n**Documentation**: Add documentation for every API change. Feel free to send corrections\nor better docs!  \n**Pull Requests**: Send _fixes_ PR on the `master` branch. Any new features should be send on the `wip`branch.\n\nWe're looking to offer good support for multiples prompt and environments. If you want to\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\nget feedback before release; let us know if you want to be added to the list! (just tweet\nto @vaxilart)\n\n\nLicense\n=====================\n\nCopyright (c) 2012 Simon Boudrias (twitter: @vaxilart)  \nLicensed under the MIT license.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/SBoudrias/Inquirer.js/issues"},"_id":"inquirer@0.2.2","dist":{"shasum":"30f3285835d6e0c3312163ea20429fe0bf71b414","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.2.2.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.2.3":{"name":"inquirer","version":"0.2.3","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\n=====================\n\nA collection of common interactive command line user interfaces.\n\n\nGoal and philosophy\n---------------------\n\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\nsome hope in becoming the CLI Xanadu.\n\n_Inquirer_ should ease the process of asking end user **questions**, **parsing**, **validating** answers, managing **hierarchical prompts** and providing **error feedback**.\n\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\n\n\nDocumentation\n=====================\n\n\nInstallation\n---------------------\n\n``` prompt\nnpm install inquirer\n```\n\n```javascript\nvar inquirer = require(\"inquirer\");\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\n\t// Use user feedback for... whatever!!\n});\n```\n\n\nExamples (Run it and see it)\n---------------------\n\nCheckout the `examples/` folder for code and interface examples.\n\n``` prompt\nnode examples/pizza.js\n# etc\n```\n\n\nMethods\n---------------------\n\n### `inquirer.prompt( questions, callback )`\n\nLaunch the prompt interface (inquiry session)\n\n+ **questions** (Array) containing [Question Object](#question)\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\n\n\nObjects\n---------------------\n\n### Question\nA question object is a `hash` containing question related values:\n\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\n`list`, `rawlist`\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\n+ **message**: (String) The question to print.\n+ **default**: (String) Default value to use if nothing is entered\n+ **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.  \nArray values can be simple `strings`, or `objects` containing a `name` (to display) and a `value` properties (to save in the answers hash).\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\n\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\n\n``` javascript\n{\n  validate: function(input) {\n\n    // Declare function as asynchronous, and save the done callback\n    var done = this.async();\n\n    // Do async stuff\n    setTimeout(function() {\n      if (typeof input !== \"number\") {\n        // Pass the return value in the done callback\n        done(\"You need to provide a number\");\n        return;\n      }\n      // Pass the return value in the done callback\n      done(true);\n    }, 3000);\n  }\n}\n```\n\n### Answers\nA key/value hash containing the client answers in each prompt.\n\n+ **Key** The `name` property of the _question_ object\n+ **Value** (Depends on the prompt)\n  + `confirm`: (Boolean)\n  + `input` : User input (filtered if `filter` is defined) (String)\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\n\n\nPrompts type\n---------------------\n\n_allowed options written inside square brackets (`[]`) are optional. Others are required._\n\n### List - `{ type: \"list\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must be the choice `index` in the array)\n\n![List prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/list-prompt.png)\n\n### Raw List - `{ type: \"rawlist\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n![Raw list prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/rawlist-prompt.png)\n\n### Expand - `{ type: \"expand\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must be the choice `index` in the array)\n\nNote that the `choice` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\n\nSee `examples/expand.js` for a running example.\n\n![Expand prompt closed](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-1.png)\n![Expand prompt expanded](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-2.png)\n\n\n### Checkbox - `{ type: \"checkbox\" }`\n\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`] properties.\n\nChoices marked as `{ checked: true }` will be checked by default.\n\n![Checkbox prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/checkbox-prompt.png)\n\n### Confirm - `{ type: \"confirm\" }`\n\nTake `type`, `name`, `message`[, `default`] properties. `default` is expected to be a boolean if used.\n\n![Confirm prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/confirm-prompt.png)\n\n### Input - `{ type: \"input\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Input prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/input-prompt.png)\n\n### Password - `{ type: \"password\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Password prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/password-prompt.png)\n\n\n\nSupport (OS - terminals)\n=====================\n\nYou should expect mostly good support for the CLI below. This does not mean we won't\nlook at issues found on other command line - feel free to report any!\n\n- **Mac OS**:\n  - Terminal.app\n  - iTerm\n- **Windows**:\n  - cmd.exe\n  - Powershell\n  - Cygwin\n- **Ubuntu**:\n  - Terminal\n\n\nNews on the march (Release notes)\n=====================\n\nPlease refer to the [Github releases section for the changelog](https://github.com/SBoudrias/Inquirer.js/releases)\n\n\nContributing\n=====================\n\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\nor bug fix. `npm test` to run the test suite.  \n**Documentation**: Add documentation for every API change. Feel free to send corrections\nor better docs!  \n**Pull Requests**: Send _fixes_ PR on the `master` branch. Any new features should be send on the `wip`branch.\n\nWe're looking to offer good support for multiple prompts and environments. If you want to\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\nget feedback before release. Let us know if you want to be added to the list (just tweet\nto @vaxilart) or just add your name to [the wiki](https://github.com/SBoudrias/Inquirer.js/wiki/Testers)\n\nLicense\n=====================\n\nCopyright (c) 2012 Simon Boudrias (twitter: @vaxilart)  \nLicensed under the MIT license.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/SBoudrias/Inquirer.js/issues"},"_id":"inquirer@0.2.3","dist":{"shasum":"95f47d13e1fc2b1edac427e07f60dcafb0dc55a6","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.2.3.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.2.4":{"name":"inquirer","version":"0.2.4","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\r\n=====================\r\n\r\nA collection of common interactive command line user interfaces.\r\n\r\n\r\nGoal and philosophy\r\n---------------------\r\n\r\nWe strive at providing easily embeddable and beatiful command line interface for Node.js ;\r\nsome hope in becoming the CLI Xanadu.\r\n\r\n_Inquirer_ should ease the process of asking end user **questions**, **parsing**, **validating** answers, managing **hierarchical prompts** and providing **error feedback**.\r\n\r\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\r\n\r\n\r\nDocumentation\r\n=====================\r\n\r\n\r\nInstallation\r\n---------------------\r\n\r\n``` prompt\r\nnpm install inquirer\r\n```\r\n\r\n```javascript\r\nvar inquirer = require(\"inquirer\");\r\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\r\n\t// Use user feedback for... whatever!!\r\n});\r\n```\r\n\r\n\r\nExamples (Run it and see it)\r\n---------------------\r\n\r\nCheckout the `examples/` folder for code and interface examples.\r\n\r\n``` prompt\r\nnode examples/pizza.js\r\n# etc\r\n```\r\n\r\n\r\nMethods\r\n---------------------\r\n\r\n### `inquirer.prompt( questions, callback )`\r\n\r\nLaunch the prompt interface (inquiry session)\r\n\r\n+ **questions** (Array) containing [Question Object](#question)\r\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\r\n\r\n\r\nObjects\r\n---------------------\r\n\r\n### Question\r\nA question object is a `hash` containing question related values:\r\n\r\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\r\n`list`, `rawlist`\r\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\r\n+ **message**: (String) The question to print.\r\n+ **default**: (String|Function) Default value to use if nothing is entered, or a function that returns the default value. If defined as a function, the first parameter will be the current inquirer session answers. \r\n+ **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.  \r\nArray values can be simple `strings`, or `objects` containing a `name` (to display) and a `value` properties (to save in the answers hash).\r\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\r\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\r\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\r\n\r\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\r\n\r\n``` javascript\r\n{\r\n  validate: function(input) {\r\n\r\n    // Declare function as asynchronous, and save the done callback\r\n    var done = this.async();\r\n\r\n    // Do async stuff\r\n    setTimeout(function() {\r\n      if (typeof input !== \"number\") {\r\n        // Pass the return value in the done callback\r\n        done(\"You need to provide a number\");\r\n        return;\r\n      }\r\n      // Pass the return value in the done callback\r\n      done(true);\r\n    }, 3000);\r\n  }\r\n}\r\n```\r\n\r\n### Answers\r\nA key/value hash containing the client answers in each prompt.\r\n\r\n+ **Key** The `name` property of the _question_ object\r\n+ **Value** (Depends on the prompt)\r\n  + `confirm`: (Boolean)\r\n  + `input` : User input (filtered if `filter` is defined) (String)\r\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\r\n\r\n\r\nPrompts type\r\n---------------------\r\n\r\n_allowed options written inside square brackets (`[]`) are optional. Others are required._\r\n\r\n### List - `{ type: \"list\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must be the choice `index` in the array)\r\n\r\n![List prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/list-prompt.png)\r\n\r\n### Raw List - `{ type: \"rawlist\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must the choice `index` in the array)\r\n\r\n![Raw list prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/rawlist-prompt.png)\r\n\r\n### Expand - `{ type: \"expand\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must be the choice `index` in the array)\r\n\r\nNote that the `choice` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\r\n\r\nSee `examples/expand.js` for a running example.\r\n\r\n![Expand prompt closed](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-1.png)\r\n![Expand prompt expanded](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-2.png)\r\n\r\n\r\n### Checkbox - `{ type: \"checkbox\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`] properties.\r\n\r\nChoices marked as `{ checked: true }` will be checked by default.\r\n\r\n![Checkbox prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/checkbox-prompt.png)\r\n\r\n### Confirm - `{ type: \"confirm\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`] properties. `default` is expected to be a boolean if used.\r\n\r\n![Confirm prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/confirm-prompt.png)\r\n\r\n### Input - `{ type: \"input\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n![Input prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/input-prompt.png)\r\n\r\n### Password - `{ type: \"password\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n![Password prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/password-prompt.png)\r\n\r\n\r\n\r\nSupport (OS - terminals)\r\n=====================\r\n\r\nYou should expect mostly good support for the CLI below. This does not mean we won't\r\nlook at issues found on other command line - feel free to report any!\r\n\r\n- **Mac OS**:\r\n  - Terminal.app\r\n  - iTerm\r\n- **Windows**:\r\n  - cmd.exe\r\n  - Powershell\r\n  - Cygwin\r\n- **Ubuntu**:\r\n  - Terminal\r\n\r\n\r\nNews on the march (Release notes)\r\n=====================\r\n\r\nPlease refer to the [Github releases section for the changelog](https://github.com/SBoudrias/Inquirer.js/releases)\r\n\r\n\r\nContributing\r\n=====================\r\n\r\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \r\n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\r\nor bug fix. `npm test` to run the test suite.  \r\n**Documentation**: Add documentation for every API change. Feel free to send corrections\r\nor better docs!  \r\n**Pull Requests**: Send _fixes_ PR on the `master` branch. Any new features should be send on the `wip`branch.\r\n\r\nWe're looking to offer good support for multiple prompts and environments. If you want to\r\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\r\nget feedback before release. Let us know if you want to be added to the list (just tweet\r\nto @vaxilart) or just add your name to [the wiki](https://github.com/SBoudrias/Inquirer.js/wiki/Testers)\r\n\r\nLicense\r\n=====================\r\n\r\nCopyright (c) 2012 Simon Boudrias (twitter: @vaxilart)  \r\nLicensed under the MIT license.\r\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/SBoudrias/Inquirer.js/issues"},"_id":"inquirer@0.2.4","dist":{"shasum":"55dd181ad7826153a2bc959635a3ae8013311d64","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.2.4.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.2.5":{"name":"inquirer","version":"0.2.5","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\r\n=====================\r\n\r\nA collection of common interactive command line user interfaces.\r\n\r\n\r\nGoal and philosophy\r\n---------------------\r\n\r\nWe strive at providing easily embeddable and beautiful command line interface for Node.js ;\r\nsome hope in becoming the CLI Xanadu.\r\n\r\n_Inquirer_ should ease the process of asking end user **questions**, **parsing**, **validating** answers, managing **hierarchical prompts** and providing **error feedback**.\r\n\r\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\r\n\r\n\r\nDocumentation\r\n=====================\r\n\r\n\r\nInstallation\r\n---------------------\r\n\r\n``` prompt\r\nnpm install inquirer\r\n```\r\n\r\n```javascript\r\nvar inquirer = require(\"inquirer\");\r\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\r\n\t// Use user feedback for... whatever!!\r\n});\r\n```\r\n\r\n\r\nExamples (Run it and see it)\r\n---------------------\r\n\r\nCheckout the `examples/` folder for code and interface examples.\r\n\r\n``` prompt\r\nnode examples/pizza.js\r\n# etc\r\n```\r\n\r\n\r\nMethods\r\n---------------------\r\n\r\n### `inquirer.prompt( questions, callback )`\r\n\r\nLaunch the prompt interface (inquiry session)\r\n\r\n+ **questions** (Array) containing [Question Object](#question)\r\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\r\n\r\n\r\nObjects\r\n---------------------\r\n\r\n### Question\r\nA question object is a `hash` containing question related values:\r\n\r\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\r\n`list`, `rawlist`\r\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\r\n+ **message**: (String) The question to print.\r\n+ **default**: (String|Function) Default value to use if nothing is entered, or a function that returns the default value. If defined as a function, the first parameter will be the current inquirer session answers. \r\n+ **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.  \r\nArray values can be simple `strings`, or `objects` containing a `name` (to display) and a `value` properties (to save in the answers hash).\r\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\r\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\r\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\r\n\r\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\r\n\r\n``` javascript\r\n{\r\n  validate: function(input) {\r\n\r\n    // Declare function as asynchronous, and save the done callback\r\n    var done = this.async();\r\n\r\n    // Do async stuff\r\n    setTimeout(function() {\r\n      if (typeof input !== \"number\") {\r\n        // Pass the return value in the done callback\r\n        done(\"You need to provide a number\");\r\n        return;\r\n      }\r\n      // Pass the return value in the done callback\r\n      done(true);\r\n    }, 3000);\r\n  }\r\n}\r\n```\r\n\r\n### Answers\r\nA key/value hash containing the client answers in each prompt.\r\n\r\n+ **Key** The `name` property of the _question_ object\r\n+ **Value** (Depends on the prompt)\r\n  + `confirm`: (Boolean)\r\n  + `input` : User input (filtered if `filter` is defined) (String)\r\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\r\n\r\n\r\nPrompts type\r\n---------------------\r\n\r\n_allowed options written inside square brackets (`[]`) are optional. Others are required._\r\n\r\n### List - `{ type: \"list\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must be the choice `index` in the array)\r\n\r\n![List prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/list-prompt.png)\r\n\r\n### Raw List - `{ type: \"rawlist\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must the choice `index` in the array)\r\n\r\n![Raw list prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/rawlist-prompt.png)\r\n\r\n### Expand - `{ type: \"expand\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must be the choice `index` in the array)\r\n\r\nNote that the `choice` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\r\n\r\nSee `examples/expand.js` for a running example.\r\n\r\n![Expand prompt closed](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-1.png)\r\n![Expand prompt expanded](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-2.png)\r\n\r\n\r\n### Checkbox - `{ type: \"checkbox\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`] properties.\r\n\r\nChoices marked as `{ checked: true }` will be checked by default.\r\n\r\n![Checkbox prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/checkbox-prompt.png)\r\n\r\n### Confirm - `{ type: \"confirm\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`] properties. `default` is expected to be a boolean if used.\r\n\r\n![Confirm prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/confirm-prompt.png)\r\n\r\n### Input - `{ type: \"input\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n![Input prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/input-prompt.png)\r\n\r\n### Password - `{ type: \"password\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n![Password prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/password-prompt.png)\r\n\r\n\r\n\r\nSupport (OS - terminals)\r\n=====================\r\n\r\nYou should expect mostly good support for the CLI below. This does not mean we won't\r\nlook at issues found on other command line - feel free to report any!\r\n\r\n- **Mac OS**:\r\n  - Terminal.app\r\n  - iTerm\r\n- **Windows**:\r\n  - cmd.exe\r\n  - Powershell\r\n  - Cygwin\r\n- **Ubuntu**:\r\n  - Terminal\r\n\r\n\r\nNews on the march (Release notes)\r\n=====================\r\n\r\nPlease refer to the [Github releases section for the changelog](https://github.com/SBoudrias/Inquirer.js/releases)\r\n\r\n\r\nContributing\r\n=====================\r\n\r\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \r\n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\r\nor bug fix. `npm test` to run the test suite.  \r\n**Documentation**: Add documentation for every API change. Feel free to send corrections\r\nor better docs!  \r\n**Pull Requests**: Send _fixes_ PR on the `master` branch. Any new features should be send on the `wip`branch.\r\n\r\nWe're looking to offer good support for multiple prompts and environments. If you want to\r\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\r\nget feedback before release. Let us know if you want to be added to the list (just tweet\r\nto @vaxilart) or just add your name to [the wiki](https://github.com/SBoudrias/Inquirer.js/wiki/Testers)\r\n\r\nLicense\r\n=====================\r\n\r\nCopyright (c) 2012 Simon Boudrias (twitter: @vaxilart)  \r\nLicensed under the MIT license.\r\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/SBoudrias/Inquirer.js/issues"},"_id":"inquirer@0.2.5","dist":{"shasum":"6b49a9cbe03de776122211f174ef9fe2822c08f6","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.2.5.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.3.0":{"name":"inquirer","version":"0.3.0","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\n=====================\n\nA collection of common interactive command line user interfaces.\n\n\nGoal and philosophy\n---------------------\n\nWe strive at providing easily embeddable and beautiful command line interface for Node.js ;\nsome hope in becoming the CLI Xanadu.\n\n_Inquirer_ should ease the process of asking end user **questions**, **parsing**, **validating** answers, managing **hierarchical prompts** and providing **error feedback**.\n\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\n\n\nDocumentation\n=====================\n\n\nInstallation\n---------------------\n\n``` prompt\nnpm install inquirer\n```\n\n```javascript\nvar inquirer = require(\"inquirer\");\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\n\t// Use user feedback for... whatever!!\n});\n```\n\n\nExamples (Run it and see it)\n---------------------\n\nCheckout the `examples/` folder for code and interface examples.\n\n``` prompt\nnode examples/pizza.js\n# etc\n```\n\n\nMethods\n---------------------\n\n### `inquirer.prompt( questions, callback )`\n\nLaunch the prompt interface (inquiry session)\n\n+ **questions** (Array) containing [Question Object](#question)\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\n\n\nObjects\n---------------------\n\n### Question\nA question object is a `hash` containing question related values:\n\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\n`list`, `rawlist`\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\n+ **message**: (String) The question to print.\n+ **default**: (String|Function) Default value to use if nothing is entered, or a function that returns the default value. If defined as a function, the first parameter will be the current inquirer session answers. \n+ **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.  \nArray values can be simple `strings`, or `objects` containing a `name` (to display) and a `value` properties (to save in the answers hash). Values can also be [a `Separator`](#separator).\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\n\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\n\n``` javascript\n{\n  validate: function(input) {\n\n    // Declare function as asynchronous, and save the done callback\n    var done = this.async();\n\n    // Do async stuff\n    setTimeout(function() {\n      if (typeof input !== \"number\") {\n        // Pass the return value in the done callback\n        done(\"You need to provide a number\");\n        return;\n      }\n      // Pass the return value in the done callback\n      done(true);\n    }, 3000);\n  }\n}\n```\n\n### Answers\nA key/value hash containing the client answers in each prompt.\n\n+ **Key** The `name` property of the _question_ object\n+ **Value** (Depends on the prompt)\n  + `confirm`: (Boolean)\n  + `input` : User input (filtered if `filter` is defined) (String)\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\n\n### Separator\nA separator can be added to any `choices` array:\n\n```\n// In the question object\nchoices: [ \"Choice A\", new inquirer.Separator(), \"choice B\" ]\n\n// Which'll be displayed this way\n[?] What do you want to do?\n > Order a pizza\n   Make a reservation\n   --------\n   Ask opening hours\n   Talk to the receptionnist\n```\n\nThe constructor takes a facultative `String` value that'll be use as the separator. If omitted, the separator will be `--------`.\n\nPrompts type\n---------------------\n\n_allowed options written inside square brackets (`[]`) are optional. Others are required._\n\n### List - `{ type: \"list\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must be the choice `index` in the array)\n\n![List prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/list-prompt.png)\n\n### Raw List - `{ type: \"rawlist\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n![Raw list prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/rawlist-prompt.png)\n\n### Expand - `{ type: \"expand\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must be the choice `index` in the array)\n\nNote that the `choice` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\n\nSee `examples/expand.js` for a running example.\n\n![Expand prompt closed](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-1.png)\n![Expand prompt expanded](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-2.png)\n\n\n### Checkbox - `{ type: \"checkbox\" }`\n\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`] properties.\n\nChoices marked as `{ checked: true }` will be checked by default.\n\n![Checkbox prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/checkbox-prompt.png)\n\n### Confirm - `{ type: \"confirm\" }`\n\nTake `type`, `name`, `message`[, `default`] properties. `default` is expected to be a boolean if used.\n\n![Confirm prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/confirm-prompt.png)\n\n### Input - `{ type: \"input\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Input prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/input-prompt.png)\n\n### Password - `{ type: \"password\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Password prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/password-prompt.png)\n\n\n\nSupport (OS - terminals)\n=====================\n\nYou should expect mostly good support for the CLI below. This does not mean we won't\nlook at issues found on other command line - feel free to report any!\n\n- **Mac OS**:\n  - Terminal.app\n  - iTerm\n- **Windows**:\n  - cmd.exe\n  - Powershell\n  - Cygwin\n- **Ubuntu**:\n  - Terminal\n\n\nNews on the march (Release notes)\n=====================\n\nPlease refer to the [Github releases section for the changelog](https://github.com/SBoudrias/Inquirer.js/releases)\n\n\nContributing\n=====================\n\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\nor bug fix. `npm test` to run the test suite.  \n**Documentation**: Add documentation for every API change. Feel free to send corrections\nor better docs!  \n**Pull Requests**: Send _fixes_ PR on the `master` branch. Any new features should be send on the `wip`branch.\n\nWe're looking to offer good support for multiple prompts and environments. If you want to\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\nget feedback before release. Let us know if you want to be added to the list (just tweet\nto @vaxilart) or just add your name to [the wiki](https://github.com/SBoudrias/Inquirer.js/wiki/Testers)\n\nLicense\n=====================\n\nCopyright (c) 2012 Simon Boudrias (twitter: @vaxilart)  \nLicensed under the MIT license.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/SBoudrias/Inquirer.js/issues"},"_id":"inquirer@0.3.0","dist":{"shasum":"665060888cda990c0fc4e72eec00125cd507afe5","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.3.0.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.3.1":{"name":"inquirer","version":"0.3.1","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\r\n=====================\r\n\r\nA collection of common interactive command line user interfaces.\r\n\r\n\r\nGoal and philosophy\r\n---------------------\r\n\r\nWe strive at providing easily embeddable and beautiful command line interface for Node.js ;\r\nsome hope in becoming the CLI Xanadu.\r\n\r\n_Inquirer_ should ease the process of asking end user **questions**, **parsing**, **validating** answers, managing **hierarchical prompts** and providing **error feedback**.\r\n\r\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\r\n\r\n\r\nDocumentation\r\n=====================\r\n\r\n\r\nInstallation\r\n---------------------\r\n\r\n``` prompt\r\nnpm install inquirer\r\n```\r\n\r\n```javascript\r\nvar inquirer = require(\"inquirer\");\r\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\r\n\t// Use user feedback for... whatever!!\r\n});\r\n```\r\n\r\n\r\nExamples (Run it and see it)\r\n---------------------\r\n\r\nCheckout the `examples/` folder for code and interface examples.\r\n\r\n``` prompt\r\nnode examples/pizza.js\r\n# etc\r\n```\r\n\r\n\r\nMethods\r\n---------------------\r\n\r\n### `inquirer.prompt( questions, callback )`\r\n\r\nLaunch the prompt interface (inquiry session)\r\n\r\n+ **questions** (Array) containing [Question Object](#question)\r\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\r\n\r\n\r\nObjects\r\n---------------------\r\n\r\n### Question\r\nA question object is a `hash` containing question related values:\r\n\r\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\r\n`list`, `rawlist`\r\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\r\n+ **message**: (String) The question to print.\r\n+ **default**: (String|Function) Default value to use if nothing is entered, or a function that returns the default value. If defined as a function, the first parameter will be the current inquirer session answers. \r\n+ **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.  \r\nArray values can be simple `strings`, or `objects` containing a `name` (to display) and a `value` properties (to save in the answers hash). Values can also be [a `Separator`](#separator).\r\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\r\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\r\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\r\n\r\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\r\n\r\n``` javascript\r\n{\r\n  validate: function(input) {\r\n\r\n    // Declare function as asynchronous, and save the done callback\r\n    var done = this.async();\r\n\r\n    // Do async stuff\r\n    setTimeout(function() {\r\n      if (typeof input !== \"number\") {\r\n        // Pass the return value in the done callback\r\n        done(\"You need to provide a number\");\r\n        return;\r\n      }\r\n      // Pass the return value in the done callback\r\n      done(true);\r\n    }, 3000);\r\n  }\r\n}\r\n```\r\n\r\n### Answers\r\nA key/value hash containing the client answers in each prompt.\r\n\r\n+ **Key** The `name` property of the _question_ object\r\n+ **Value** (Depends on the prompt)\r\n  + `confirm`: (Boolean)\r\n  + `input` : User input (filtered if `filter` is defined) (String)\r\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\r\n\r\n### Separator\r\nA separator can be added to any `choices` array:\r\n\r\n```\r\n// In the question object\r\nchoices: [ \"Choice A\", new inquirer.Separator(), \"choice B\" ]\r\n\r\n// Which'll be displayed this way\r\n[?] What do you want to do?\r\n > Order a pizza\r\n   Make a reservation\r\n   --------\r\n   Ask opening hours\r\n   Talk to the receptionnist\r\n```\r\n\r\nThe constructor takes a facultative `String` value that'll be use as the separator. If omitted, the separator will be `--------`.\r\n\r\nPrompts type\r\n---------------------\r\n\r\n_allowed options written inside square brackets (`[]`) are optional. Others are required._\r\n\r\n### List - `{ type: \"list\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must be the choice `index` in the array)\r\n\r\n![List prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/list-prompt.png)\r\n\r\n### Raw List - `{ type: \"rawlist\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must the choice `index` in the array)\r\n\r\n![Raw list prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/rawlist-prompt.png)\r\n\r\n### Expand - `{ type: \"expand\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must be the choice `index` in the array)\r\n\r\nNote that the `choice` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\r\n\r\nSee `examples/expand.js` for a running example.\r\n\r\n![Expand prompt closed](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-1.png)\r\n![Expand prompt expanded](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-2.png)\r\n\r\n\r\n### Checkbox - `{ type: \"checkbox\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`] properties.\r\n\r\nChoices marked as `{ checked: true }` will be checked by default.\r\n\r\n![Checkbox prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/checkbox-prompt.png)\r\n\r\n### Confirm - `{ type: \"confirm\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`] properties. `default` is expected to be a boolean if used.\r\n\r\n![Confirm prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/confirm-prompt.png)\r\n\r\n### Input - `{ type: \"input\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n![Input prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/input-prompt.png)\r\n\r\n### Password - `{ type: \"password\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n![Password prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/password-prompt.png)\r\n\r\n\r\n\r\nSupport (OS - terminals)\r\n=====================\r\n\r\nYou should expect mostly good support for the CLI below. This does not mean we won't\r\nlook at issues found on other command line - feel free to report any!\r\n\r\n- **Mac OS**:\r\n  - Terminal.app\r\n  - iTerm\r\n- **Windows**:\r\n  - cmd.exe\r\n  - Powershell\r\n  - Cygwin\r\n- **Ubuntu**:\r\n  - Terminal\r\n\r\n\r\nNews on the march (Release notes)\r\n=====================\r\n\r\nPlease refer to the [Github releases section for the changelog](https://github.com/SBoudrias/Inquirer.js/releases)\r\n\r\n\r\nContributing\r\n=====================\r\n\r\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \r\n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\r\nor bug fix. `npm test` to run the test suite.  \r\n**Documentation**: Add documentation for every API change. Feel free to send corrections\r\nor better docs!  \r\n**Pull Requests**: Send _fixes_ PR on the `master` branch. Any new features should be send on the `wip`branch.\r\n\r\nWe're looking to offer good support for multiple prompts and environments. If you want to\r\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\r\nget feedback before release. Let us know if you want to be added to the list (just tweet\r\nto @vaxilart) or just add your name to [the wiki](https://github.com/SBoudrias/Inquirer.js/wiki/Testers)\r\n\r\nLicense\r\n=====================\r\n\r\nCopyright (c) 2012 Simon Boudrias (twitter: @vaxilart)  \r\nLicensed under the MIT license.\r\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/SBoudrias/Inquirer.js/issues"},"_id":"inquirer@0.3.1","dist":{"shasum":"31efb1aefa478a405aa26ee6dac3bb72b2a8bac8","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.3.1.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.3.2":{"name":"inquirer","version":"0.3.2","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\n=====================\n\nA collection of common interactive command line user interfaces.\n\n\nGoal and philosophy\n---------------------\n\nWe strive at providing easily embeddable and beautiful command line interface for Node.js ;\nsome hope in becoming the CLI Xanadu.\n\n_Inquirer_ should ease the process of asking end user **questions**, **parsing**, **validating** answers, managing **hierarchical prompts** and providing **error feedback**.\n\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\n\n\nDocumentation\n=====================\n\n\nInstallation\n---------------------\n\n``` prompt\nnpm install inquirer\n```\n\n```javascript\nvar inquirer = require(\"inquirer\");\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\n\t// Use user feedback for... whatever!!\n});\n```\n\n\nExamples (Run it and see it)\n---------------------\n\nCheckout the `examples/` folder for code and interface examples.\n\n``` prompt\nnode examples/pizza.js\n# etc\n```\n\n\nMethods\n---------------------\n\n### `inquirer.prompt( questions, callback )`\n\nLaunch the prompt interface (inquiry session)\n\n+ **questions** (Array) containing [Question Object](#question)\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\n\n\nObjects\n---------------------\n\n### Question\nA question object is a `hash` containing question related values:\n\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\n`list`, `rawlist`\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\n+ **message**: (String) The question to print.\n+ **default**: (String|Function) Default value to use if nothing is entered, or a function that returns the default value. If defined as a function, the first parameter will be the current inquirer session answers. \n+ **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.  \nArray values can be simple `strings`, or `objects` containing a `name` (to display) and a `value` properties (to save in the answers hash). Values can also be [a `Separator`](#separator).\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\n\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\n\n``` javascript\n{\n  validate: function(input) {\n\n    // Declare function as asynchronous, and save the done callback\n    var done = this.async();\n\n    // Do async stuff\n    setTimeout(function() {\n      if (typeof input !== \"number\") {\n        // Pass the return value in the done callback\n        done(\"You need to provide a number\");\n        return;\n      }\n      // Pass the return value in the done callback\n      done(true);\n    }, 3000);\n  }\n}\n```\n\n### Answers\nA key/value hash containing the client answers in each prompt.\n\n+ **Key** The `name` property of the _question_ object\n+ **Value** (Depends on the prompt)\n  + `confirm`: (Boolean)\n  + `input` : User input (filtered if `filter` is defined) (String)\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\n\n### Separator\nA separator can be added to any `choices` array:\n\n```\n// In the question object\nchoices: [ \"Choice A\", new inquirer.Separator(), \"choice B\" ]\n\n// Which'll be displayed this way\n[?] What do you want to do?\n > Order a pizza\n   Make a reservation\n   --------\n   Ask opening hours\n   Talk to the receptionnist\n```\n\nThe constructor takes a facultative `String` value that'll be use as the separator. If omitted, the separator will be `--------`.\n\nPrompts type\n---------------------\n\n_allowed options written inside square brackets (`[]`) are optional. Others are required._\n\n### List - `{ type: \"list\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must be the choice `index` in the array)\n\n![List prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/list-prompt.png)\n\n### Raw List - `{ type: \"rawlist\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n![Raw list prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/rawlist-prompt.png)\n\n### Expand - `{ type: \"expand\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must be the choice `index` in the array)\n\nNote that the `choice` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\n\nSee `examples/expand.js` for a running example.\n\n![Expand prompt closed](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-1.png)\n![Expand prompt expanded](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-2.png)\n\n\n### Checkbox - `{ type: \"checkbox\" }`\n\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`] properties.\n\nChoices marked as `{ checked: true }` will be checked by default.\n\n![Checkbox prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/checkbox-prompt.png)\n\n### Confirm - `{ type: \"confirm\" }`\n\nTake `type`, `name`, `message`[, `default`] properties. `default` is expected to be a boolean if used.\n\n![Confirm prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/confirm-prompt.png)\n\n### Input - `{ type: \"input\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Input prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/input-prompt.png)\n\n### Password - `{ type: \"password\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Password prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/password-prompt.png)\n\n\n\nSupport (OS - terminals)\n=====================\n\nYou should expect mostly good support for the CLI below. This does not mean we won't\nlook at issues found on other command line - feel free to report any!\n\n- **Mac OS**:\n  - Terminal.app\n  - iTerm\n- **Windows**:\n  - cmd.exe\n  - Powershell\n  - Cygwin\n- **Ubuntu**:\n  - Terminal\n\n\nNews on the march (Release notes)\n=====================\n\nPlease refer to the [Github releases section for the changelog](https://github.com/SBoudrias/Inquirer.js/releases)\n\n\nContributing\n=====================\n\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\nor bug fix. `npm test` to run the test suite.  \n**Documentation**: Add documentation for every API change. Feel free to send corrections\nor better docs!  \n**Pull Requests**: Send _fixes_ PR on the `master` branch. Any new features should be send on the `wip`branch.\n\nWe're looking to offer good support for multiple prompts and environments. If you want to\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\nget feedback before release. Let us know if you want to be added to the list (just tweet\nto @vaxilart) or just add your name to [the wiki](https://github.com/SBoudrias/Inquirer.js/wiki/Testers)\n\nLicense\n=====================\n\nCopyright (c) 2012 Simon Boudrias (twitter: @vaxilart)  \nLicensed under the MIT license.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/SBoudrias/Inquirer.js/issues"},"_id":"inquirer@0.3.2","dist":{"shasum":"a061f2ad3488bd2b38e5ac237c059a79f160bdd4","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.3.2.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.3.3":{"name":"inquirer","version":"0.3.3","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\n=====================\n\nA collection of common interactive command line user interfaces.\n\n\nGoal and philosophy\n---------------------\n\nWe strive at providing easily embeddable and beautiful command line interface for Node.js ;\nsome hope in becoming the CLI Xanadu.\n\n_Inquirer_ should ease the process of asking end user **questions**, **parsing**, **validating** answers, managing **hierarchical prompts** and providing **error feedback**.\n\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\n\n\nDocumentation\n=====================\n\n\nInstallation\n---------------------\n\n``` prompt\nnpm install inquirer\n```\n\n```javascript\nvar inquirer = require(\"inquirer\");\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\n\t// Use user feedback for... whatever!!\n});\n```\n\n\nExamples (Run it and see it)\n---------------------\n\nCheckout the `examples/` folder for code and interface examples.\n\n``` prompt\nnode examples/pizza.js\n# etc\n```\n\n\nMethods\n---------------------\n\n### `inquirer.prompt( questions, callback )`\n\nLaunch the prompt interface (inquiry session)\n\n+ **questions** (Array) containing [Question Object](#question)\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\n\n\nObjects\n---------------------\n\n### Question\nA question object is a `hash` containing question related values:\n\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\n`list`, `rawlist`\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\n+ **message**: (String) The question to print.\n+ **default**: (String|Function) Default value to use if nothing is entered, or a function that returns the default value. If defined as a function, the first parameter will be the current inquirer session answers. \n+ **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.  \nArray values can be simple `strings`, or `objects` containing a `name` (to display) and a `value` properties (to save in the answers hash). Values can also be [a `Separator`](#separator).\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\n\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\n\n``` javascript\n{\n  validate: function(input) {\n\n    // Declare function as asynchronous, and save the done callback\n    var done = this.async();\n\n    // Do async stuff\n    setTimeout(function() {\n      if (typeof input !== \"number\") {\n        // Pass the return value in the done callback\n        done(\"You need to provide a number\");\n        return;\n      }\n      // Pass the return value in the done callback\n      done(true);\n    }, 3000);\n  }\n}\n```\n\n### Answers\nA key/value hash containing the client answers in each prompt.\n\n+ **Key** The `name` property of the _question_ object\n+ **Value** (Depends on the prompt)\n  + `confirm`: (Boolean)\n  + `input` : User input (filtered if `filter` is defined) (String)\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\n\n### Separator\nA separator can be added to any `choices` array:\n\n```\n// In the question object\nchoices: [ \"Choice A\", new inquirer.Separator(), \"choice B\" ]\n\n// Which'll be displayed this way\n[?] What do you want to do?\n > Order a pizza\n   Make a reservation\n   --------\n   Ask opening hours\n   Talk to the receptionnist\n```\n\nThe constructor takes a facultative `String` value that'll be use as the separator. If omitted, the separator will be `--------`.\n\nPrompts type\n---------------------\n\n_allowed options written inside square brackets (`[]`) are optional. Others are required._\n\n### List - `{ type: \"list\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must be the choice `index` in the array)\n\n![List prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/list-prompt.png)\n\n### Raw List - `{ type: \"rawlist\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n![Raw list prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/rawlist-prompt.png)\n\n### Expand - `{ type: \"expand\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must be the choice `index` in the array)\n\nNote that the `choice` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\n\nSee `examples/expand.js` for a running example.\n\n![Expand prompt closed](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-1.png)\n![Expand prompt expanded](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-2.png)\n\n\n### Checkbox - `{ type: \"checkbox\" }`\n\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`] properties.\n\nChoices marked as `{ checked: true }` will be checked by default.\n\n![Checkbox prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/checkbox-prompt.png)\n\n### Confirm - `{ type: \"confirm\" }`\n\nTake `type`, `name`, `message`[, `default`] properties. `default` is expected to be a boolean if used.\n\n![Confirm prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/confirm-prompt.png)\n\n### Input - `{ type: \"input\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Input prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/input-prompt.png)\n\n### Password - `{ type: \"password\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Password prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/password-prompt.png)\n\n\n\nSupport (OS - terminals)\n=====================\n\nYou should expect mostly good support for the CLI below. This does not mean we won't\nlook at issues found on other command line - feel free to report any!\n\n- **Mac OS**:\n  - Terminal.app\n  - iTerm\n- **Windows**:\n  - cmd.exe\n  - Powershell\n  - Cygwin\n- **Ubuntu**:\n  - Terminal\n\n\nNews on the march (Release notes)\n=====================\n\nPlease refer to the [Github releases section for the changelog](https://github.com/SBoudrias/Inquirer.js/releases)\n\n\nContributing\n=====================\n\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\nor bug fix. `npm test` to run the test suite.  \n**Documentation**: Add documentation for every API change. Feel free to send corrections\nor better docs!  \n**Pull Requests**: Send _fixes_ PR on the `master` branch. Any new features should be send on the `wip`branch.\n\nWe're looking to offer good support for multiple prompts and environments. If you want to\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\nget feedback before release. Let us know if you want to be added to the list (just tweet\nto @vaxilart) or just add your name to [the wiki](https://github.com/SBoudrias/Inquirer.js/wiki/Testers)\n\nLicense\n=====================\n\nCopyright (c) 2012 Simon Boudrias (twitter: @vaxilart)  \nLicensed under the MIT license.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/SBoudrias/Inquirer.js/issues"},"_id":"inquirer@0.3.3","dist":{"shasum":"476dfc4b32c24010f4fdf5479dc59368264f2896","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.3.3.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.3.4":{"name":"inquirer","version":"0.3.4","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\r\n=====================\r\n\r\nA collection of common interactive command line user interfaces.\r\n\r\n\r\nGoal and philosophy\r\n---------------------\r\n\r\nWe strive at providing easily embeddable and beautiful command line interface for Node.js ;\r\nsome hope in becoming the CLI Xanadu.\r\n\r\n_Inquirer_ should ease the process of asking end user **questions**, **parsing**, **validating** answers, managing **hierarchical prompts** and providing **error feedback**.\r\n\r\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\r\n\r\n\r\nDocumentation\r\n=====================\r\n\r\n\r\nInstallation\r\n---------------------\r\n\r\n``` prompt\r\nnpm install inquirer\r\n```\r\n\r\n```javascript\r\nvar inquirer = require(\"inquirer\");\r\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\r\n\t// Use user feedback for... whatever!!\r\n});\r\n```\r\n\r\n\r\nExamples (Run it and see it)\r\n---------------------\r\n\r\nCheckout the `examples/` folder for code and interface examples.\r\n\r\n``` prompt\r\nnode examples/pizza.js\r\n# etc\r\n```\r\n\r\n\r\nMethods\r\n---------------------\r\n\r\n### `inquirer.prompt( questions, callback )`\r\n\r\nLaunch the prompt interface (inquiry session)\r\n\r\n+ **questions** (Array) containing [Question Object](#question)\r\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\r\n\r\n\r\nObjects\r\n---------------------\r\n\r\n### Question\r\nA question object is a `hash` containing question related values:\r\n\r\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\r\n`list`, `rawlist`\r\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\r\n+ **message**: (String) The question to print.\r\n+ **default**: (String|Function) Default value to use if nothing is entered, or a function that returns the default value. If defined as a function, the first parameter will be the current inquirer session answers. \r\n+ **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.  \r\nArray values can be simple `strings`, or `objects` containing a `name` (to display) and a `value` properties (to save in the answers hash). Values can also be [a `Separator`](#separator).\r\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\r\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\r\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\r\n\r\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\r\n\r\n``` javascript\r\n{\r\n  validate: function(input) {\r\n\r\n    // Declare function as asynchronous, and save the done callback\r\n    var done = this.async();\r\n\r\n    // Do async stuff\r\n    setTimeout(function() {\r\n      if (typeof input !== \"number\") {\r\n        // Pass the return value in the done callback\r\n        done(\"You need to provide a number\");\r\n        return;\r\n      }\r\n      // Pass the return value in the done callback\r\n      done(true);\r\n    }, 3000);\r\n  }\r\n}\r\n```\r\n\r\n### Answers\r\nA key/value hash containing the client answers in each prompt.\r\n\r\n+ **Key** The `name` property of the _question_ object\r\n+ **Value** (Depends on the prompt)\r\n  + `confirm`: (Boolean)\r\n  + `input` : User input (filtered if `filter` is defined) (String)\r\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\r\n\r\n### Separator\r\nA separator can be added to any `choices` array:\r\n\r\n```\r\n// In the question object\r\nchoices: [ \"Choice A\", new inquirer.Separator(), \"choice B\" ]\r\n\r\n// Which'll be displayed this way\r\n[?] What do you want to do?\r\n > Order a pizza\r\n   Make a reservation\r\n   --------\r\n   Ask opening hours\r\n   Talk to the receptionnist\r\n```\r\n\r\nThe constructor takes a facultative `String` value that'll be use as the separator. If omitted, the separator will be `--------`.\r\n\r\nPrompts type\r\n---------------------\r\n\r\n_allowed options written inside square brackets (`[]`) are optional. Others are required._\r\n\r\n### List - `{ type: \"list\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must be the choice `index` in the array)\r\n\r\n![List prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/list-prompt.png)\r\n\r\n### Raw List - `{ type: \"rawlist\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must the choice `index` in the array)\r\n\r\n![Raw list prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/rawlist-prompt.png)\r\n\r\n### Expand - `{ type: \"expand\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must be the choice `index` in the array)\r\n\r\nNote that the `choice` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\r\n\r\nSee `examples/expand.js` for a running example.\r\n\r\n![Expand prompt closed](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-1.png)\r\n![Expand prompt expanded](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-2.png)\r\n\r\n\r\n### Checkbox - `{ type: \"checkbox\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`] properties.\r\n\r\nChoices marked as `{ checked: true }` will be checked by default.\r\n\r\n![Checkbox prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/checkbox-prompt.png)\r\n\r\n### Confirm - `{ type: \"confirm\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`] properties. `default` is expected to be a boolean if used.\r\n\r\n![Confirm prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/confirm-prompt.png)\r\n\r\n### Input - `{ type: \"input\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n![Input prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/input-prompt.png)\r\n\r\n### Password - `{ type: \"password\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n![Password prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/password-prompt.png)\r\n\r\n\r\n\r\nSupport (OS - terminals)\r\n=====================\r\n\r\nYou should expect mostly good support for the CLI below. This does not mean we won't\r\nlook at issues found on other command line - feel free to report any!\r\n\r\n- **Mac OS**:\r\n  - Terminal.app\r\n  - iTerm\r\n- **Windows**:\r\n  - cmd.exe\r\n  - Powershell\r\n  - Cygwin\r\n- **Ubuntu**:\r\n  - Terminal\r\n\r\n\r\nNews on the march (Release notes)\r\n=====================\r\n\r\nPlease refer to the [Github releases section for the changelog](https://github.com/SBoudrias/Inquirer.js/releases)\r\n\r\n\r\nContributing\r\n=====================\r\n\r\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \r\n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\r\nor bug fix. `npm test` to run the test suite.  \r\n**Documentation**: Add documentation for every API change. Feel free to send corrections\r\nor better docs!  \r\n**Pull Requests**: Send _fixes_ PR on the `master` branch. Any new features should be send on the `wip`branch.\r\n\r\nWe're looking to offer good support for multiple prompts and environments. If you want to\r\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\r\nget feedback before release. Let us know if you want to be added to the list (just tweet\r\nto @vaxilart) or just add your name to [the wiki](https://github.com/SBoudrias/Inquirer.js/wiki/Testers)\r\n\r\nLicense\r\n=====================\r\n\r\nCopyright (c) 2012 Simon Boudrias (twitter: @vaxilart)  \r\nLicensed under the MIT license.\r\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/SBoudrias/Inquirer.js/issues"},"_id":"inquirer@0.3.4","dist":{"shasum":"af4673b3e1cb746b74d5dafe14ef55c3c1bf7222","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.3.4.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.3.5":{"name":"inquirer","version":"0.3.5","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~1.2.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.3"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","grunt-simple-mocha":"~0.4.0","mocha":"~1.9.0","chai":"~1.6.0","grunt-contrib-jshint":"~0.5.1","sinon":"~1.7.2","proxyquire":"~0.4.1","grunt-release":"~0.3.3"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\n=====================\n\nA collection of common interactive command line user interfaces.\n\n\nGoal and philosophy\n---------------------\n\nWe strive at providing easily embeddable and beautiful command line interface for Node.js ;\nsome hope in becoming the CLI Xanadu.\n\n_Inquirer_ should ease the process of asking end user **questions**, **parsing**, **validating** answers, managing **hierarchical prompts** and providing **error feedback**.\n\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\n\n\nDocumentation\n=====================\n\n\nInstallation\n---------------------\n\n``` prompt\nnpm install inquirer\n```\n\n```javascript\nvar inquirer = require(\"inquirer\");\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\n\t// Use user feedback for... whatever!!\n});\n```\n\n\nExamples (Run it and see it)\n---------------------\n\nCheckout the `examples/` folder for code and interface examples.\n\n``` prompt\nnode examples/pizza.js\n# etc\n```\n\n\nMethods\n---------------------\n\n### `inquirer.prompt( questions, callback )`\n\nLaunch the prompt interface (inquiry session)\n\n+ **questions** (Array) containing [Question Object](#question)\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\n\n\nObjects\n---------------------\n\n### Question\nA question object is a `hash` containing question related values:\n\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\n`list`, `rawlist`\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\n+ **message**: (String) The question to print.\n+ **default**: (String|Function) Default value to use if nothing is entered, or a function that returns the default value. If defined as a function, the first parameter will be the current inquirer session answers. \n+ **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.  \nArray values can be simple `strings`, or `objects` containing a `name` (to display) and a `value` properties (to save in the answers hash). Values can also be [a `Separator`](#separator).\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\n\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\n\n``` javascript\n{\n  validate: function(input) {\n\n    // Declare function as asynchronous, and save the done callback\n    var done = this.async();\n\n    // Do async stuff\n    setTimeout(function() {\n      if (typeof input !== \"number\") {\n        // Pass the return value in the done callback\n        done(\"You need to provide a number\");\n        return;\n      }\n      // Pass the return value in the done callback\n      done(true);\n    }, 3000);\n  }\n}\n```\n\n### Answers\nA key/value hash containing the client answers in each prompt.\n\n+ **Key** The `name` property of the _question_ object\n+ **Value** (Depends on the prompt)\n  + `confirm`: (Boolean)\n  + `input` : User input (filtered if `filter` is defined) (String)\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\n\n### Separator\nA separator can be added to any `choices` array:\n\n```\n// In the question object\nchoices: [ \"Choice A\", new inquirer.Separator(), \"choice B\" ]\n\n// Which'll be displayed this way\n[?] What do you want to do?\n > Order a pizza\n   Make a reservation\n   --------\n   Ask opening hours\n   Talk to the receptionnist\n```\n\nThe constructor takes a facultative `String` value that'll be use as the separator. If omitted, the separator will be `--------`.\n\nPrompts type\n---------------------\n\n_allowed options written inside square brackets (`[]`) are optional. Others are required._\n\n### List - `{ type: \"list\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must be the choice `index` in the array)\n\n![List prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/list-prompt.png)\n\n### Raw List - `{ type: \"rawlist\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n![Raw list prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/rawlist-prompt.png)\n\n### Expand - `{ type: \"expand\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must be the choice `index` in the array)\n\nNote that the `choice` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\n\nSee `examples/expand.js` for a running example.\n\n![Expand prompt closed](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-1.png)\n![Expand prompt expanded](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-2.png)\n\n\n### Checkbox - `{ type: \"checkbox\" }`\n\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`] properties.\n\nChoices marked as `{ checked: true }` will be checked by default.\n\n![Checkbox prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/checkbox-prompt.png)\n\n### Confirm - `{ type: \"confirm\" }`\n\nTake `type`, `name`, `message`[, `default`] properties. `default` is expected to be a boolean if used.\n\n![Confirm prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/confirm-prompt.png)\n\n### Input - `{ type: \"input\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Input prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/input-prompt.png)\n\n### Password - `{ type: \"password\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Password prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/password-prompt.png)\n\n\n\nSupport (OS - terminals)\n=====================\n\nYou should expect mostly good support for the CLI below. This does not mean we won't\nlook at issues found on other command line - feel free to report any!\n\n- **Mac OS**:\n  - Terminal.app\n  - iTerm\n- **Windows**:\n  - cmd.exe\n  - Powershell\n  - Cygwin\n- **Ubuntu**:\n  - Terminal\n\n\nNews on the march (Release notes)\n=====================\n\nPlease refer to the [Github releases section for the changelog](https://github.com/SBoudrias/Inquirer.js/releases)\n\n\nContributing\n=====================\n\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\nor bug fix. `npm test` to run the test suite.  \n**Documentation**: Add documentation for every API change. Feel free to send corrections\nor better docs!  \n**Pull Requests**: Send _fixes_ PR on the `master` branch. Any new features should be send on the `wip`branch.\n\nWe're looking to offer good support for multiple prompts and environments. If you want to\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\nget feedback before release. Let us know if you want to be added to the list (just tweet\nto @vaxilart) or just add your name to [the wiki](https://github.com/SBoudrias/Inquirer.js/wiki/Testers)\n\nLicense\n=====================\n\nCopyright (c) 2012 Simon Boudrias (twitter: @vaxilart)  \nLicensed under the MIT license.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/SBoudrias/Inquirer.js/issues"},"_id":"inquirer@0.3.5","dist":{"shasum":"a78be064ac9abf168147c02169a931d9a483a9f6","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.3.5.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}},"0.4.0":{"name":"inquirer","version":"0.4.0","description":"A collection of common interactive command line user interfaces.","main":"lib/inquirer.js","scripts":{"test":"grunt --verbose"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"keywords":["command","prompt","stdin","cli"],"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"license":"MIT","dependencies":{"lodash":"~2.4.1","async":"~0.2.8","cli-color":"~0.2.2","mute-stream":"0.0.4","through":"~2.3.4"},"devDependencies":{"grunt":"~0.4.1","grunt-cli":"~0.1.8","mocha":"~1.15.1","chai":"~1.8.1","grunt-contrib-jshint":"~0.7.2","sinon":"~1.7.2","grunt-release":"~0.6.0","mockery":"~1.4.0","grunt-mocha-test":"~0.8.1","cmdify":"0.0.4"},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\n=====================\n\nA collection of common interactive command line user interfaces.\n\n\nGoal and philosophy\n---------------------\n\nWe strive at providing easily embeddable and beautiful command line interface for Node.js ;\nsome hope in becoming the CLI Xanadu.\n\n_Inquirer_ should ease the process of asking end user **questions**, **parsing**, **validating** answers, managing **hierarchical prompts** and providing **error feedback**.\n\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\n\n\nDocumentation\n=====================\n\n\nInstallation\n---------------------\n\n``` prompt\nnpm install inquirer\n```\n\n```javascript\nvar inquirer = require(\"inquirer\");\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\n\t// Use user feedback for... whatever!!\n});\n```\n\n\nExamples (Run it and see it)\n---------------------\n\nCheckout the `examples/` folder for code and interface examples.\n\n``` prompt\nnode examples/pizza.js\n# etc\n```\n\n\nMethods\n---------------------\n\n### `inquirer.prompt( questions, callback )`\n\nLaunch the prompt interface (inquiry session)\n\n+ **questions** (Array) containing [Question Object](#question)\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\n\n\nObjects\n---------------------\n\n### Question\nA question object is a `hash` containing question related values:\n\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\n`list`, `rawlist`\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\n+ **message**: (String) The question to print.\n+ **default**: (String|Number|Array|Function) Default value(s) to use if nothing is entered, or a function that returns the default value(s). If defined as a function, the first parameter will be the current inquirer session answers.\n+ **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.  \nArray values can be simple `strings`, or `objects` containing a `name` (to display) and a `value` properties (to save in the answers hash). Values can also be [a `Separator`](#separator).\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on whether or not this question should be asked.\n\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\n\n``` javascript\n{\n  validate: function(input) {\n\n    // Declare function as asynchronous, and save the done callback\n    var done = this.async();\n\n    // Do async stuff\n    setTimeout(function() {\n      if (typeof input !== \"number\") {\n        // Pass the return value in the done callback\n        done(\"You need to provide a number\");\n        return;\n      }\n      // Pass the return value in the done callback\n      done(true);\n    }, 3000);\n  }\n}\n```\n\n### Answers\nA key/value hash containing the client answers in each prompt.\n\n+ **Key** The `name` property of the _question_ object\n+ **Value** (Depends on the prompt)\n  + `confirm`: (Boolean)\n  + `input` : User input (filtered if `filter` is defined) (String)\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\n\n### Separator\nA separator can be added to any `choices` array:\n\n```\n// In the question object\nchoices: [ \"Choice A\", new inquirer.Separator(), \"choice B\" ]\n\n// Which'll be displayed this way\n[?] What do you want to do?\n > Order a pizza\n   Make a reservation\n   --------\n   Ask opening hours\n   Talk to the receptionnist\n```\n\nThe constructor takes a facultative `String` value that'll be use as the separator. If omitted, the separator will be `--------`.\n\nSeparator instances have a property `type` equal to `separator`. This should allow tools façading Inquirer interface from detecting separator types in lists.\n\nPrompts type\n---------------------\n\n_allowed options written inside square brackets (`[]`) are optional. Others are required._\n\n### List - `{ type: \"list\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must be the choice `index` in the array or a choice `value`)\n\n![List prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/list-prompt.png)\n\n### Raw List - `{ type: \"rawlist\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n![Raw list prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/rawlist-prompt.png)\n\n### Expand - `{ type: \"expand\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must be the choice `index` in the array)\n\nNote that the `choice` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\n\nSee `examples/expand.js` for a running example.\n\n![Expand prompt closed](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-1.png)\n![Expand prompt expanded](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-2.png)\n\n\n### Checkbox - `{ type: \"checkbox\" }`\n\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`, `default`] properties. `default` is expected to be an Array of the checked choices value.\n\nChoices marked as `{ checked: true }` will be checked by default.\n\n![Checkbox prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/checkbox-prompt.png)\n\n### Confirm - `{ type: \"confirm\" }`\n\nTake `type`, `name`, `message`[, `default`] properties. `default` is expected to be a boolean if used.\n\n![Confirm prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/confirm-prompt.png)\n\n### Input - `{ type: \"input\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Input prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/input-prompt.png)\n\n### Password - `{ type: \"password\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Password prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/password-prompt.png)\n\nUser Interfaces and layouts\n---------------------\n\nAlong with the prompts, Inquirer offers some basic text UI.\n\n### Bottom Bar - `inquirer.ui.BottomBar`\n\nThis UI present a fixed text at the bottom of a free text zone. This is useful to keep a message to the bottom of the screen while outputting command outputs on the higher section.\n\n```\nvar ui = new inquirer.ui.BottomBar();\n\n// pipe a Stream to the log zone\noutputStream.pipe( ui.log );\n\n// Or simply write output\nui.log.write(\"something just happened.\");\nui.log.write(\"Almost over, standby!\");\n\n// During processing, update the bottom bar content to display a loader\n// or output a progress bar, etc\nui.updateBottomBar(\"new bottom bar content\");\n```\n\n### Prompt - `inquirer.ui.Prompt`\n\nThis is UI layout used to run prompt. This layout is returned by `inquirer.prompt` and you should probably always use `inquirer.prompt` to interface with this UI.\n\n\nSupport (OS - terminals)\n=====================\n\nYou should expect mostly good support for the CLI below. This does not mean we won't\nlook at issues found on other command line - feel free to report any!\n\n- **Mac OS**:\n  - Terminal.app\n  - iTerm\n- **Windows**:\n  - cmd.exe\n  - Powershell\n  - Cygwin\n- **Ubuntu**:\n  - Terminal\n\n\nNews on the march (Release notes)\n=====================\n\nPlease refer to the [Github releases section for the changelog](https://github.com/SBoudrias/Inquirer.js/releases)\n\n\nContributing\n=====================\n\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\nor bug fix. `npm test` to run the test suite.  \n**Documentation**: Add documentation for every API change. Feel free to send corrections\nor better docs!  \n**Pull Requests**: Send _fixes_ PR on the `master` branch. Any new features should be send on the `wip`branch.\n\nWe're looking to offer good support for multiple prompts and environments. If you want to\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\nget feedback before release. Let us know if you want to be added to the list (just tweet\nto @vaxilart) or just add your name to [the wiki](https://github.com/SBoudrias/Inquirer.js/wiki/Testers)\n\nLicense\n=====================\n\nCopyright (c) 2012 Simon Boudrias (twitter: @vaxilart)  \nLicensed under the MIT license.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/SBoudrias/Inquirer.js/issues"},"homepage":"https://github.com/SBoudrias/Inquirer.js","_id":"inquirer@0.4.0","dist":{"shasum":"62782d60c8a71d6328d8b4e9a5a71933cfda8f33","tarball":"http://registry.npmjs.org/inquirer/-/inquirer-0.4.0.tgz"},"_from":".","_npmVersion":"1.3.21","_npmUser":{"name":"sboudrias","email":"admin@simonboudrias.com"},"maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"directories":{}}},"readme":"Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\n=====================\n\nA collection of common interactive command line user interfaces.\n\n\nGoal and philosophy\n---------------------\n\nWe strive at providing easily embeddable and beautiful command line interface for Node.js ;\nsome hope in becoming the CLI Xanadu.\n\n_Inquirer_ should ease the process of asking end user **questions**, **parsing**, **validating** answers, managing **hierarchical prompts** and providing **error feedback**.\n\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\n\n\nDocumentation\n=====================\n\n\nInstallation\n---------------------\n\n``` prompt\nnpm install inquirer\n```\n\n```javascript\nvar inquirer = require(\"inquirer\");\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\n\t// Use user feedback for... whatever!!\n});\n```\n\n\nExamples (Run it and see it)\n---------------------\n\nCheckout the `examples/` folder for code and interface examples.\n\n``` prompt\nnode examples/pizza.js\n# etc\n```\n\n\nMethods\n---------------------\n\n### `inquirer.prompt( questions, callback )`\n\nLaunch the prompt interface (inquiry session)\n\n+ **questions** (Array) containing [Question Object](#question)\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\n\n\nObjects\n---------------------\n\n### Question\nA question object is a `hash` containing question related values:\n\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\n`list`, `rawlist`\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\n+ **message**: (String) The question to print.\n+ **default**: (String|Number|Array|Function) Default value(s) to use if nothing is entered, or a function that returns the default value(s). If defined as a function, the first parameter will be the current inquirer session answers.\n+ **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.  \nArray values can be simple `strings`, or `objects` containing a `name` (to display) and a `value` properties (to save in the answers hash). Values can also be [a `Separator`](#separator).\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on whether or not this question should be asked.\n\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\n\n``` javascript\n{\n  validate: function(input) {\n\n    // Declare function as asynchronous, and save the done callback\n    var done = this.async();\n\n    // Do async stuff\n    setTimeout(function() {\n      if (typeof input !== \"number\") {\n        // Pass the return value in the done callback\n        done(\"You need to provide a number\");\n        return;\n      }\n      // Pass the return value in the done callback\n      done(true);\n    }, 3000);\n  }\n}\n```\n\n### Answers\nA key/value hash containing the client answers in each prompt.\n\n+ **Key** The `name` property of the _question_ object\n+ **Value** (Depends on the prompt)\n  + `confirm`: (Boolean)\n  + `input` : User input (filtered if `filter` is defined) (String)\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\n\n### Separator\nA separator can be added to any `choices` array:\n\n```\n// In the question object\nchoices: [ \"Choice A\", new inquirer.Separator(), \"choice B\" ]\n\n// Which'll be displayed this way\n[?] What do you want to do?\n > Order a pizza\n   Make a reservation\n   --------\n   Ask opening hours\n   Talk to the receptionnist\n```\n\nThe constructor takes a facultative `String` value that'll be use as the separator. If omitted, the separator will be `--------`.\n\nSeparator instances have a property `type` equal to `separator`. This should allow tools façading Inquirer interface from detecting separator types in lists.\n\nPrompts type\n---------------------\n\n_allowed options written inside square brackets (`[]`) are optional. Others are required._\n\n### List - `{ type: \"list\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must be the choice `index` in the array or a choice `value`)\n\n![List prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/list-prompt.png)\n\n### Raw List - `{ type: \"rawlist\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must the choice `index` in the array)\n\n![Raw list prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/rawlist-prompt.png)\n\n### Expand - `{ type: \"expand\" }`\n\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\ndefault must be the choice `index` in the array)\n\nNote that the `choice` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\n\nSee `examples/expand.js` for a running example.\n\n![Expand prompt closed](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-1.png)\n![Expand prompt expanded](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-2.png)\n\n\n### Checkbox - `{ type: \"checkbox\" }`\n\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`, `default`] properties. `default` is expected to be an Array of the checked choices value.\n\nChoices marked as `{ checked: true }` will be checked by default.\n\n![Checkbox prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/checkbox-prompt.png)\n\n### Confirm - `{ type: \"confirm\" }`\n\nTake `type`, `name`, `message`[, `default`] properties. `default` is expected to be a boolean if used.\n\n![Confirm prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/confirm-prompt.png)\n\n### Input - `{ type: \"input\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Input prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/input-prompt.png)\n\n### Password - `{ type: \"password\" }`\n\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\n\n![Password prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/password-prompt.png)\n\nUser Interfaces and layouts\n---------------------\n\nAlong with the prompts, Inquirer offers some basic text UI.\n\n### Bottom Bar - `inquirer.ui.BottomBar`\n\nThis UI present a fixed text at the bottom of a free text zone. This is useful to keep a message to the bottom of the screen while outputting command outputs on the higher section.\n\n```\nvar ui = new inquirer.ui.BottomBar();\n\n// pipe a Stream to the log zone\noutputStream.pipe( ui.log );\n\n// Or simply write output\nui.log.write(\"something just happened.\");\nui.log.write(\"Almost over, standby!\");\n\n// During processing, update the bottom bar content to display a loader\n// or output a progress bar, etc\nui.updateBottomBar(\"new bottom bar content\");\n```\n\n### Prompt - `inquirer.ui.Prompt`\n\nThis is UI layout used to run prompt. This layout is returned by `inquirer.prompt` and you should probably always use `inquirer.prompt` to interface with this UI.\n\n\nSupport (OS - terminals)\n=====================\n\nYou should expect mostly good support for the CLI below. This does not mean we won't\nlook at issues found on other command line - feel free to report any!\n\n- **Mac OS**:\n  - Terminal.app\n  - iTerm\n- **Windows**:\n  - cmd.exe\n  - Powershell\n  - Cygwin\n- **Ubuntu**:\n  - Terminal\n\n\nNews on the march (Release notes)\n=====================\n\nPlease refer to the [Github releases section for the changelog](https://github.com/SBoudrias/Inquirer.js/releases)\n\n\nContributing\n=====================\n\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\nor bug fix. `npm test` to run the test suite.  \n**Documentation**: Add documentation for every API change. Feel free to send corrections\nor better docs!  \n**Pull Requests**: Send _fixes_ PR on the `master` branch. Any new features should be send on the `wip`branch.\n\nWe're looking to offer good support for multiple prompts and environments. If you want to\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\nget feedback before release. Let us know if you want to be added to the list (just tweet\nto @vaxilart) or just add your name to [the wiki](https://github.com/SBoudrias/Inquirer.js/wiki/Testers)\n\nLicense\n=====================\n\nCopyright (c) 2012 Simon Boudrias (twitter: @vaxilart)  \nLicensed under the MIT license.\n","maintainers":[{"name":"sboudrias","email":"admin@simonboudrias.com"}],"time":{"0.1.0":"2013-05-19T20:15:51.887Z","0.1.1":"2013-05-21T23:54:07.172Z","0.1.2":"2013-05-24T03:32:57.876Z","0.1.3":"2013-05-30T00:50:36.211Z","0.1.4":"2013-05-31T01:47:13.490Z","0.1.5":"2013-06-09T00:47:48.823Z","0.1.6":"2013-06-13T02:50:32.720Z","0.1.7":"2013-06-14T01:23:11.428Z","0.1.8":"2013-06-14T15:25:48.568Z","0.1.9":"2013-06-15T18:17:43.902Z","0.2.0":"2013-07-02T01:26:04.663Z","0.2.1":"2013-07-06T03:05:36.388Z","0.1.11":"2013-07-06T03:22:37.366Z","0.1.12":"2013-07-06T03:30:37.610Z","0.2.2":"2013-07-13T19:36:24.675Z","0.2.3":"2013-07-28T18:18:26.184Z","0.2.4":"2013-08-09T15:32:37.755Z","0.2.5":"2013-08-21T19:50:14.778Z","0.3.0":"2013-08-27T01:58:21.572Z","0.3.1":"2013-08-27T17:34:32.428Z","0.3.2":"2013-09-03T16:45:01.615Z","0.3.3":"2013-09-08T20:23:15.222Z","0.3.4":"2013-09-26T15:09:03.164Z","0.3.5":"2013-11-03T20:33:38.301Z","0.4.0":"2013-12-31T06:50:20.469Z"},"author":{"name":"Simon Boudrias","email":"admin@simonboudrias.com"},"repository":{"type":"git","url":"git://github.com/SBoudrias/Inquirer.js.git"},"users":{"cybo42":true,"kael":true,"irae":true},"_attachments":{"inquirer-0.3.6.tgz":{"content_type":"application/octet-stream","revpos":52,"digest":"md5-BHST1LN+RsYn0jV0XmmB/w==","length":26706,"stub":true},"inquirer-0.3.5.tgz":{"content_type":"application/octet-stream","revpos":50,"digest":"md5-+a5KmaoV+KuSgEBNZL+POQ==","length":26692,"stub":true},"inquirer-0.3.4.tgz":{"content_type":"application/octet-stream","revpos":47,"digest":"md5-LzbhpGHY37e3oQSPs31sRw==","length":28608,"stub":true},"inquirer-0.3.3.tgz":{"content_type":"application/octet-stream","revpos":45,"digest":"md5-8+JgrIDx8ddFg3JvmvkXeg==","length":23999,"stub":true},"inquirer-0.3.2.tgz":{"content_type":"application/octet-stream","revpos":43,"digest":"md5-ZZ+/4lRJ/p4MLwrQTWNpdw==","length":22444,"stub":true},"inquirer-0.3.1.tgz":{"content_type":"application/octet-stream","revpos":41,"digest":"md5-WTnUqjItUU6BjkyNBgUSZQ==","length":27577,"stub":true},"inquirer-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":39,"digest":"md5-Az7jsbD3rO//AjZByxCfVw==","length":24377,"stub":true},"inquirer-0.2.5.tgz":{"content_type":"application/octet-stream","revpos":37,"digest":"md5-6pYQY2Rb5K4JsQrxEc4Lqg==","length":23650,"stub":true},"inquirer-0.2.4.tgz":{"content_type":"application/octet-stream","revpos":35,"digest":"md5-vUokyPymeCClHcjJ2N2N7g==","length":23275,"stub":true},"inquirer-0.2.3.tgz":{"content_type":"application/octet-stream","revpos":33,"digest":"md5-xiIwQw30f2dzwatMx7NwUQ==","length":37202,"stub":true},"inquirer-0.2.2.tgz":{"content_type":"application/octet-stream","revpos":30,"digest":"md5-K/vFVP9Z/uiMiSeW23tYgA==","length":37178,"stub":true},"inquirer-0.1.12.tgz":{"content_type":"application/octet-stream","revpos":28,"digest":"md5-/RtL1fqyAGkvkuARoBg9Mw==","length":15911,"stub":true},"inquirer-0.1.11.tgz":{"content_type":"application/octet-stream","revpos":26,"digest":"md5-8XvnjsfUaB/PfsNeHr/uCw==","length":15850,"stub":true},"inquirer-0.2.1.tgz":{"content_type":"application/octet-stream","revpos":24,"digest":"md5-6mHnjAmcSxdWLNhlLZ4tsQ==","length":20061,"stub":true},"inquirer-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":22,"digest":"md5-itzjk21dGUYkxqmfa6nYpA==","length":19922,"stub":true},"inquirer-0.1.9.tgz":{"content_type":"application/octet-stream","revpos":21,"digest":"md5-JPTPXRX6TTH9nGrK4m9dOQ==","length":19270,"stub":true},"inquirer-0.1.8.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-/sVhfzWH6QW1pNfUiag1rQ==","length":17663,"stub":true},"inquirer-0.1.7.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-/OJBbqX9wBm39xmfj7OaFg==","length":18935,"stub":true},"inquirer-0.1.6.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-8LNd7Qe0xwfg3DwqmQbhuQ==","length":17780,"stub":true},"inquirer-0.1.5.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-H94j+m2KqeiIYK50qHugDw==","length":16522,"stub":true},"inquirer-0.1.4.tgz":{"content_type":"application/octet-stream","revpos":11,"digest":"md5-FF/mS6bxqLG0jZM48x0SFw==","length":14566,"stub":true},"inquirer-0.1.3.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-YY6s1sdrAJNtGRCzVogAVg==","length":14688,"stub":true},"inquirer-0.1.2.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-ekCKs4YjZFGs677K+HTxAw==","length":14444,"stub":true},"inquirer-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-tDLmwQNhM53GkRsDNPg1OA==","length":14506,"stub":true},"inquirer-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-2koTZ6Fp5RamJ3JH0kC7dw==","length":14497,"stub":true},"inquirer-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":54,"digest":"md5-FjRIn6RC3pbyT/BA9tfK9A==","length":15593,"stub":true}},"_etag":"\"AQW091ZLKGO88PP6IJN6J13E1\""}