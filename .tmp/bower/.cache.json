{"_id":"bower","_rev":"186-95fee3e80c67c39b1ce6717a155dc4f1","name":"bower","description":"The browser package manager.","dist-tags":{"latest":"1.2.8"},"versions":{"0.1.0":{"name":"bower","description":"The browser package manager.","version":"0.1.0","author":{"name":"some twitter nerds"},"licenses":[{"type":"MIT","url":"http://opensource.org/licenses/MIT"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">= 0.8.0"},"dependencies":{"tmp":"latest","vows":"latest","glob":"latest","nopt":"latest","archy":"latest","async":"latest","colors":"latest","rimraf":"latest","mkdirp":"latest","semver":"latest","request":"latest","fstream":"latest","hogan.js":"latest","underscore":"latest","read-package-json":"latest"},"devDependencies":{"mocha":"latest"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, URL or local path.\n\nTo update a package, you need to reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\"\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by bower. If you have several files you're distributing as a part of your package, alternatively pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"]\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local sub directory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume bower components.\n\nIf you pass the option `--map` to bower's `list` command it will generate a json with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc).\n\nBower then makes available a simple programatic api which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo or Ender? What does it do better?**\n\nBower is a lower level component then Jam, Volo, or Ender. These managers could consume bower as a dependency.\n\nBower's aim is simply to install git paths, resolve dependencies from a component.json, check versions, and then provide an api which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management. \n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender) try to tackle this problem in such a way that they actually end up alienating and further segregating the javascript community around transports (sprockets, commonjs, requirejs, regular script tags).\n\nBower is trying to solve the problem of package management in a more generic, unopionated way. It get's away with this by exposing an api which can then be consumed by a more opinionated build stack.\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a git powered package manager) in theory should be capable of consuming most every package that volo does, with the aditional benifit of supporting internal networks and other git repositories not hosted on github.\n\n**We recently saw what happened when the NPM registry completely went down. Is a central point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as bower just installs git urls. It's up to the url provider to establish redundancy.\n\n**Isn't having a package.json file going to conflict with my npm's package.json? Will this be a problem?**\n\nDon't use a package.json – user component.json.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating it's frontend architecture onto bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n","_id":"bower@0.1.0","dist":{"shasum":"ced4fa98f3f4074f297c3130dd052f4ddf4f6876","tarball":"http://registry.npmjs.org/bower/-/bower-0.1.0.tgz"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"}],"directories":{}},"0.1.2":{"name":"bower","description":"The browser package manager.","version":"0.1.2","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">= 0.8.0"},"dependencies":{"tmp":"latest","vows":"latest","glob":"latest","nopt":"latest","archy":"latest","async":"latest","colors":"latest","rimraf":"latest","mkdirp":"latest","semver":"latest","request":"latest","fstream":"latest","hogan.js":"latest","lodash":"latest","read-package-json":"latest"},"scripts":{"test":"mocha -R spec -t 10000"},"devDependencies":{"mocha":"latest"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, URL or local path.\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","_id":"bower@0.1.2","dist":{"shasum":"b831789c113db329b791e0f24bed4ae747d785a8","tarball":"http://registry.npmjs.org/bower/-/bower-0.1.2.tgz"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"}],"directories":{}},"0.1.3":{"name":"bower","description":"The browser package manager.","version":"0.1.3","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">= 0.8.0"},"dependencies":{"tmp":"latest","vows":"latest","glob":"latest","nopt":"latest","archy":"latest","async":"latest","colors":"latest","rimraf":"latest","mkdirp":"latest","semver":"latest","request":"latest","fstream":"latest","hogan.js":"latest","lodash":"latest","read-package-json":"latest"},"scripts":{"test":"mocha -R spec -t 10000"},"devDependencies":{"mocha":"latest"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, URL or local path.\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","_id":"bower@0.1.3","dist":{"shasum":"720d188397b67753503009c594fbe6c2719a9e72","tarball":"http://registry.npmjs.org/bower/-/bower-0.1.3.tgz"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"}],"directories":{}},"0.2.0":{"name":"bower","description":"The browser package manager.","version":"0.2.0","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">= 0.8.0"},"dependencies":{"tmp":"latest","vows":"latest","glob":"latest","nopt":"latest","archy":"latest","async":"latest","colors":"latest","rimraf":"latest","mkdirp":"latest","semver":"latest","request":"latest","fstream":"latest","hogan.js":"latest","lodash":"latest","read-package-json":"latest"},"scripts":{"test":"mocha -R spec -t 10000"},"devDependencies":{"mocha":"latest","nock":"latest"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, URL or local path.\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","_id":"bower@0.2.0","dist":{"shasum":"ed7f0806da817d1f1f532cf92c921b0f45f87d62","tarball":"http://registry.npmjs.org/bower/-/bower-0.2.0.tgz"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"}],"directories":{}},"0.3.0":{"name":"bower","description":"The browser package manager.","version":"0.3.0","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">= 0.8.0"},"dependencies":{"tmp":"latest","vows":"latest","glob":"latest","nopt":"latest","archy":"latest","async":"latest","colors":"latest","rimraf":"latest","mkdirp":"latest","semver":"latest","request":"latest","fstream":"latest","hogan.js":"latest","lodash":"latest","read-package-json":"latest","stable":"latest","rc":"latest"},"scripts":{"test":"mocha -R spec -t 20000"},"devDependencies":{"mocha":"latest","nock":"latest"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, URL or local path.\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a ~/.bowerrc file with one or all of the following configuration parameters.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n```\n\nAll commands emit three types of events: `data`, `end`, and `error`.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","_id":"bower@0.3.0","dist":{"shasum":"d5497e85fbedd9efeba2d37dcce139a1ec8f988d","tarball":"http://registry.npmjs.org/bower/-/bower-0.3.0.tgz"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"}],"directories":{}},"0.3.1":{"name":"bower","description":"The browser package manager.","version":"0.3.1","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">= 0.8.0"},"dependencies":{"tmp":"latest","vows":"latest","glob":"latest","nopt":"latest","archy":"latest","async":"latest","colors":"latest","rimraf":"latest","mkdirp":"latest","semver":"latest","request":"latest","fstream":"latest","hogan.js":"latest","lodash":"latest","read-package-json":"latest","stable":"latest","rc":"latest"},"scripts":{"test":"mocha -R spec -t 20000"},"devDependencies":{"mocha":"latest","nock":"latest"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, URL or local path.\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/bowerrc) with one or all of the following configuration parameters.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n```\n\nAll commands emit three types of events: `data`, `end`, and `error`.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","_id":"bower@0.3.1","dist":{"shasum":"15fc958e83fc8348f4424890ca5d43cc3a75811d","tarball":"http://registry.npmjs.org/bower/-/bower-0.3.1.tgz"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"}],"directories":{}},"0.3.2":{"name":"bower","description":"The browser package manager.","version":"0.3.2","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.15","vows":"~0.6.4","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.1.22","colors":"~0.6.0-1","rimraf":"~2.0.2","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~0.9.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6"},"scripts":{"test":"mocha -R spec -t 20000"},"devDependencies":{"mocha":"~1.6.0","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, URL or local path.\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n```\n\nAll commands emit three types of events: `data`, `end`, and `error`.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","_id":"bower@0.3.2","dist":{"shasum":"8553116cc03b3bf14e925125eee9b2bf355b67d5","tarball":"http://registry.npmjs.org/bower/-/bower-0.3.2.tgz"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"}],"directories":{}},"0.4.0":{"name":"bower","description":"The browser package manager.","version":"0.4.0","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.15","vows":"~0.6.4","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.1.22","colors":"~0.6.0-1","rimraf":"~2.0.2","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~0.9.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"0.0.4","tar":"~0.1.13"},"scripts":{"test":"mocha -R spec -t 20000"},"devDependencies":{"mocha":"~1.6.0","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install maccman/package-jquery (same as above)\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, Github shorthand, URL or local path.\nIf you install and URL that is a zip or tar file, bower will automatically extract the contents of it.\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n```\n\nAll commands emit three types of events: `data`, `end`, and `error`.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.4.0","dist":{"shasum":"48718e7951a318fe745d0a1d965ff70521096e4d","tarball":"http://registry.npmjs.org/bower/-/bower-0.4.0.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.5.0":{"name":"bower","description":"The browser package manager.","version":"0.5.0","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.15","vows":"~0.6.4","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.1.22","colors":"~0.6.0-1","rimraf":"~2.0.2","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~0.9.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"0.0.4","tar":"~0.1.13"},"scripts":{"test":"mocha -R spec -t 20000"},"devDependencies":{"mocha":"~1.6.0","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install maccman/package-jquery (same as above)\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install and URL that is a zip or tar file, bower will automatically extract the contents of it.\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the (semver)[http://semver.org/] specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n```\n\nAll commands emit three types of events: `data`, `end`, and `error`.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.5.0","dist":{"shasum":"60615ec399b30f17afbc779ceb1d8884120b235e","tarball":"http://registry.npmjs.org/bower/-/bower-0.5.0.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.5.1":{"name":"bower","description":"The browser package manager.","version":"0.5.1","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.15","vows":"~0.6.4","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.1.22","colors":"~0.6.0-1","rimraf":"~2.0.2","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~0.9.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"0.0.4","tar":"~0.1.13"},"scripts":{"test":"mocha -R spec -t 20000"},"devDependencies":{"mocha":"~1.6.0","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install maccman/package-jquery (same as above)\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install and URL that is a zip or tar file, bower will automatically extract the contents of it.\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the (semver)[http://semver.org/] specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n```\n\nAll commands emit three types of events: `data`, `end`, and `error`.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\n### Windows users\n\nA lot of people are experience problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.5.1","dist":{"shasum":"b2a54b26434b15fa4fd3927181cd88abac2da1d7","tarball":"http://registry.npmjs.org/bower/-/bower-0.5.1.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.6.0":{"name":"bower","description":"The browser package manager.","version":"0.6.0","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.15","vows":"~0.6.4","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.1.22","colors":"~0.6.0-1","rimraf":"~2.0.2","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~0.9.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"0.0.4","tar":"~0.1.13"},"scripts":{"postinstall":"node cleanup","test":"mocha -R spec -t 20000"},"devDependencies":{"mocha":"~1.6.0","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install maccman/package-jquery (same as above)\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install and URL that is a zip or tar file, bower will automatically extract the contents of it.\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-project.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the (semver)[http://semver.org/] specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n```\n\nAll commands emit three types of events: `data`, `end`, and `error`.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\n### Windows users\n\nA lot of people are experience problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.6.0","dist":{"shasum":"09a0bbc905e2fec6f009e7687b4986a4aaefc9c8","tarball":"http://registry.npmjs.org/bower/-/bower-0.6.0.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.6.1":{"name":"bower","description":"The browser package manager.","version":"0.6.1","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.16","vows":"~0.6.4","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.1.22","colors":"~0.6.0-1","rimraf":"~2.0.2","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~0.9.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"0.0.4","tar":"~0.1.13"},"scripts":{"postinstall":"node cleanup","test":"mocha -R spec -t 20000"},"devDependencies":{"mocha":"~1.6.0","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install maccman/package-jquery (same as above)\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install and URL that is a zip or tar file, bower will automatically extract the contents of it.\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-package.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the (semver)[http://semver.org/] specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n```\n\nAll commands emit three types of events: `data`, `end`, and `error`.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\n### Windows users\n\nA lot of people are experience problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.6.1","dist":{"shasum":"2be10ecf4f0dfd14688da81e28a151e2c8fa88a4","tarball":"http://registry.npmjs.org/bower/-/bower-0.6.1.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.6.2":{"name":"bower","description":"The browser package manager.","version":"0.6.2","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.16","vows":"~0.6.4","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.1.22","colors":"~0.6.0-1","rimraf":"~2.0.2","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~0.9.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"0.0.4","tar":"~0.1.13"},"scripts":{"postinstall":"node cleanup","test":"mocha -R spec -t 20000"},"devDependencies":{"mocha":"~1.6.0","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install maccman/package-jquery (same as above)\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install and URL that is a zip or tar file, bower will automatically extract the contents of it.\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-package.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the (semver)[http://semver.org/] specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n```\n\nAll commands emit three types of events: `data`, `end`, and `error`.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\n### Windows users\n\nA lot of people are experience problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.6.2","dist":{"shasum":"663fd000d2d73c394531379d173d202ae7e0c7d1","tarball":"http://registry.npmjs.org/bower/-/bower-0.6.2.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.6.3":{"name":"bower","description":"The browser package manager.","version":"0.6.3","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.16","vows":"~0.6.4","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.1.22","colors":"~0.6.0-1","rimraf":"~2.0.2","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~0.9.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"0.0.4","tar":"~0.1.13"},"scripts":{"postinstall":"node cleanup","test":"mocha -R spec -t 20000"},"devDependencies":{"mocha":"~1.6.0","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install maccman/package-jquery (same as above)\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install and URL that is a zip or tar file, bower will automatically extract the contents of it.\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-package.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the (semver)[http://semver.org/] specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n```\n\nAll commands emit three types of events: `data`, `end`, and `error`.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\n### Windows users\n\nA lot of people are experience problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.6.3","dist":{"shasum":"85f919e0c4d72e19335ba0cea72e7a890110f616","tarball":"http://registry.npmjs.org/bower/-/bower-0.6.3.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.6.4":{"name":"bower","description":"The browser package manager.","version":"0.6.4","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.16","vows":"~0.6.4","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.1.22","colors":"~0.6.0-1","rimraf":"~2.0.2","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~0.9.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"0.0.4","tar":"~0.1.13"},"scripts":{"postinstall":"node cleanup","test":"mocha -R spec -t 20000"},"devDependencies":{"mocha":"~1.6.0","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install maccman/package-jquery (same as above)\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install and URL that is a zip or tar file, bower will automatically extract the contents of it.\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-package.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the [semver](http://semver.org/) specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n```\n\nAll commands emit three types of events: `data`, `end`, and `error`.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\n### Windows users\n\nA lot of people are experience problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.6.4","dist":{"shasum":"4812516aed2ba064e3c41f40d5ac63ce8b821996","tarball":"http://registry.npmjs.org/bower/-/bower-0.6.4.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.6.5":{"name":"bower","description":"The browser package manager.","version":"0.6.5","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.16","vows":"~0.6.4","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.1.22","colors":"~0.6.0-1","rimraf":"~2.0.2","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~0.9.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"0.0.4","tar":"~0.1.13"},"scripts":{"postinstall":"node cleanup","test":"mocha -R spec -t 20000"},"devDependencies":{"mocha":"~1.6.0","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install maccman/package-jquery (same as above)\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install and URL that is a zip or tar file, bower will automatically extract the contents of it.\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-package.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the [semver](http://semver.org/) specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n```\n\nAll commands emit three types of events: `data`, `end`, and `error`.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\n### Windows users\n\nA lot of people are experience problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.6.5","dist":{"shasum":"29732f5312cdf0d5612e549719b5b987e59c857b","tarball":"http://registry.npmjs.org/bower/-/bower-0.6.5.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.6.6":{"name":"bower","description":"The browser package manager.","version":"0.6.6","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.16","vows":"~0.6.4","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.1.22","colors":"~0.6.0-1","rimraf":"~2.0.2","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~0.9.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"0.0.4","tar":"~0.1.13"},"scripts":{"postinstall":"node cleanup","test":"mocha -R spec -t 20000"},"devDependencies":{"mocha":"~1.6.0","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install maccman/package-jquery (same as above)\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install and URL that is a zip or tar file, bower will automatically extract the contents of it.\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-package.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the [semver](http://semver.org/) specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n```\n\nAll commands emit three types of events: `data`, `end`, and `error`.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\n### Windows users\n\nA lot of people are experience problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.6.6","dist":{"shasum":"6ac23c4f13bf7621d396ecfe37a8429cf4c23038","tarball":"http://registry.npmjs.org/bower/-/bower-0.6.6.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.6.7":{"name":"bower","description":"The browser package manager.","version":"0.6.7","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.16","vows":"~0.6.4","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.1.22","colors":"~0.6.0-1","rimraf":"~2.0.2","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~0.9.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"0.0.4","tar":"~0.1.13"},"scripts":{"postinstall":"node cleanup","test":"mocha -R spec -t 20000"},"devDependencies":{"mocha":"~1.6.0","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/components/jquery.git\n    bower install components/jquery (same as above)\n    bower install http://foo.com/jquery.awesome-plugin.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install and URL that is a zip or tar file, bower will automatically extract the contents of it.\nWhen tags are available in the endpoint, you can specify a [semver](http://semver.org/) tag to fetch concrete versions:\n\n    bower install jquery#1.8.1\n    bower install git://github.com/components/jquery.git#~1.8.1\n    bower install components/jquery#1.8.x\n\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-package.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the [semver](http://semver.org/) specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n```\n\nAll commands emit three types of events: `data`, `end`, and `error`.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\n### Windows users\n\nA lot of people are experience problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.6.7","dist":{"shasum":"393bf6d3b16679cadf2e60d554f52d3517f2663b","tarball":"http://registry.npmjs.org/bower/-/bower-0.6.7.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.6.8":{"name":"bower","description":"The browser package manager.","version":"0.6.8","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.16","vows":"~0.6.4","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.1.22","colors":"~0.6.0-1","rimraf":"~2.0.2","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~0.9.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"0.0.4","tar":"~0.1.13"},"scripts":{"postinstall":"node cleanup","test":"mocha -R spec -t 20000"},"devDependencies":{"mocha":"~1.6.0","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/components/jquery.git\n    bower install components/jquery (same as above)\n    bower install http://foo.com/jquery.awesome-plugin.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install and URL that is a zip or tar file, bower will automatically extract the contents of it.\nWhen tags are available in the endpoint, you can specify a [semver](http://semver.org/) tag to fetch concrete versions:\n\n    bower install jquery#1.8.1\n    bower install git://github.com/components/jquery.git#~1.8.1\n    bower install components/jquery#1.8.x\n\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-package.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the [semver](http://semver.org/) specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n```\n\nAll commands emit three types of events: `data`, `end`, and `error`.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\n### Windows users\n\nA lot of people are experience problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo, Component, or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, Component, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender, Component) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.6.8","dist":{"shasum":"6f7266a1a9929947c66b87045094137b3e1e65b6","tarball":"http://registry.npmjs.org/bower/-/bower-0.6.8.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.7.0":{"name":"bower","description":"The browser package manager.","version":"0.7.0","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.16","vows":"~0.6.4","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.1.22","colors":"~0.6.0-1","rimraf":"~2.0.2","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~0.9.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"0.0.4","tar":"~0.1.13"},"scripts":{"postinstall":"node cleanup","test":"mocha -R spec -t 20000"},"devDependencies":{"mocha":"~1.6.0","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/components/jquery.git\n    bower install components/jquery (same as above)\n    bower install http://foo.com/jquery.awesome-plugin.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install from a URL that points to a zip or tar file, bower will automatically extract its contents.\nWhen tags are available in the endpoint, you can specify a [semver](http://semver.org/) tag to fetch concrete versions:\n\n    bower install jquery#1.8.1\n    bower install git://github.com/components/jquery.git#~1.8.1\n    bower install components/jquery#1.8.x\n\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-package.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/.bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\nThe __searchpath__ array provides additional URLs of read-only Bower registries that should be consulted to look up components.  This is most typically used if your business wishes to\nhouse some components internally while still taking advantage of public Bower registries.  For example, you might configure the following:\n\n```json\n{\n  \"directory\"  : \"components\",\n  \"json\"       : \"component.json\",\n  \"endpoint\"   : \"http://bower.mycompany.com\",\n  \"searchpath\" : [\"https://bower.herokuapp.com\"]\n}\n```\n\nBower will first look to **http://bower.mycompany.com** while trying to find your components.  If not found, the main registry at **https://bower.herokuapp.com** will be consulted to see if a copy of the resource can be retrieved.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, `dependencies`, and `ignore` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the [semver](http://semver.org/) specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\nYou can also point to packages by adding their URL or file path in the dependency's property.\n\n```json\n{\n  \"dependencies\": {\n    \"eventEmitter\": \"Wolfy87/EventEmitter\", // GitHub short URL\n    \"eventEmitter\": \"Wolfy87/EventEmitter#>=3\", // with version\n    \"eventEmitter\": \"git://github.com/Wolfy87/EventEmitter\",\n    \"eventEmitter\": \"git@github.com:Wolfy87/EventEmitter.git\"\n  }\n}\n```\n\nChances are you have a bunch of extra stuff in the repo that are not needed in production. List these non-necessary file paths in `ignore`.\n\n```json\n{\n  \"ignore\": [\n    \"tests/\",\n    \"**/*.txt\"\n  ]\n}\n```\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n```\n\nAll commands emit three types of events: `data`, `end`, and `error`.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\nFor the install command, there is an additional `package` event that is emitted for each installed/uninstalled package.\n\n\n### Completion\n\n**experimental**\n\nBased on the completion feature and fantastic work done in\n[npm](https://npmjs.org/doc/completion.html), Bower now has an experimental\n`completion` command that works similarly.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`, `~/.bash_profile` or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n*This doesn't work for Windows user, even with Cygwin.*\n\n\n### Windows users\n\nA lot of people are experiencing problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@uzquiano](http://github.com/uzquiano)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@hemanth](http://github.com/hemanth)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.7.0","dist":{"shasum":"9acd8601a414c681248cb0a8a233276d9e8bb20a","tarball":"http://registry.npmjs.org/bower/-/bower-0.7.0.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.7.1":{"name":"bower","description":"The browser package manager.","version":"0.7.1","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.16","vows":"~0.6.4","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.1.22","colors":"~0.6.0-1","rimraf":"~2.0.2","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~0.9.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"0.0.4","tar":"~0.1.13"},"scripts":{"test":"mocha -R spec -t 20000"},"devDependencies":{"mocha":"~1.6.0","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/components/jquery.git\n    bower install components/jquery (same as above)\n    bower install http://foo.com/jquery.awesome-plugin.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install from a URL that points to a zip or tar file, bower will automatically extract its contents.\nWhen tags are available in the endpoint, you can specify a [semver](http://semver.org/) tag to fetch concrete versions:\n\n    bower install jquery#1.8.1\n    bower install git://github.com/components/jquery.git#~1.8.1\n    bower install components/jquery#1.8.x\n\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-package.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/.bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\nThe __searchpath__ array provides additional URLs of read-only Bower registries that should be consulted to look up components.  This is most typically used if your business wishes to\nhouse some components internally while still taking advantage of public Bower registries.  For example, you might configure the following:\n\n```json\n{\n  \"directory\"  : \"components\",\n  \"json\"       : \"component.json\",\n  \"endpoint\"   : \"http://bower.mycompany.com\",\n  \"searchpath\" : [\"https://bower.herokuapp.com\"]\n}\n```\n\nBower will first look to **http://bower.mycompany.com** while trying to find your components.  If not found, the main registry at **https://bower.herokuapp.com** will be consulted to see if a copy of the resource can be retrieved.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, `dependencies`, and `ignore` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the [semver](http://semver.org/) specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\nYou can also point to packages by adding their URL or file path in the dependency's property.\n\n```json\n{\n  \"dependencies\": {\n    \"eventEmitter\": \"Wolfy87/EventEmitter\", // GitHub short URL\n    \"eventEmitter\": \"Wolfy87/EventEmitter#>=3\", // with version\n    \"eventEmitter\": \"git://github.com/Wolfy87/EventEmitter\",\n    \"eventEmitter\": \"git@github.com:Wolfy87/EventEmitter.git\"\n  }\n}\n```\n\nChances are you have a bunch of extra stuff in the repo that are not needed in production. List these non-necessary file paths in `ignore`.\n\n```json\n{\n  \"ignore\": [\n    \"tests/\",\n    \"**/*.txt\"\n  ]\n}\n```\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n```\n\nAll commands emit three types of events: `data`, `end`, and `error`.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\nFor the install command, there is an additional `package` event that is emitted for each installed/uninstalled package.\n\n\n### Completion\n\n**experimental**\n\nBased on the completion feature and fantastic work done in\n[npm](https://npmjs.org/doc/completion.html), Bower now has an experimental\n`completion` command that works similarly.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`, `~/.bash_profile` or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n*This doesn't work for Windows user, even with Cygwin.*\n\n\n### Windows users\n\nA lot of people are experiencing problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@uzquiano](http://github.com/uzquiano)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@hemanth](http://github.com/hemanth)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.7.1","dist":{"shasum":"39ab3552fdd906bc6b8fbbf4218a9dd06b4c20b6","tarball":"http://registry.npmjs.org/bower/-/bower-0.7.1.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.8.0":{"name":"bower","description":"The browser package manager.","version":"0.8.0","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.16","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.2.5","colors":"~0.6.0-1","rimraf":"~2.1.4","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~1.0.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"~0.1.3","tar":"~0.1.13","promptly":"~0.1.0"},"scripts":{"test":"mocha --reporter spec --timeout 40000"},"devDependencies":{"mocha":"~1.8.1","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/components/jquery.git\n    bower install components/jquery (same as above)\n    bower install http://foo.com/jquery.awesome-plugin.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install from a URL that points to a zip or tar file, bower will automatically extract its contents.\nWhen tags are available in the endpoint, you can specify a [semver](http://semver.org/) tag to fetch concrete versions:\n\n    bower install jquery#1.8.1\n    bower install git://github.com/components/jquery.git#~1.8.1\n    bower install components/jquery#1.8.x\n\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-package.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/.bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\nThe __searchpath__ array provides additional URLs of read-only Bower registries that should be consulted to look up components.  This is most typically used if your business wishes to\nhouse some components internally while still taking advantage of public Bower registries.  For example, you might configure the following:\n\n```json\n{\n  \"directory\"  : \"components\",\n  \"json\"       : \"component.json\",\n  \"endpoint\"   : \"http://bower.mycompany.com\",\n  \"searchpath\" : [\"https://bower.herokuapp.com\"]\n}\n```\n\nBower will first look to **http://bower.mycompany.com** while trying to find your components.  If not found, the main registry at **https://bower.herokuapp.com** will be consulted to see if a copy of the resource can be retrieved.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, `dependencies`, `devDependencies`, and `ignore` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the [semver](http://semver.org/) specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\nYou can also point to packages by adding their URL or file path in the dependency's property.\n\n```json\n{\n  \"dependencies\": {\n    \"eventEmitter\": \"Wolfy87/EventEmitter\", // GitHub short URL\n    \"eventEmitter\": \"Wolfy87/EventEmitter#>=3\", // with version\n    \"eventEmitter\": \"git://github.com/Wolfy87/EventEmitter\",\n    \"eventEmitter\": \"git@github.com:Wolfy87/EventEmitter.git\"\n  }\n}\n```\n\nChances are you have a bunch of extra stuff in the repo that are not needed in production. List these non-necessary file paths in `ignore`.\n\n```json\n{\n  \"ignore\": [\n    \"tests/\",\n    \"**/*.txt\"\n  ]\n}\n```\n\nYou may add non-essential packages in `devDependencies`. This is useful for packages aren't required to support the package, but that are used in your project, i.e. to build documentation, run a demo, or run tests.\n\n```json\n{\n  \"devDependencies\": [\n    \"qunit\": \"~1\"\n  ]\n}\n```\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n\nbower.commands\n  .search('jquery', {})\n  .on('packages', function(packages) {\n    /* `packages` is a list of packages returned by searching for 'jquery' */\n  });\n  \n```\n\nCommands emit four types of events: `data`, `end`, `result`, and `error`. `error` will only be emitted if something goes wrong. Not all commands emit all events; for a detailed look, check out the code in `lib/commands`. `data` is typically a colorized string, ready to show to an end user. `search` and `lookup` emit `packages` and `package`, respectively. Those events contain a json representation of the result of the command.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\nFor the install command, there is an additional `package` event that is emitted for each installed/uninstalled package.\n\n\n### Completion\n\n**experimental**\n\nBased on the completion feature and fantastic work done in\n[npm](https://npmjs.org/doc/completion.html), Bower now has an experimental\n`completion` command that works similarly.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`, `~/.bash_profile` or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n*This doesn't work for Windows user, even with Cygwin.*\n\n\n### Windows users\n\nA lot of people are experiencing problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question?\n\n- [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n- [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n- [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@uzquiano](http://github.com/uzquiano)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@hemanth](http://github.com/hemanth)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.8.0","dist":{"shasum":"4ae1c4160e2598e3336a0ff3dbce7e1c6922dca0","tarball":"http://registry.npmjs.org/bower/-/bower-0.8.0.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.8.1":{"name":"bower","description":"The browser package manager.","version":"0.8.1","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.16","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.2.5","colors":"~0.6.0-1","rimraf":"~2.1.4","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~1.0.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"~0.1.3","tar":"~0.1.13","promptly":"~0.1.0"},"scripts":{"test":"mocha --reporter spec --timeout 40000"},"devDependencies":{"mocha":"~1.8.1","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/components/jquery.git\n    bower install components/jquery (same as above)\n    bower install http://foo.com/jquery.awesome-plugin.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install from a URL that points to a zip or tar file, bower will automatically extract its contents.\nWhen tags are available in the endpoint, you can specify a [semver](http://semver.org/) tag to fetch concrete versions:\n\n    bower install jquery#1.8.1\n    bower install git://github.com/components/jquery.git#~1.8.1\n    bower install components/jquery#1.8.x\n\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-package.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/.bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\nThe __searchpath__ array provides additional URLs of read-only Bower registries that should be consulted to look up components.  This is most typically used if your business wishes to\nhouse some components internally while still taking advantage of public Bower registries.  For example, you might configure the following:\n\n```json\n{\n  \"directory\"  : \"components\",\n  \"json\"       : \"component.json\",\n  \"endpoint\"   : \"http://bower.mycompany.com\",\n  \"searchpath\" : [\"https://bower.herokuapp.com\"]\n}\n```\n\nBower will first look to **http://bower.mycompany.com** while trying to find your components.  If not found, the main registry at **https://bower.herokuapp.com** will be consulted to see if a copy of the resource can be retrieved.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, `dependencies`, `devDependencies`, and `ignore` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the [semver](http://semver.org/) specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\nYou can also point to packages by adding their URL or file path in the dependency's property.\n\n```json\n{\n  \"dependencies\": {\n    \"eventEmitter\": \"Wolfy87/EventEmitter\", // GitHub short URL\n    \"eventEmitter\": \"Wolfy87/EventEmitter#>=3\", // with version\n    \"eventEmitter\": \"git://github.com/Wolfy87/EventEmitter\",\n    \"eventEmitter\": \"git@github.com:Wolfy87/EventEmitter.git\"\n  }\n}\n```\n\nChances are you have a bunch of extra stuff in the repo that are not needed in production. List these non-necessary file paths in `ignore`.\n\n```json\n{\n  \"ignore\": [\n    \"tests/\",\n    \"**/*.txt\"\n  ]\n}\n```\n\nYou may add non-essential packages in `devDependencies`. This is useful for packages aren't required to support the package, but that are used in your project, i.e. to build documentation, run a demo, or run tests.\n\n```json\n{\n  \"devDependencies\": [\n    \"qunit\": \"~1\"\n  ]\n}\n```\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n\nbower.commands\n  .search('jquery', {})\n  .on('packages', function(packages) {\n    /* `packages` is a list of packages returned by searching for 'jquery' */\n  });\n  \n```\n\nCommands emit four types of events: `data`, `end`, `result`, and `error`. `error` will only be emitted if something goes wrong. Not all commands emit all events; for a detailed look, check out the code in `lib/commands`. `data` is typically a colorized string, ready to show to an end user. `search` and `lookup` emit `packages` and `package`, respectively. Those events contain a json representation of the result of the command.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\nFor the install command, there is an additional `package` event that is emitted for each installed/uninstalled package.\n\n\n### Completion\n\n**experimental**\n\nBased on the completion feature and fantastic work done in\n[npm](https://npmjs.org/doc/completion.html), Bower now has an experimental\n`completion` command that works similarly.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`, `~/.bash_profile` or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n*This doesn't work for Windows user, even with Cygwin.*\n\n\n### Windows users\n\nA lot of people are experiencing problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question?\n\n- [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n- [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n- [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@uzquiano](http://github.com/uzquiano)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@hemanth](http://github.com/hemanth)\n+ [@wibblymat](http://github.com/wibblymat)\n+ [@marcelombc](http://github.com/marcelombc)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.8.1","dist":{"shasum":"a59e6059bcc4ce7e63123ec7ee039a28d3d6e1cc","tarball":"http://registry.npmjs.org/bower/-/bower-0.8.1.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.8.2":{"name":"bower","description":"The browser package manager.","version":"0.8.2","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.16","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.2.5","colors":"~0.6.0-1","rimraf":"~2.0.3","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~1.0.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"~0.1.3","tar":"~0.1.13","promptly":"~0.1.0"},"scripts":{"test":"mocha --reporter spec --timeout 40000"},"devDependencies":{"mocha":"~1.8.1","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/components/jquery.git\n    bower install components/jquery (same as above)\n    bower install http://foo.com/jquery.awesome-plugin.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install from a URL that points to a zip or tar file, bower will automatically extract its contents.\nWhen tags are available in the endpoint, you can specify a [semver](http://semver.org/) tag to fetch concrete versions:\n\n    bower install jquery#1.8.1\n    bower install git://github.com/components/jquery.git#~1.8.1\n    bower install components/jquery#1.8.x\n\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-package.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/.bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\nThe __searchpath__ array provides additional URLs of read-only Bower registries that should be consulted to look up components.  This is most typically used if your business wishes to\nhouse some components internally while still taking advantage of public Bower registries.  For example, you might configure the following:\n\n```json\n{\n  \"directory\"  : \"components\",\n  \"json\"       : \"component.json\",\n  \"endpoint\"   : \"http://bower.mycompany.com\",\n  \"searchpath\" : [\"https://bower.herokuapp.com\"]\n}\n```\n\nBower will first look to **http://bower.mycompany.com** while trying to find your components.  If not found, the main registry at **https://bower.herokuapp.com** will be consulted to see if a copy of the resource can be retrieved.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, `dependencies`, `devDependencies`, and `ignore` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the [semver](http://semver.org/) specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\nYou can also point to packages by adding their URL or file path in the dependency's property.\n\n```json\n{\n  \"dependencies\": {\n    \"eventEmitter\": \"Wolfy87/EventEmitter\", // GitHub short URL\n    \"eventEmitter\": \"Wolfy87/EventEmitter#>=3\", // with version\n    \"eventEmitter\": \"git://github.com/Wolfy87/EventEmitter\",\n    \"eventEmitter\": \"git@github.com:Wolfy87/EventEmitter.git\"\n  }\n}\n```\n\nChances are you have a bunch of extra stuff in the repo that are not needed in production. List these non-necessary file paths in `ignore`.\n\n```json\n{\n  \"ignore\": [\n    \"tests/\",\n    \"**/*.txt\"\n  ]\n}\n```\n\nYou may add non-essential packages in `devDependencies`. This is useful for packages aren't required to support the package, but that are used in your project, i.e. to build documentation, run a demo, or run tests.\n\n```json\n{\n  \"devDependencies\": [\n    \"qunit\": \"~1\"\n  ]\n}\n```\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n\nbower.commands\n  .search('jquery', {})\n  .on('packages', function(packages) {\n    /* `packages` is a list of packages returned by searching for 'jquery' */\n  });\n  \n```\n\nCommands emit four types of events: `data`, `end`, `result`, and `error`. `error` will only be emitted if something goes wrong. Not all commands emit all events; for a detailed look, check out the code in `lib/commands`. `data` is typically a colorized string, ready to show to an end user. `search` and `lookup` emit `packages` and `package`, respectively. Those events contain a json representation of the result of the command.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\nFor the install command, there is an additional `package` event that is emitted for each installed/uninstalled package.\n\n\n### Completion\n\n**experimental**\n\nBased on the completion feature and fantastic work done in\n[npm](https://npmjs.org/doc/completion.html), Bower now has an experimental\n`completion` command that works similarly.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`, `~/.bash_profile` or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n*This doesn't work for Windows user, even with Cygwin.*\n\n\n### Windows users\n\nA lot of people are experiencing problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question?\n\n- [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n- [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n- [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@uzquiano](http://github.com/uzquiano)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@hemanth](http://github.com/hemanth)\n+ [@wibblymat](http://github.com/wibblymat)\n+ [@marcelombc](http://github.com/marcelombc)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.8.2","dist":{"shasum":"bc0227ca9c6c9a2b091f854c6ce79580d93a7bc7","tarball":"http://registry.npmjs.org/bower/-/bower-0.8.2.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.8.3":{"name":"bower","description":"The browser package manager.","version":"0.8.3","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.16","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.2.5","colors":"~0.6.0-1","rimraf":"~2.0.3","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~1.0.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"~0.1.3","tar":"~0.1.13","promptly":"~0.1.0"},"scripts":{"test":"mocha --reporter spec --timeout 40000"},"devDependencies":{"mocha":"~1.8.1","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/components/jquery.git\n    bower install components/jquery (same as above)\n    bower install http://foo.com/jquery.awesome-plugin.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install from a URL that points to a zip or tar file, bower will automatically extract its contents.\nWhen tags are available in the endpoint, you can specify a [semver](http://semver.org/) tag to fetch concrete versions:\n\n    bower install jquery#1.8.1\n    bower install git://github.com/components/jquery.git#~1.8.1\n    bower install components/jquery#1.8.x\n\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-package.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/.bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\nThe __searchpath__ array provides additional URLs of read-only Bower registries that should be consulted to look up components.  This is most typically used if your business wishes to\nhouse some components internally while still taking advantage of public Bower registries.  For example, you might configure the following:\n\n```json\n{\n  \"directory\"  : \"components\",\n  \"json\"       : \"component.json\",\n  \"endpoint\"   : \"http://bower.mycompany.com\",\n  \"searchpath\" : [\"https://bower.herokuapp.com\"]\n}\n```\n\nBower will first look to **http://bower.mycompany.com** while trying to find your components.  If not found, the main registry at **https://bower.herokuapp.com** will be consulted to see if a copy of the resource can be retrieved.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, `dependencies`, `devDependencies`, and `ignore` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the [semver](http://semver.org/) specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\nYou can also point to packages by adding their URL or file path in the dependency's property.\n\n```json\n{\n  \"dependencies\": {\n    \"eventEmitter\": \"Wolfy87/EventEmitter\", // GitHub short URL\n    \"eventEmitter\": \"Wolfy87/EventEmitter#>=3\", // with version\n    \"eventEmitter\": \"git://github.com/Wolfy87/EventEmitter\",\n    \"eventEmitter\": \"git@github.com:Wolfy87/EventEmitter.git\"\n  }\n}\n```\n\nChances are you have a bunch of extra stuff in the repo that are not needed in production. List these non-necessary file paths in `ignore`.\n\n```json\n{\n  \"ignore\": [\n    \"tests/\",\n    \"**/*.txt\"\n  ]\n}\n```\n\nYou may add non-essential packages in `devDependencies`. This is useful for packages aren't required to support the package, but that are used in your project, i.e. to build documentation, run a demo, or run tests.\n\n```json\n{\n  \"devDependencies\": [\n    \"qunit\": \"~1\"\n  ]\n}\n```\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n\nbower.commands\n  .search('jquery', {})\n  .on('packages', function(packages) {\n    /* `packages` is a list of packages returned by searching for 'jquery' */\n  });\n  \n```\n\nCommands emit four types of events: `data`, `end`, `result`, and `error`. `error` will only be emitted if something goes wrong. Not all commands emit all events; for a detailed look, check out the code in `lib/commands`. `data` is typically a colorized string, ready to show to an end user. `search` and `lookup` emit `packages` and `package`, respectively. Those events contain a json representation of the result of the command.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\nFor the install command, there is an additional `package` event that is emitted for each installed/uninstalled package.\n\n\n### Completion\n\n**experimental**\n\nBased on the completion feature and fantastic work done in\n[npm](https://npmjs.org/doc/completion.html), Bower now has an experimental\n`completion` command that works similarly.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`, `~/.bash_profile` or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n*This doesn't work for Windows user, even with Cygwin.*\n\n\n### Windows users\n\nA lot of people are experiencing problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question?\n\n- [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n- [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n- [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@uzquiano](http://github.com/uzquiano)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@hemanth](http://github.com/hemanth)\n+ [@wibblymat](http://github.com/wibblymat)\n+ [@marcelombc](http://github.com/marcelombc)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.8.3","dist":{"shasum":"5d01bcc17aa1caed96e2f81674a88e1c272f15cd","tarball":"http://registry.npmjs.org/bower/-/bower-0.8.3.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.8.4":{"name":"bower","description":"The browser package manager.","version":"0.8.4","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.16","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.2.5","colors":"~0.6.0-1","rimraf":"~2.0.3","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~1.0.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"~0.1.3","tar":"~0.1.13","promptly":"~0.1.0"},"scripts":{"test":"mocha --reporter spec --timeout 40000"},"devDependencies":{"mocha":"~1.8.1","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/components/jquery.git\n    bower install components/jquery (same as above)\n    bower install http://foo.com/jquery.awesome-plugin.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install from a URL that points to a zip or tar file, bower will automatically extract its contents.\nWhen tags are available in the endpoint, you can specify a [semver](http://semver.org/) tag to fetch concrete versions:\n\n    bower install jquery#1.8.1\n    bower install git://github.com/components/jquery.git#~1.8.1\n    bower install components/jquery#1.8.x\n\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-package.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/.bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\nThe __searchpath__ array provides additional URLs of read-only Bower registries that should be consulted to look up components.  This is most typically used if your business wishes to\nhouse some components internally while still taking advantage of public Bower registries.  For example, you might configure the following:\n\n```json\n{\n  \"directory\"  : \"components\",\n  \"json\"       : \"component.json\",\n  \"endpoint\"   : \"http://bower.mycompany.com\",\n  \"searchpath\" : [\"https://bower.herokuapp.com\"]\n}\n```\n\nBower will first look to **http://bower.mycompany.com** while trying to find your components.  If not found, the main registry at **https://bower.herokuapp.com** will be consulted to see if a copy of the resource can be retrieved.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, `dependencies`, `devDependencies`, and `ignore` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the [semver](http://semver.org/) specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\nYou can also point to packages by adding their URL or file path in the dependency's property.\n\n```json\n{\n  \"dependencies\": {\n    \"eventEmitter\": \"Wolfy87/EventEmitter\", // GitHub short URL\n    \"eventEmitter\": \"Wolfy87/EventEmitter#>=3\", // with version\n    \"eventEmitter\": \"git://github.com/Wolfy87/EventEmitter\",\n    \"eventEmitter\": \"git@github.com:Wolfy87/EventEmitter.git\"\n  }\n}\n```\n\nChances are you have a bunch of extra stuff in the repo that are not needed in production. List these non-necessary file paths in `ignore`.\n\n```json\n{\n  \"ignore\": [\n    \"tests/\",\n    \"**/*.txt\"\n  ]\n}\n```\n\nYou may add non-essential packages in `devDependencies`. This is useful for packages aren't required to support the package, but that are used in your project, i.e. to build documentation, run a demo, or run tests.\n\n```json\n{\n  \"devDependencies\": [\n    \"qunit\": \"~1\"\n  ]\n}\n```\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n\nbower.commands\n  .search('jquery', {})\n  .on('packages', function(packages) {\n    /* `packages` is a list of packages returned by searching for 'jquery' */\n  });\n  \n```\n\nCommands emit four types of events: `data`, `end`, `result`, and `error`. `error` will only be emitted if something goes wrong. Not all commands emit all events; for a detailed look, check out the code in `lib/commands`. `data` is typically a colorized string, ready to show to an end user. `search` and `lookup` emit `packages` and `package`, respectively. Those events contain a json representation of the result of the command.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\nFor the install command, there is an additional `package` event that is emitted for each installed/uninstalled package.\n\n\n### Completion\n\n**experimental**\n\nBased on the completion feature and fantastic work done in\n[npm](https://npmjs.org/doc/completion.html), Bower now has an experimental\n`completion` command that works similarly.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`, `~/.bash_profile` or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n*This doesn't work for Windows user, even with Cygwin.*\n\n\n### Windows users\n\nA lot of people are experiencing problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question?\n\n- [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n- [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n- [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@uzquiano](http://github.com/uzquiano)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@hemanth](http://github.com/hemanth)\n+ [@wibblymat](http://github.com/wibblymat)\n+ [@marcelombc](http://github.com/marcelombc)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.8.4","dist":{"shasum":"227a25dfd55346b89c4f374a4a454ba08029a48f","tarball":"http://registry.npmjs.org/bower/-/bower-0.8.4.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.8.5":{"name":"bower","description":"The browser package manager.","version":"0.8.5","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.16","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.2.5","colors":"~0.6.0-1","rimraf":"~2.0.3","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~1.0.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"~0.1.3","tar":"~0.1.13","promptly":"~0.1.0"},"scripts":{"test":"mocha --reporter spec --timeout 40000"},"devDependencies":{"mocha":"~1.8.1","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/components/jquery.git\n    bower install components/jquery (same as above)\n    bower install http://foo.com/jquery.awesome-plugin.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install from a URL that points to a zip or tar file, bower will automatically extract its contents.\nWhen tags are available in the endpoint, you can specify a [semver](http://semver.org/) tag to fetch concrete versions:\n\n    bower install jquery#1.8.1\n    bower install git://github.com/components/jquery.git#~1.8.1\n    bower install components/jquery#1.8.x\n\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-package.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/.bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\nThe __searchpath__ array provides additional URLs of read-only Bower registries that should be consulted to look up components.  This is most typically used if your business wishes to\nhouse some components internally while still taking advantage of public Bower registries.  For example, you might configure the following:\n\n```json\n{\n  \"directory\"  : \"components\",\n  \"json\"       : \"component.json\",\n  \"endpoint\"   : \"http://bower.mycompany.com\",\n  \"searchpath\" : [\"https://bower.herokuapp.com\"]\n}\n```\n\nBower will first look to **http://bower.mycompany.com** while trying to find your components.  If not found, the main registry at **https://bower.herokuapp.com** will be consulted to see if a copy of the resource can be retrieved.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, `dependencies`, `devDependencies`, and `ignore` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the [semver](http://semver.org/) specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\nYou can also point to packages by adding their URL or file path in the dependency's property.\n\n```json\n{\n  \"dependencies\": {\n    \"eventEmitter\": \"Wolfy87/EventEmitter\", // GitHub short URL\n    \"eventEmitter\": \"Wolfy87/EventEmitter#>=3\", // with version\n    \"eventEmitter\": \"git://github.com/Wolfy87/EventEmitter\",\n    \"eventEmitter\": \"git@github.com:Wolfy87/EventEmitter.git\"\n  }\n}\n```\n\nChances are you have a bunch of extra stuff in the repo that are not needed in production. List these non-necessary file paths in `ignore`.\n\n```json\n{\n  \"ignore\": [\n    \"tests/\",\n    \"**/*.txt\"\n  ]\n}\n```\n\nYou may add non-essential packages in `devDependencies`. This is useful for packages aren't required to support the package, but that are used in your project, i.e. to build documentation, run a demo, or run tests.\n\n```json\n{\n  \"devDependencies\": [\n    \"qunit\": \"~1\"\n  ]\n}\n```\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n\nbower.commands\n  .search('jquery', {})\n  .on('packages', function(packages) {\n    /* `packages` is a list of packages returned by searching for 'jquery' */\n  });\n  \n```\n\nCommands emit four types of events: `data`, `end`, `result`, and `error`. `error` will only be emitted if something goes wrong. Not all commands emit all events; for a detailed look, check out the code in `lib/commands`. `data` is typically a colorized string, ready to show to an end user. `search` and `lookup` emit `packages` and `package`, respectively. Those events contain a json representation of the result of the command.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\nFor the install command, there is an additional `package` event that is emitted for each installed/uninstalled package.\n\n\n### Completion\n\n**experimental**\n\nBased on the completion feature and fantastic work done in\n[npm](https://npmjs.org/doc/completion.html), Bower now has an experimental\n`completion` command that works similarly.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`, `~/.bash_profile` or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n*This doesn't work for Windows user, even with Cygwin.*\n\n\n### Windows users\n\nA lot of people are experiencing problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question?\n\n- [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n- [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n- [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@uzquiano](http://github.com/uzquiano)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@hemanth](http://github.com/hemanth)\n+ [@wibblymat](http://github.com/wibblymat)\n+ [@marcelombc](http://github.com/marcelombc)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.8.5","dist":{"shasum":"8c95a3f4e4f3fc717d398283db919d1ad4b1df66","tarball":"http://registry.npmjs.org/bower/-/bower-0.8.5.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.8.6":{"name":"bower","description":"The browser package manager.","version":"0.8.6","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.16","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.2.5","colors":"~0.6.0-1","rimraf":"~2.0.3","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~1.0.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"0.1.4","tar":"~0.1.13","promptly":"~0.1.0"},"scripts":{"test":"mocha --reporter spec --timeout 40000"},"devDependencies":{"mocha":"~1.8.1","nock":"~0.13.5"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png)](http://travis-ci.org/twitter/bower)\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/components/jquery.git\n    bower install components/jquery (same as above)\n    bower install http://foo.com/jquery.awesome-plugin.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, GitHub shorthand, URL or local path.\nIf you install from a URL that points to a zip or tar file, bower will automatically extract its contents.\nWhen tags are available in the endpoint, you can specify a [semver](http://semver.org/) tag to fetch concrete versions:\n\n    bower install jquery#1.8.1\n    bower install git://github.com/components/jquery.git#~1.8.1\n    bower install components/jquery#1.8.x\n\nBower also works with private Git repositories. Simply reference them by their SSH endpoint:\n\n    bower install git@github.com:user/private-package.git\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\nDuring install you can have Bower add an entry to your component.json as well:\n\n    bower install --save jquery\n\nTo update a package, reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\nTo clean the cache:\n\n    bower cache-clean [name]\n\nSeveral packages can be cleaned at the same time.\nTo clean the entire cache, just call `bower cache-clean` without any names.\nAlso, both the install and update commands have a `--force` flag that tells bower to bypass the cache and always fetch remote sources.\n\nYou can disable colors by using the `--no-color` flag.\n\n### Bower Configuration\n\nBower can be configured by creating a .bowerrc file in your home folder (usually ~/.bowerrc) with one or all of the following configuration parameters. You can also configure Bower on a per-project basis by creating a .bowerrc file in the project directory, Bower will merge this configuration with the configuration found in your home directory. This allows you to version your project specific Bower configuration with the rest of your code base.\n\n```json\n{\n  \"directory\" : \"components\",\n  \"json\"      : \"component.json\",\n  \"endpoint\"  : \"https://bower.herokuapp.com\"\n}\n```\n\nTo run your own Bower Endpoint for custom components/packages that are behind a firewall you can use a simple implementation of bower server at https://github.com/twitter/bower-server.\n\nThe __searchpath__ array provides additional URLs of read-only Bower registries that should be consulted to look up components.  This is most typically used if your business wishes to\nhouse some components internally while still taking advantage of public Bower registries.  For example, you might configure the following:\n\n```json\n{\n  \"directory\"  : \"components\",\n  \"json\"       : \"component.json\",\n  \"endpoint\"   : \"http://bower.mycompany.com\",\n  \"searchpath\" : [\"https://bower.herokuapp.com\"]\n}\n```\n\nBower will first look to **http://bower.mycompany.com** while trying to find your components.  If not found, the main registry at **https://bower.herokuapp.com** will be consulted to see if a copy of the resource can be retrieved.\n\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\",\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, Bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, `dependencies`, `devDependencies`, and `ignore` are the only properties that are used by Bower. If you have several files you're distributing as part of your package, pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"],\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nBower only recognizes versions that follow the [semver](http://semver.org/) specification.\nThere should only be at most one file per file type in the `main` list. So only one `.js` or `.css`.\n\nYou can also point to packages by adding their URL or file path in the dependency's property.\n\n```json\n{\n  \"dependencies\": {\n    \"eventEmitter\": \"Wolfy87/EventEmitter\", // GitHub short URL\n    \"eventEmitter\": \"Wolfy87/EventEmitter#>=3\", // with version\n    \"eventEmitter\": \"git://github.com/Wolfy87/EventEmitter\",\n    \"eventEmitter\": \"git@github.com:Wolfy87/EventEmitter.git\"\n  }\n}\n```\n\nChances are you have a bunch of extra stuff in the repo that are not needed in production. List these non-necessary file paths in `ignore`.\n\n```json\n{\n  \"ignore\": [\n    \"tests/\",\n    \"**/*.txt\"\n  ]\n}\n```\n\nYou may add non-essential packages in `devDependencies`. This is useful for packages aren't required to support the package, but that are used in your project, i.e. to build documentation, run a demo, or run tests.\n\n```json\n{\n  \"devDependencies\": [\n    \"qunit\": \"~1\"\n  ]\n}\n```\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local subdirectory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use Bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume Bower components.\n\nIf you pass the option `--map` to bower's `list` command, it will generate a JSON with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\nThere is no direct way to unregister a package yet. Meanwhile you can request it [here](https://github.com/twitter/bower/issues/120).\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc.).\n\nBower then makes available a simple programmatic API which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### Programmatic API\n\nBower provides a pretty powerful programmatic api. All commands can be accessed through the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n\nbower.commands\n  .search('jquery', {})\n  .on('packages', function(packages) {\n    /* `packages` is a list of packages returned by searching for 'jquery' */\n  });\n  \n```\n\nCommands emit four types of events: `data`, `end`, `result`, and `error`. `error` will only be emitted if something goes wrong. Not all commands emit all events; for a detailed look, check out the code in `lib/commands`. `data` is typically a colorized string, ready to show to an end user. `search` and `lookup` emit `packages` and `package`, respectively. Those events contain a json representation of the result of the command.\n\nFor a better of idea how this works, you may want to check out [our bin file](https://github.com/twitter/bower/blob/master/bin/bower).\n\nFor the install command, there is an additional `package` event that is emitted for each installed/uninstalled package.\n\n\n### Completion\n\n**experimental**\n\nBased on the completion feature and fantastic work done in\n[npm](https://npmjs.org/doc/completion.html), Bower now has an experimental\n`completion` command that works similarly.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`, `~/.bash_profile` or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n*This doesn't work for Windows user, even with Cygwin.*\n\n\n### Windows users\n\nA lot of people are experiencing problems using bower on windows because [msysgit](http://code.google.com/p/msysgit/) must be installed correctly.\nBe sure to check the option shown above, otherwise it will simply not work:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo or Ender? What does it do better?**\n\nBower is a lower level component than Jam, Volo, or Ender. These managers could consume Bower as a dependency.\n\nBower's aim is simply to install Git paths, resolve dependencies from a `component.json`, check versions, and then provide an API which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management.\n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender) try to tackle this problem in such a way that they actually end up alienating and further segregating the JavaScript community around transports (Sprockets, CommonJS, RequireJS, regular script tags).\n\nBower offers a generic, unopinionated solution to the problem of package management, while exposing an API that can be consumed by a more opinionated build stack.\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a Git powered package manager) should, in theory, be capable of consuming every package that Volo does, with the additional benefit of supporting internal networks and other Git repositories not hosted on GitHub.\n\n**We recently saw what happened when the main NPM registry went down. Is a single point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as Bower just installs Git URLs. It's up to the URL provider to establish redundancy.\n\n**Isn't having a `package.json` file going to conflict with my npm's `package.json`? Will this be a problem?**\n\nDon't use a `package.json` – use a `component.json`.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating its frontend architecture onto Bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question?\n\n- [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n- [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n- [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n+ [@satazor](http://github.com/satazor)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@uzquiano](http://github.com/uzquiano)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@hemanth](http://github.com/hemanth)\n+ [@wibblymat](http://github.com/wibblymat)\n+ [@marcelombc](http://github.com/marcelombc)\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.8.6","dist":{"shasum":"bb75f87c513626e80f52eb0df11bf37004af8b18","tarball":"http://registry.npmjs.org/bower/-/bower-0.8.6.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.9.0":{"name":"bower","description":"The browser package manager.","version":"0.9.0","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/twitter/bower/blob/master/LICENSE"}],"main":"lib","homepage":"http://twitter.github.com/bower","engines":{"node":">=0.8.0"},"dependencies":{"tmp":"~0.0.17","glob":"~3.1.14","nopt":"~2.0.0","archy":"~0.0.2","async":"~0.2.5","colors":"~0.6.0-1","rimraf":"~2.0.3","mkdirp":"~0.3.4","semver":"~1.1.0","request":"~2.11.4","fstream":"~0.1.19","hogan.js":"~2.0.0","lodash":"~1.0.1","read-package-json":"~0.1.8","stable":"~0.1.2","rc":"~0.0.6","unzip":"0.1.7","tar":"~0.1.13","promptly":"~0.1.0","abbrev":"~1.0.4","update-notifier":"~0.1.3"},"scripts":{"test":"mocha --reporter spec --timeout 40000"},"devDependencies":{"mocha":"~1.8.1","nock":"~0.17.3"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/twitter/bower.png?branch=master)](http://travis-ci.org/twitter/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```bash\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific Git-tagged version from a remote package\nbower install <package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local Git endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar.gz` files. It's contents will be\n  extracted.\n\n‡ These types of `<package>` make Git tags available. You can specify a\n[semver](http://semver.org/) tag to fetch a specific release, and lock the\npackage to that version.\n\nAll package contents are installed in the `components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package, there **must** be a valid manifest JSON in the\ncurrent working directory, your package **must** be available at a Git endpoint\n(e.g., GitHub), and it should use [semver](http://semver.org/) Git tags. Then\nrun:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management. It's on a\nfirst come, first served basis. Think of it like a URL shortener. Now anyone\ncan run `bower install <my-package-name>`, and get your library installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/twitter/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nGlobal configuration is handled by creating a `.bowerrc` in your home directory\n(i.e., `~/.bowerrc`).  Local configuration is handled by creating a `.bowerrc`\nin your project's directory, allowing you to version a project-specific Bower\nconfiguration with the rest of your code base.\n\nBower will combine the local and global configurations (with local settings\ntaking precedence).\n\nThe `.bowerrc` defines several options:\n\n* `directory`: Set the default directory to install packaged components into.\n* `endpoint`: Set a custom registry endpoint.\n* `json`: Set the default JSON file for Bower to use when resolving dependencies.\n* `searchpath`: An array of additional URLs pointing to read-only Bower registries.\n* `shorthand_resolver`: Define a custom template for shorthand package names.\n\n```json\n{\n  \"directory\": \"bower_components\",\n  \"endpoint\": \"https://bower.mycompany.com\",\n  \"json\": \"bower.json\",\n  \"searchpath\": [\n    \"https://bower.herokuapp.com\"\n  ],\n  \"shorthand_resolver\": \"git://example.com/{{{ organization }}}/{{{ package }}}.git\"\n}\n```\n\nThe `searchpath` array is useful if your organization wishes to maintain a\nprivate registry of packages while also taking advantage of public Bower\nregistries. If a package is not found at your private endpoint, Bower will\nconsult the registries specified in the `searchpath` array.\n\nThe `shorthand_resolver` key provides support for defining a custom template\nwhich Bower uses when constructing a URL for a given shorthand. For example, if\na shorthand of `twitter/flight` or `twitter/flight#v1.0.0` is specified in the\npackage manifest, the following data can be referenced from within the\n`.bowerrc` as part of the `shorthand_resolver` template:\n\n* `endpoint`: `twitter/flight`\n* `organization`: `twitter`\n* `package`: `flight`\n\n**N.B.** To run your own Bower Endpoint for custom packages that are behind a\nfirewall, you can use a simple implementation of the [Bower\nServer](https://github.com/twitter/bower-server).\n\n\n## Defining a package\n\nYou must create a JSON file -- `bower.json` by default -- in your project's\nroot, and specify all of its dependencies. This is similar to Node's\n`package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's\ndependencies.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--map` option to Bower's `list` command, it will generate JSON\nwith dependency objects. Alternatively, you can pass the `--paths` option to\nthe `list` command to get a simple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n\nbower.commands\n  .search('jquery', {})\n  .on('packages', function(packages) {\n    // `packages` is a list of packages returned by searching for 'jquery'\n  });\n```\n\nCommands emit four types of events: `data`, `end`, `result`, and `error`.\n\n`error` will only be emitted if something goes wrong. Not all commands emit all\nevents; for a detailed look, check out the code in `lib/commands`.\n\n`data` is typically a colorized string, ready to show to an end user. `search`\nand `lookup` emit `packages` and `package`, respectively. Those events contain\na JSON representation of the result of the command.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/twitter/bower/blob/master/bin/bower).\n\nFor the install command, there is an additional `package` event that is emitted\nfor each installed/uninstalled package.\n\n\n## Completion (experimental)\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n* [@addyosmani](https://github.com/addyosmani)\n* [@angus-c](https://github.com/angus-c)\n* [@borismus](https://github.com/borismus)\n* [@carsonmcdonald](https://github/@carsonmcdonald)\n* [@chriseppstein](https://github.com/chriseppstein)\n* [@danwrong](https://github.com/danwrong)\n* [@desandro](https://github.com/desandro)\n* [@hemanth](https://github.com/hemanth)\n* [@isaacs](https://github.com/isaacs)\n* [@josh](https://github.com/josh)\n* [@jrburke](https://github.com/jrburke)\n* [@marcelombc](https://github.com/marcelombc)\n* [@mklabs](https://github.com/mklabs)\n* [@paulirish](https://github.com/paulirish)\n* [@richo](https://github.com/richo)\n* [@rvagg](https://github.com/rvagg)\n* [@sindresorhus](https://github.com/sindresorhus)\n* [@SlexAxton](https://github.com/SlexAxton)\n* [@sstephenson](https://github.com/sstephenson)\n* [@tomdale](https://github.com/tomdale)\n* [@uzquiano](https://github.com/uzquiano)\n* [@visionmedia](https://github.com/visionmedia)\n* [@wagenet](https://github.com/wagenet)\n* [@wibblymat](https://github.com/wibblymat)\n* [@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.9.0","dist":{"shasum":"ee64f254ec9ff03324e075654a3d5e12f2b0089e","tarball":"http://registry.npmjs.org/bower/-/bower-0.9.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.9.1":{"name":"bower","description":"The browser package manager.","version":"0.9.1","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"https://github.com/bower/bower"},"main":"lib","homepage":"http://bower.io/","engines":{"node":">=0.8.0"},"dependencies":{"abbrev":"~1.0.4","archy":"~0.0.2","async":"~0.2.5","colors":"~0.6.0-1","fstream":"~0.1.19","glob":"~3.1.14","hogan.js":"~2.0.0","lodash":"~1.0.1","mkdirp":"~0.3.4","nopt":"~2.0.0","promptly":"~0.1.0","rc":"~0.0.6","read-package-json":"~0.1.8","request":"~2.11.4","rimraf":"~2.0.3","semver":"~1.1.0","stable":"~0.1.2","tar":"~0.1.13","tmp":"~0.0.17","unzip":"0.1.7","update-notifier":"~0.1.3"},"scripts":{"test":"mocha --reporter spec --timeout 40000"},"devDependencies":{"mocha":"~1.8.1","nock":"~0.17.3"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```bash\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific Git-tagged version from a remote package\nbower install <package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local Git endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar.gz` files. It's contents will be\n  extracted.\n\n‡ These types of `<package>` make Git tags available. You can specify a\n[semver](http://semver.org/) tag to fetch a specific release, and lock the\npackage to that version.\n\nAll package contents are installed in the `components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package, there **must** be a valid manifest JSON in the\ncurrent working directory, your package **must** be available at a Git endpoint\n(e.g., GitHub), and it should use [semver](http://semver.org/) Git tags. Then\nrun:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management. It's on a\nfirst come, first served basis. Think of it like a URL shortener. Now anyone\ncan run `bower install <my-package-name>`, and get your library installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nGlobal configuration is handled by creating a `.bowerrc` in your home directory\n(i.e., `~/.bowerrc`).  Local configuration is handled by creating a `.bowerrc`\nin your project's directory, allowing you to version a project-specific Bower\nconfiguration with the rest of your code base.\n\nBower will combine the local and global configurations (with local settings\ntaking precedence).\n\nThe `.bowerrc` defines several options:\n\n* `directory`: Set the default directory to install packaged components into.\n* `endpoint`: Set a custom registry endpoint.\n* `json`: Set the default JSON file for Bower to use when resolving dependencies.\n* `searchpath`: An array of additional URLs pointing to read-only Bower registries.\n* `shorthand_resolver`: Define a custom template for shorthand package names.\n\n```json\n{\n  \"directory\": \"bower_components\",\n  \"endpoint\": \"https://bower.mycompany.com\",\n  \"json\": \"bower.json\",\n  \"searchpath\": [\n    \"https://bower.herokuapp.com\"\n  ],\n  \"shorthand_resolver\": \"git://example.com/{{{ organization }}}/{{{ package }}}.git\"\n}\n```\n\nThe `searchpath` array is useful if your organization wishes to maintain a\nprivate registry of packages while also taking advantage of public Bower\nregistries. If a package is not found at your private endpoint, Bower will\nconsult the registries specified in the `searchpath` array.\n\nThe `shorthand_resolver` key provides support for defining a custom template\nwhich Bower uses when constructing a URL for a given shorthand. For example, if\na shorthand of `twitter/flight` or `twitter/flight#v1.0.0` is specified in the\npackage manifest, the following data can be referenced from within the\n`.bowerrc` as part of the `shorthand_resolver` template:\n\n* `endpoint`: `twitter/flight`\n* `organization`: `twitter`\n* `package`: `flight`\n\n**N.B.** To run your own Bower Endpoint for custom packages that are behind a\nfirewall, you can use a simple implementation of the [Bower\nServer](https://github.com/bower/bower-server).\n\n\n## Defining a package\n\nYou must create a JSON file -- `bower.json` by default -- in your project's\nroot, and specify all of its dependencies. This is similar to Node's\n`package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's\ndependencies.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--map` option to Bower's `list` command, it will generate JSON\nwith dependency objects. Alternatively, you can pass the `--paths` option to\nthe `list` command to get a simple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n\nbower.commands\n  .search('jquery', {})\n  .on('packages', function(packages) {\n    // `packages` is a list of packages returned by searching for 'jquery'\n  });\n```\n\nCommands emit four types of events: `data`, `end`, `result`, and `error`.\n\n`error` will only be emitted if something goes wrong. Not all commands emit all\nevents; for a detailed look, check out the code in `lib/commands`.\n\n`data` is typically a colorized string, ready to show to an end user. `search`\nand `lookup` emit `packages` and `package`, respectively. Those events contain\na JSON representation of the result of the command.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/master/bin/bower).\n\nFor the install command, there is an additional `package` event that is emitted\nfor each installed/uninstalled package.\n\n\n## Completion (experimental)\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n* [@addyosmani](https://github.com/addyosmani)\n* [@angus-c](https://github.com/angus-c)\n* [@borismus](https://github.com/borismus)\n* [@carsonmcdonald](https://github/@carsonmcdonald)\n* [@chriseppstein](https://github.com/chriseppstein)\n* [@danwrong](https://github.com/danwrong)\n* [@desandro](https://github.com/desandro)\n* [@hemanth](https://github.com/hemanth)\n* [@isaacs](https://github.com/isaacs)\n* [@josh](https://github.com/josh)\n* [@jrburke](https://github.com/jrburke)\n* [@marcelombc](https://github.com/marcelombc)\n* [@mklabs](https://github.com/mklabs)\n* [@paulirish](https://github.com/paulirish)\n* [@richo](https://github.com/richo)\n* [@rvagg](https://github.com/rvagg)\n* [@sindresorhus](https://github.com/sindresorhus)\n* [@SlexAxton](https://github.com/SlexAxton)\n* [@sstephenson](https://github.com/sstephenson)\n* [@tomdale](https://github.com/tomdale)\n* [@uzquiano](https://github.com/uzquiano)\n* [@visionmedia](https://github.com/visionmedia)\n* [@wagenet](https://github.com/wagenet)\n* [@wibblymat](https://github.com/wibblymat)\n* [@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.9.1","dist":{"shasum":"d10db97807f2e0946c73b960e71df18b008ec885","tarball":"http://registry.npmjs.org/bower/-/bower-0.9.1.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.9.2":{"name":"bower","description":"The browser package manager.","version":"0.9.2","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"https://github.com/bower/bower"},"main":"lib","homepage":"http://bower.io/","engines":{"node":">=0.8.0"},"dependencies":{"abbrev":"~1.0.4","archy":"~0.0.2","async":"~0.2.5","colors":"~0.6.0-1","fstream":"~0.1.19","glob":"~3.1.14","hogan.js":"~2.0.0","lodash":"~1.0.1","mkdirp":"~0.3.4","nopt":"~2.0.0","promptly":"~0.1.0","rc":"~0.0.6","read-package-json":"~0.1.8","request":"~2.11.4","rimraf":"~2.0.3","semver":"~1.1.0","stable":"~0.1.2","tar":"~0.1.13","tmp":"~0.0.17","unzip":"0.1.7","update-notifier":"~0.1.3"},"scripts":{"test":"mocha --reporter spec --timeout 40000"},"devDependencies":{"mocha":"~1.8.1","nock":"~0.17.3"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```bash\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific Git-tagged version from a remote package\nbower install <package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local Git endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar.gz` files. It's contents will be\n  extracted.\n\n‡ These types of `<package>` make Git tags available. You can specify a\n[semver](http://semver.org/) tag to fetch a specific release, and lock the\npackage to that version.\n\nAll package contents are installed in the `components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package, there **must** be a valid manifest JSON in the\ncurrent working directory, your package **must** be available at a Git endpoint\n(e.g., GitHub), and it should use [semver](http://semver.org/) Git tags. Then\nrun:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management. It's on a\nfirst come, first served basis. Think of it like a URL shortener. Now anyone\ncan run `bower install <my-package-name>`, and get your library installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nGlobal configuration is handled by creating a `.bowerrc` in your home directory\n(i.e., `~/.bowerrc`).  Local configuration is handled by creating a `.bowerrc`\nin your project's directory, allowing you to version a project-specific Bower\nconfiguration with the rest of your code base.\n\nBower will combine the local and global configurations (with local settings\ntaking precedence).\n\nThe `.bowerrc` defines several options:\n\n* `directory`: Set the default directory to install packaged components into.\n* `endpoint`: Set a custom registry endpoint.\n* `json`: Set the default JSON file for Bower to use when resolving dependencies.\n* `searchpath`: An array of additional URLs pointing to read-only Bower registries.\n* `shorthand_resolver`: Define a custom template for shorthand package names.\n\n```json\n{\n  \"directory\": \"bower_components\",\n  \"endpoint\": \"https://bower.mycompany.com\",\n  \"json\": \"bower.json\",\n  \"searchpath\": [\n    \"https://bower.herokuapp.com\"\n  ],\n  \"shorthand_resolver\": \"git://example.com/{{{ organization }}}/{{{ package }}}.git\"\n}\n```\n\nThe `searchpath` array is useful if your organization wishes to maintain a\nprivate registry of packages while also taking advantage of public Bower\nregistries. If a package is not found at your private endpoint, Bower will\nconsult the registries specified in the `searchpath` array.\n\nThe `shorthand_resolver` key provides support for defining a custom template\nwhich Bower uses when constructing a URL for a given shorthand. For example, if\na shorthand of `twitter/flight` or `twitter/flight#v1.0.0` is specified in the\npackage manifest, the following data can be referenced from within the\n`.bowerrc` as part of the `shorthand_resolver` template:\n\n* `endpoint`: `twitter/flight`\n* `organization`: `twitter`\n* `package`: `flight`\n\n**N.B.** To run your own Bower Endpoint for custom packages that are behind a\nfirewall, you can use a simple implementation of the [Bower\nServer](https://github.com/bower/bower-server).\n\n\n## Defining a package\n\nYou must create a JSON file -- `bower.json` by default -- in your project's\nroot, and specify all of its dependencies. This is similar to Node's\n`package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's\ndependencies.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--map` option to Bower's `list` command, it will generate JSON\nwith dependency objects. Alternatively, you can pass the `--paths` option to\nthe `list` command to get a simple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    data && console.log(data);\n  });\n\nbower.commands\n  .search('jquery', {})\n  .on('packages', function(packages) {\n    // `packages` is a list of packages returned by searching for 'jquery'\n  });\n```\n\nCommands emit four types of events: `data`, `end`, `result`, and `error`.\n\n`error` will only be emitted if something goes wrong. Not all commands emit all\nevents; for a detailed look, check out the code in `lib/commands`.\n\n`data` is typically a colorized string, ready to show to an end user. `search`\nand `lookup` emit `packages` and `package`, respectively. Those events contain\na JSON representation of the result of the command.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/master/bin/bower).\n\nFor the install command, there is an additional `package` event that is emitted\nfor each installed/uninstalled package.\n\n\n## Completion (experimental)\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n* [@addyosmani](https://github.com/addyosmani)\n* [@angus-c](https://github.com/angus-c)\n* [@borismus](https://github.com/borismus)\n* [@carsonmcdonald](https://github/@carsonmcdonald)\n* [@chriseppstein](https://github.com/chriseppstein)\n* [@danwrong](https://github.com/danwrong)\n* [@desandro](https://github.com/desandro)\n* [@hemanth](https://github.com/hemanth)\n* [@isaacs](https://github.com/isaacs)\n* [@josh](https://github.com/josh)\n* [@jrburke](https://github.com/jrburke)\n* [@marcelombc](https://github.com/marcelombc)\n* [@mklabs](https://github.com/mklabs)\n* [@paulirish](https://github.com/paulirish)\n* [@richo](https://github.com/richo)\n* [@rvagg](https://github.com/rvagg)\n* [@sindresorhus](https://github.com/sindresorhus)\n* [@SlexAxton](https://github.com/SlexAxton)\n* [@sstephenson](https://github.com/sstephenson)\n* [@tomdale](https://github.com/tomdale)\n* [@uzquiano](https://github.com/uzquiano)\n* [@visionmedia](https://github.com/visionmedia)\n* [@wagenet](https://github.com/wagenet)\n* [@wibblymat](https://github.com/wibblymat)\n* [@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","_id":"bower@0.9.2","dist":{"shasum":"cafc6209502ca558b110fe6f30465143a469b7f3","tarball":"http://registry.npmjs.org/bower/-/bower-0.9.2.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.10.0":{"name":"bower","description":"The browser package manager.","version":"0.10.0","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"https://github.com/bower/bower"},"main":"lib","homepage":"http://bower.io/","engines":{"node":">=0.8.0"},"dependencies":{"abbrev":"~1.0.4","archy":"~0.0.2","async":"~0.2.5","colors":"~0.6.0-1","fstream":"~0.1.19","glob":"~3.1.14","hogan.js":"~2.0.0","lodash":"~1.0.1","mkdirp":"~0.3.4","nopt":"~2.0.0","promptly":"~0.1.0","rc":"~0.3.0","read-package-json":"~0.1.8","request":"~2.11.4","rimraf":"~2.0.3","semver":"~2.0.7","stable":"~0.1.2","tar":"~0.1.13","tmp":"~0.0.20","unzip":"0.1.7","update-notifier":"~0.1.3","which":"~1.0.5"},"scripts":{"test":"mocha --reporter spec --timeout 40000"},"devDependencies":{"mocha":"~1.8.1","nock":"~0.17.3"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```bash\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific Git-tagged version from a remote package\nbower install <package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local Git endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar` files. It's contents will be\n  extracted.\n\n‡ These types of `<package>` make Git tags available. You can specify a\n[semver](http://semver.org/) tag to fetch a specific release, and lock the\npackage to that version.\n\nAll package contents are installed in the `components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package:\n\n* There **must** be a valid manifest JSON in the current working directory.\n* Your package should use [semver](http://semver.org/) Git tags.\n* Your package **must** be available at a Git endpoint (e.g., GitHub); remember\n  to push your Git tags!\n\nThen use the following command:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management at this point\nin time. It's on a first come, first served basis. Think of it like a URL\nshortener. Now anyone can run `bower install <my-package-name>`, and get your\nlibrary installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nGlobal configuration is handled by creating a `.bowerrc` in your home directory\n(i.e., `~/.bowerrc`).  Local configuration is handled by creating a `.bowerrc`\nin your project's directory, allowing you to version a project-specific Bower\nconfiguration with the rest of your code base.\n\nBower will combine the local and global configurations (with local settings\ntaking precedence).\n\nThe `.bowerrc` defines several options:\n\n* `directory`: Set the default directory to install packaged components into.\n* `endpoint`: Set a custom registry endpoint.\n* `json`: Set the default JSON file for Bower to use when resolving dependencies.\n* `searchpath`: An array of additional URLs pointing to read-only Bower registries.\n* `shorthand_resolver`: Define a custom template for shorthand package names.\n\n```json\n{\n  \"directory\": \"bower_components\",\n  \"endpoint\": \"https://bower.mycompany.com\",\n  \"json\": \"bower.json\",\n  \"searchpath\": [\n    \"https://bower.herokuapp.com\"\n  ],\n  \"shorthand_resolver\": \"git://example.com/{{{ organization }}}/{{{ package }}}.git\"\n}\n```\n\nThe `searchpath` array is useful if your organization wishes to maintain a\nprivate registry of packages while also taking advantage of public Bower\nregistries. If a package is not found at your private endpoint, Bower will\nconsult the registries specified in the `searchpath` array.\n\nThe `shorthand_resolver` key provides support for defining a custom template\nwhich Bower uses when constructing a URL for a given shorthand. For example, if\na shorthand of `twitter/flight` or `twitter/flight#v1.0.0` is specified in the\npackage manifest, the following data can be referenced from within the\n`.bowerrc` as part of the `shorthand_resolver` template:\n\n* `endpoint`: `twitter/flight`\n* `organization`: `twitter`\n* `package`: `flight`\n\n**N.B.** To run your own Bower Endpoint for custom packages that are behind a\nfirewall, you can use a simple implementation of the [Bower Registry](https://github.com/bower/registry).\n\n\n## Defining a package\n\nYou must create a JSON file -- `bower.json` by default -- in your project's\nroot, and specify all of its dependencies. This is similar to Node's\n`package.json`, or Ruby's `Gemfile`, and is useful for locking down a project's\ndependencies.\n\n*NOTE:* In versions of Bower before 0.9.0 the package metadata file was called `component.json` rather than `bower.json`. This has changed to avoid a name clash with another tool. You can still use `component.json` for now but it is deprecated and the automatic fallback is likely to be removed in an upcoming release.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--map` option to Bower's `list` command, it will generate JSON\nwith dependency objects. Alternatively, you can pass the `--paths` option to\nthe `list` command to get a simple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    if (data) {\n      console.log(data);\n    }\n  });\n\nbower.commands\n  .search('jquery', {})\n  .on('packages', function (packages) {\n    // `packages` is a list of packages returned by searching for 'jquery'\n  });\n```\n\nCommands emit four types of events: `data`, `end`, `result`, and `error`.\n\n`error` will only be emitted if something goes wrong. Not all commands emit all\nevents; for a detailed look, check out the code in `lib/commands`.\n\n`data` is typically a colorized string, ready to show to an end user. `search`\nand `lookup` emit `packages` and `package`, respectively. Those events contain\na JSON representation of the result of the command.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/master/bin/bower).\n\nFor the install command, there is an additional `package` event that is emitted\nfor each installed/uninstalled package.\n\n\n## Completion (experimental)\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n* [@addyosmani](https://github.com/addyosmani)\n* [@angus-c](https://github.com/angus-c)\n* [@borismus](https://github.com/borismus)\n* [@carsonmcdonald](https://github/@carsonmcdonald)\n* [@chriseppstein](https://github.com/chriseppstein)\n* [@danwrong](https://github.com/danwrong)\n* [@davidmaxwaterman](https://github.com/davidmaxwaterman)\n* [@desandro](https://github.com/desandro)\n* [@hemanth](https://github.com/hemanth)\n* [@isaacs](https://github.com/isaacs)\n* [@josh](https://github.com/josh)\n* [@jrburke](https://github.com/jrburke)\n* [@marcelombc](https://github.com/marcelombc)\n* [@mklabs](https://github.com/mklabs)\n* [@paulirish](https://github.com/paulirish)\n* [@richo](https://github.com/richo)\n* [@rvagg](https://github.com/rvagg)\n* [@sindresorhus](https://github.com/sindresorhus)\n* [@SlexAxton](https://github.com/SlexAxton)\n* [@sstephenson](https://github.com/sstephenson)\n* [@tomdale](https://github.com/tomdale)\n* [@uzquiano](https://github.com/uzquiano)\n* [@visionmedia](https://github.com/visionmedia)\n* [@wagenet](https://github.com/wagenet)\n* [@wibblymat](https://github.com/wibblymat)\n* [@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/bower/issues"},"_id":"bower@0.10.0","dist":{"shasum":"d62ebf3c47644f6875604c68184a21b90f29e973","tarball":"http://registry.npmjs.org/bower/-/bower-0.10.0.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"1.0.0":{"name":"bower","version":"1.0.0","description":"The browser package manager.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/bower.git"},"main":"lib","homepage":"http://bower.io","engines":{"node":">=0.8.0"},"dependencies":{"archy":"0.0.2","abbrev":"~1.0.4","bower-config":"~0.1.0","bower-endpoint-parser":"~0.1.0","bower-json":"~0.1.0","bower-logger":"~0.1.0","bower-registry-client":"~0.1.0","chmodr":"~0.1.0","colors":"~0.6.0-1","fstream":"~0.1.22","fstream-ignore":"~0.0.6","glob":"~3.2.1","graceful-fs":"~2.0.0","handlebars":"~1.0.11","inquirer":"~0.2.2","junk":"~0.2.0","mkdirp":"~0.3.5","mout":"~0.6.0","nopt":"~2.1.1","lru-cache":"~2.3.0","open":"0.0.3","promptly":"~0.2.0","q":"~0.9.2","request":"~2.22.0","request-progress":"~0.2.0","request-replay":"~0.1.2","rimraf":"~2.2.0","semver":"~2.0.8","stringify-object":"~0.1.4","tar":"~0.1.17","tmp":"~0.0.20","unzip":"~0.1.7","update-notifier":"~0.1.3","which":"~1.0.5"},"devDependencies":{"expect.js":"~0.2.0","grunt":"~0.4.1","grunt-simple-mocha":"~0.4.0","grunt-contrib-watch":"~0.5.0","grunt-contrib-jshint":"~0.6.0","grunt-execute":"~0.1.4","grunt-shell":"~0.3.0","mocha":"~1.12.0","nock":"~0.22.0","istanbul":"~0.1.42","proxyquire":"~0.4.1"},"scripts":{"test":"grunt test"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\nAlso make sure that [git](http://git-scm.com/) is installed as some bower\npackages require it to be fetched and installed.\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```bash\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific version of a package\nbower install <package>#<version>\n# Using a different name and a specific version of a package\nbower install <name>=<package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar` files. It's contents will be\n  extracted.\n\n‡ These types of `<package>` might have versions available. You can specify a\n[semver](http://semver.org/) compatible version to fetch a specific release, and lock the\npackage to that version. You can also use ranges to specify a range of versions.\n\nAll package contents are installed in the `bower_components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package:\n\n* There **must** be a valid manifest JSON in the current working directory.\n* Your package should use [semver](http://semver.org/) Git tags.\n* Your package **must** be available at a Git endpoint (e.g., GitHub); remember\n  to push your Git tags!\n\nThen use the following command:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management at this point\nin time. It's on a first come, first served basis. Think of it like a URL\nshortener. Now anyone can run `bower install <my-package-name>`, and get your\nlibrary installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nThe current spec can be read\n[here](https://docs.google.com/document/d/1APq7oA9tNao1UYWyOm8dKqlRP2blVkROYLZ2fLIjtWc/edit#heading=h.4pzytc1f9j8k)\nin the `Configuration` section.\n\n\n## Defining a package\n\nYou must create a `bower.json` in your project's root, and specify all of its\ndependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`,\nand is useful for locking down a project's dependencies.\n\n*NOTE:* In versions of Bower before 0.9.0 the package metadata file was called\n`component.json` rather than `bower.json`. This has changed to avoid a name\nclash with another tool. You can still use `component.json` for now but it is\ndeprecated and the automatic fallback is likely to be removed in an upcoming\nrelease.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--paths` option to Bower's `list` command, you will get a\nsimple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\nAlternatively, every command supports the `--json` option that makes bower\noutput JSON. Command result is outputted to `stdout` and error/logs to\n`stderr`.\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n  .install(paths, options)\n  .on('end', function (data) {\n    if (data) {\n      console.log(data);\n    }\n  });\n\nbower.commands\n  .search('jquery', {})\n  .on('packages', function (packages) {\n    // `packages` is a list of packages returned by searching for 'jquery'\n  });\n```\n\nCommands emit three types of events: `log`, `end`, and `error`.\n\n* `log` is emitted to report the state/progress of the command.\n* `error` will only be emitted if something goes wrong.\n* `end` is emitted when the command successfully ends.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/rewrite/bin/bower).\n\n\n## Completion (experimental)\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n[@addyosmani](https://github.com/addyosmani),\n[@angus-c](https://github.com/angus-c),\n[@borismus](https://github.com/borismus),\n[@carsonmcdonald](https://github.com/carsonmcdonald),\n[@chriseppstein](https://github.com/chriseppstein),\n[@danwrong](https://github.com/danwrong),\n[@davidmaxwaterman](https://github.com/davidmaxwaterman),\n[@desandro](https://github.com/desandro),\n[@hemanth](https://github.com/hemanth),\n[@isaacs](https://github.com/isaacs),\n[@josh](https://github.com/josh),\n[@jrburke](https://github.com/jrburke),\n[@marcelombc](https://github.com/marcelombc),\n[@marcooliveira](https://github.com/marcooliveira),\n[@mklabs](https://github.com/mklabs),\n[@necolas](https://github.com/necolas),\n[@paulirish](https://github.com/paulirish),\n[@richo](https://github.com/richo),\n[@rvagg](https://github.com/rvagg),\n[@sindresorhus](https://github.com/sindresorhus),\n[@SlexAxton](https://github.com/SlexAxton),\n[@sstephenson](https://github.com/sstephenson),\n[@svnlto](https://github.com/svnlto),\n[@tomdale](https://github.com/tomdale),\n[@uzquiano](https://github.com/uzquiano),\n[@visionmedia](https://github.com/visionmedia),\n[@wagenet](https://github.com/wagenet),\n[@wibblymat](https://github.com/wibblymat),\n[@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/bower/issues"},"_id":"bower@1.0.0","dist":{"shasum":"049eebd141f7859cf6dded0818b45be250a6b1a2","tarball":"http://registry.npmjs.org/bower/-/bower-1.0.0.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"1.0.1":{"name":"bower","version":"1.0.1","description":"The browser package manager.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/bower.git"},"main":"lib","homepage":"http://bower.io","engines":{"node":">=0.8.0"},"dependencies":{"archy":"0.0.2","abbrev":"~1.0.4","bower-config":"~0.2.0","bower-endpoint-parser":"~0.2.0","bower-json":"~0.2.0","bower-logger":"~0.1.0","bower-registry-client":"~0.1.1","chmodr":"~0.1.0","colors":"~0.6.0-1","fstream":"~0.1.22","fstream-ignore":"~0.0.6","glob":"~3.2.1","graceful-fs":"~2.0.0","handlebars":"~1.0.11","inquirer":"~0.2.2","junk":"~0.2.0","mkdirp":"~0.3.5","mout":"~0.6.0","nopt":"~2.1.1","lru-cache":"~2.3.0","open":"~0.0.3","promptly":"~0.2.0","q":"~0.9.2","request":"~2.25.0","request-progress":"~0.2.0","request-replay":"~0.1.2","rimraf":"~2.2.0","semver":"~2.0.8","stringify-object":"~0.1.4","sudo-block":"~0.2.0","tar":"~0.1.17","tmp":"~0.0.20","unzip":"~0.1.7","update-notifier":"~0.1.3","which":"~1.0.5"},"devDependencies":{"expect.js":"~0.2.0","grunt":"~0.4.1","grunt-simple-mocha":"~0.4.0","grunt-contrib-watch":"~0.5.0","grunt-contrib-jshint":"~0.6.0","grunt-execute":"~0.1.4","grunt-shell":"~0.3.0","mocha":"~1.12.0","nock":"~0.22.0","istanbul":"~0.1.42","proxyquire":"~0.4.1"},"scripts":{"test":"grunt test"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\nAlso make sure that [git](http://git-scm.com/) is installed as some bower\npackages require it to be fetched and installed.\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n#### Warning\n\nOn `prezto` or `oh-my-zsh`, do not forget to `alias bower='noglob bower'` or `bower install jquery\\#1.9.1`\n\n#### Running commands with sudo\n\nBower is a user command, there is no need to execute it with superuser permissions.\nHowever, if you still want to run commands with sudo, use `--allow-root` option.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```bash\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific version of a package\nbower install <package>#<version>\n# Using a different name and a specific version of a package\nbower install <name>=<package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar` files. It's contents will be\n  extracted.\n\n‡ These types of `<package>` might have versions available. You can specify a\n[semver](http://semver.org/) compatible version to fetch a specific release, and lock the\npackage to that version. You can also use ranges to specify a range of versions.\n\nAll package contents are installed in the `bower_components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package:\n\n* There **must** be a valid manifest JSON in the current working directory.\n* Your package should use [semver](http://semver.org/) Git tags.\n* Your package **must** be available at a Git endpoint (e.g., GitHub); remember\n  to push your Git tags!\n\nThen use the following command:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management at this point\nin time. It's on a first come, first served basis. Think of it like a URL\nshortener. Now anyone can run `bower install <my-package-name>`, and get your\nlibrary installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nThe current spec can be read\n[here](https://docs.google.com/document/d/1APq7oA9tNao1UYWyOm8dKqlRP2blVkROYLZ2fLIjtWc/edit#heading=h.4pzytc1f9j8k)\nin the `Configuration` section.\n\n\n## Defining a package\n\nYou must create a `bower.json` in your project's root, and specify all of its\ndependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`,\nand is useful for locking down a project's dependencies.\n\n*NOTE:* In versions of Bower before 0.9.0 the package metadata file was called\n`component.json` rather than `bower.json`. This has changed to avoid a name\nclash with another tool. You can still use `component.json` for now but it is\ndeprecated and the automatic fallback is likely to be removed in an upcoming\nrelease.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--paths` option to Bower's `list` command, you will get a\nsimple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\nAlternatively, every command supports the `--json` option that makes bower\noutput JSON. Command result is outputted to `stdout` and error/logs to\n`stderr`.\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n.install(paths, options)\n.on('end', function (installed) {\n    console.log(installed);\n});\n\nbower.commands\n.search('jquery', {})\n.on('end', function (results) {\n    console.log(results);\n});\n```\n\nCommands emit three types of events: `log`, `end`, and `error`.\n\n* `log` is emitted to report the state/progress of the command.\n* `error` will only be emitted if something goes wrong.\n* `end` is emitted when the command successfully ends.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/rewrite/bin/bower).\n\n\n## Completion (experimental)\n\n_NOTE_: Completion is still not implemented for the 1.0.0 release\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n[@addyosmani](https://github.com/addyosmani),\n[@angus-c](https://github.com/angus-c),\n[@borismus](https://github.com/borismus),\n[@carsonmcdonald](https://github.com/carsonmcdonald),\n[@chriseppstein](https://github.com/chriseppstein),\n[@danwrong](https://github.com/danwrong),\n[@davidmaxwaterman](https://github.com/davidmaxwaterman),\n[@desandro](https://github.com/desandro),\n[@hemanth](https://github.com/hemanth),\n[@isaacs](https://github.com/isaacs),\n[@josh](https://github.com/josh),\n[@jrburke](https://github.com/jrburke),\n[@marcelombc](https://github.com/marcelombc),\n[@marcooliveira](https://github.com/marcooliveira),\n[@mklabs](https://github.com/mklabs),\n[@necolas](https://github.com/necolas),\n[@paulirish](https://github.com/paulirish),\n[@richo](https://github.com/richo),\n[@rvagg](https://github.com/rvagg),\n[@sindresorhus](https://github.com/sindresorhus),\n[@SlexAxton](https://github.com/SlexAxton),\n[@sstephenson](https://github.com/sstephenson),\n[@svnlto](https://github.com/svnlto),\n[@tomdale](https://github.com/tomdale),\n[@uzquiano](https://github.com/uzquiano),\n[@visionmedia](https://github.com/visionmedia),\n[@wagenet](https://github.com/wagenet),\n[@wibblymat](https://github.com/wibblymat),\n[@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/bower/issues"},"_id":"bower@1.0.1","dist":{"shasum":"2878db9554588fa3ada335c0308467a7ac4f4cab","tarball":"http://registry.npmjs.org/bower/-/bower-1.0.1.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"1.0.2":{"name":"bower","version":"1.0.2","description":"The browser package manager.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/bower.git"},"main":"lib","homepage":"http://bower.io","engines":{"node":">=0.8.0"},"dependencies":{"archy":"0.0.2","abbrev":"~1.0.4","bower-config":"~0.2.0","bower-endpoint-parser":"~0.2.0","bower-json":"~0.2.0","bower-logger":"~0.1.0","bower-registry-client":"~0.1.1","chmodr":"~0.1.0","colors":"~0.6.0-1","fstream":"~0.1.22","fstream-ignore":"~0.0.6","glob":"~3.2.1","graceful-fs":"~2.0.0","handlebars":"~1.0.11","inquirer":"~0.2.2","junk":"~0.2.0","mkdirp":"~0.3.5","mout":"~0.6.0","nopt":"~2.1.1","lru-cache":"~2.3.0","open":"~0.0.3","promptly":"~0.2.0","q":"~0.9.2","request":"~2.25.0","request-progress":"~0.2.0","request-replay":"~0.1.2","rimraf":"~2.2.0","semver":"~2.0.8","stringify-object":"~0.1.4","sudo-block":"~0.2.0","tar":"~0.1.17","tmp":"~0.0.20","unzip":"~0.1.7","update-notifier":"~0.1.3","which":"~1.0.5"},"devDependencies":{"expect.js":"~0.2.0","grunt":"~0.4.1","grunt-simple-mocha":"~0.4.0","grunt-contrib-watch":"~0.5.0","grunt-contrib-jshint":"~0.6.0","grunt-execute":"~0.1.4","grunt-shell":"~0.3.0","mocha":"~1.12.0","nock":"~0.22.0","istanbul":"~0.1.42","proxyquire":"~0.4.1"},"scripts":{"test":"grunt test"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\nAlso make sure that [git](http://git-scm.com/) is installed as some bower\npackages require it to be fetched and installed.\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n#### Warning\n\nOn `prezto` or `oh-my-zsh`, do not forget to `alias bower='noglob bower'` or `bower install jquery\\#1.9.1`\n\n#### Running commands with sudo\n\nBower is a user command, there is no need to execute it with superuser permissions.\nHowever, if you still want to run commands with sudo, use `--allow-root` option.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```bash\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific version of a package\nbower install <package>#<version>\n# Using a different name and a specific version of a package\nbower install <name>=<package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar` files. It's contents will be\n  extracted.\n\n‡ These types of `<package>` might have versions available. You can specify a\n[semver](http://semver.org/) compatible version to fetch a specific release, and lock the\npackage to that version. You can also use ranges to specify a range of versions.\n\nAll package contents are installed in the `bower_components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package:\n\n* There **must** be a valid manifest JSON in the current working directory.\n* Your package should use [semver](http://semver.org/) Git tags.\n* Your package **must** be available at a Git endpoint (e.g., GitHub); remember\n  to push your Git tags!\n\nThen use the following command:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management at this point\nin time. It's on a first come, first served basis. Think of it like a URL\nshortener. Now anyone can run `bower install <my-package-name>`, and get your\nlibrary installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nThe current spec can be read\n[here](https://docs.google.com/document/d/1APq7oA9tNao1UYWyOm8dKqlRP2blVkROYLZ2fLIjtWc/edit#heading=h.4pzytc1f9j8k)\nin the `Configuration` section.\n\n\n## Defining a package\n\nYou must create a `bower.json` in your project's root, and specify all of its\ndependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`,\nand is useful for locking down a project's dependencies.\n\n*NOTE:* In versions of Bower before 0.9.0 the package metadata file was called\n`component.json` rather than `bower.json`. This has changed to avoid a name\nclash with another tool. You can still use `component.json` for now but it is\ndeprecated and the automatic fallback is likely to be removed in an upcoming\nrelease.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--paths` option to Bower's `list` command, you will get a\nsimple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\nAlternatively, every command supports the `--json` option that makes bower\noutput JSON. Command result is outputted to `stdout` and error/logs to\n`stderr`.\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n.install(paths, options)\n.on('end', function (installed) {\n    console.log(installed);\n});\n\nbower.commands\n.search('jquery', {})\n.on('end', function (results) {\n    console.log(results);\n});\n```\n\nCommands emit three types of events: `log`, `end`, and `error`.\n\n* `log` is emitted to report the state/progress of the command.\n* `error` will only be emitted if something goes wrong.\n* `end` is emitted when the command successfully ends.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/rewrite/bin/bower).\n\n\n## Completion (experimental)\n\n_NOTE_: Completion is still not implemented for the 1.0.0 release\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n[@addyosmani](https://github.com/addyosmani),\n[@angus-c](https://github.com/angus-c),\n[@borismus](https://github.com/borismus),\n[@carsonmcdonald](https://github.com/carsonmcdonald),\n[@chriseppstein](https://github.com/chriseppstein),\n[@danwrong](https://github.com/danwrong),\n[@davidmaxwaterman](https://github.com/davidmaxwaterman),\n[@desandro](https://github.com/desandro),\n[@hemanth](https://github.com/hemanth),\n[@isaacs](https://github.com/isaacs),\n[@josh](https://github.com/josh),\n[@jrburke](https://github.com/jrburke),\n[@marcelombc](https://github.com/marcelombc),\n[@marcooliveira](https://github.com/marcooliveira),\n[@mklabs](https://github.com/mklabs),\n[@necolas](https://github.com/necolas),\n[@paulirish](https://github.com/paulirish),\n[@richo](https://github.com/richo),\n[@rvagg](https://github.com/rvagg),\n[@sindresorhus](https://github.com/sindresorhus),\n[@SlexAxton](https://github.com/SlexAxton),\n[@sstephenson](https://github.com/sstephenson),\n[@svnlto](https://github.com/svnlto),\n[@tomdale](https://github.com/tomdale),\n[@uzquiano](https://github.com/uzquiano),\n[@visionmedia](https://github.com/visionmedia),\n[@wagenet](https://github.com/wagenet),\n[@wibblymat](https://github.com/wibblymat),\n[@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/bower/issues"},"_id":"bower@1.0.2","dist":{"shasum":"48e23891ecdcb299dca8c86b29a18bd96a391456","tarball":"http://registry.npmjs.org/bower/-/bower-1.0.2.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"1.0.3":{"name":"bower","version":"1.0.3","description":"The browser package manager.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/bower.git"},"main":"lib","homepage":"http://bower.io","engines":{"node":">=0.8.0"},"dependencies":{"archy":"0.0.2","abbrev":"~1.0.4","bower-config":"~0.2.0","bower-endpoint-parser":"~0.2.0","bower-json":"~0.2.0","bower-logger":"~0.1.0","bower-registry-client":"~0.1.1","chmodr":"~0.1.0","colors":"~0.6.0-1","fstream":"~0.1.22","fstream-ignore":"~0.0.6","glob":"~3.2.1","graceful-fs":"~2.0.0","handlebars":"~1.0.11","inquirer":"~0.2.2","junk":"~0.2.0","mkdirp":"~0.3.5","mout":"~0.6.0","nopt":"~2.1.1","lru-cache":"~2.3.0","open":"~0.0.3","promptly":"~0.2.0","q":"~0.9.2","request":"~2.25.0","request-progress":"~0.2.0","request-replay":"~0.1.2","rimraf":"~2.2.0","semver":"~2.0.8","stringify-object":"~0.1.4","sudo-block":"~0.2.0","tar":"~0.1.17","tmp":"~0.0.20","unzip":"~0.1.7","update-notifier":"~0.1.3","which":"~1.0.5"},"devDependencies":{"expect.js":"~0.2.0","grunt":"~0.4.1","grunt-simple-mocha":"~0.4.0","grunt-contrib-watch":"~0.5.0","grunt-contrib-jshint":"~0.6.0","grunt-execute":"~0.1.4","grunt-shell":"~0.3.0","mocha":"~1.12.0","nock":"~0.22.0","istanbul":"~0.1.42","proxyquire":"~0.4.1"},"scripts":{"test":"grunt test"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\nAlso make sure that [git](http://git-scm.com/) is installed as some bower\npackages require it to be fetched and installed.\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n#### Warning\n\nOn `prezto` or `oh-my-zsh`, do not forget to `alias bower='noglob bower'` or `bower install jquery\\#1.9.1`\n\n#### Running commands with sudo\n\nBower is a user command, there is no need to execute it with superuser permissions.\nHowever, if you still want to run commands with sudo, use `--allow-root` option.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```bash\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific version of a package\nbower install <package>#<version>\n# Using a different name and a specific version of a package\nbower install <name>=<package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar` files. It's contents will be\n  extracted.\n\n‡ These types of `<package>` might have versions available. You can specify a\n[semver](http://semver.org/) compatible version to fetch a specific release, and lock the\npackage to that version. You can also use ranges to specify a range of versions.\n\nAll package contents are installed in the `bower_components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package:\n\n* There **must** be a valid manifest JSON in the current working directory.\n* Your package should use [semver](http://semver.org/) Git tags.\n* Your package **must** be available at a Git endpoint (e.g., GitHub); remember\n  to push your Git tags!\n\nThen use the following command:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management at this point\nin time. It's on a first come, first served basis. Think of it like a URL\nshortener. Now anyone can run `bower install <my-package-name>`, and get your\nlibrary installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nThe current spec can be read\n[here](https://docs.google.com/document/d/1APq7oA9tNao1UYWyOm8dKqlRP2blVkROYLZ2fLIjtWc/edit#heading=h.4pzytc1f9j8k)\nin the `Configuration` section.\n\n\n## Defining a package\n\nYou must create a `bower.json` in your project's root, and specify all of its\ndependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`,\nand is useful for locking down a project's dependencies.\n\n*NOTE:* In versions of Bower before 0.9.0 the package metadata file was called\n`component.json` rather than `bower.json`. This has changed to avoid a name\nclash with another tool. You can still use `component.json` for now but it is\ndeprecated and the automatic fallback is likely to be removed in an upcoming\nrelease.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--paths` option to Bower's `list` command, you will get a\nsimple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\nAlternatively, every command supports the `--json` option that makes bower\noutput JSON. Command result is outputted to `stdout` and error/logs to\n`stderr`.\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n.install(paths, options)\n.on('end', function (installed) {\n    console.log(installed);\n});\n\nbower.commands\n.search('jquery', {})\n.on('end', function (results) {\n    console.log(results);\n});\n```\n\nCommands emit three types of events: `log`, `end`, and `error`.\n\n* `log` is emitted to report the state/progress of the command.\n* `error` will only be emitted if something goes wrong.\n* `end` is emitted when the command successfully ends.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/rewrite/bin/bower).\n\n\n## Completion (experimental)\n\n_NOTE_: Completion is still not implemented for the 1.0.0 release\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n[@addyosmani](https://github.com/addyosmani),\n[@angus-c](https://github.com/angus-c),\n[@borismus](https://github.com/borismus),\n[@carsonmcdonald](https://github.com/carsonmcdonald),\n[@chriseppstein](https://github.com/chriseppstein),\n[@danwrong](https://github.com/danwrong),\n[@davidmaxwaterman](https://github.com/davidmaxwaterman),\n[@desandro](https://github.com/desandro),\n[@hemanth](https://github.com/hemanth),\n[@isaacs](https://github.com/isaacs),\n[@josh](https://github.com/josh),\n[@jrburke](https://github.com/jrburke),\n[@marcelombc](https://github.com/marcelombc),\n[@marcooliveira](https://github.com/marcooliveira),\n[@mklabs](https://github.com/mklabs),\n[@necolas](https://github.com/necolas),\n[@paulirish](https://github.com/paulirish),\n[@richo](https://github.com/richo),\n[@rvagg](https://github.com/rvagg),\n[@sindresorhus](https://github.com/sindresorhus),\n[@SlexAxton](https://github.com/SlexAxton),\n[@sstephenson](https://github.com/sstephenson),\n[@svnlto](https://github.com/svnlto),\n[@tomdale](https://github.com/tomdale),\n[@uzquiano](https://github.com/uzquiano),\n[@visionmedia](https://github.com/visionmedia),\n[@wagenet](https://github.com/wagenet),\n[@wibblymat](https://github.com/wibblymat),\n[@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/bower/issues"},"_id":"bower@1.0.3","dist":{"shasum":"30221d521ebeb7243ced1fefafa83c4910ea30d6","tarball":"http://registry.npmjs.org/bower/-/bower-1.0.3.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"1.1.0":{"name":"bower","version":"1.1.0","description":"The browser package manager.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/bower.git"},"main":"lib","homepage":"http://bower.io","engines":{"node":">=0.8.0"},"dependencies":{"abbrev":"~1.0.4","ansicolors":"~0.2.1","archy":"0.0.2","bower-config":"~0.2.0","bower-endpoint-parser":"~0.2.0","bower-json":"~0.2.0","bower-logger":"~0.1.0","bower-registry-client":"~0.1.2","cardinal":"~0.4.0","chmodr":"~0.1.0","colors":"~0.6.0-1","fstream":"~0.1.22","fstream-ignore":"~0.0.6","glob":"~3.2.1","graceful-fs":"~2.0.0","handlebars":"~1.0.11","inquirer":"~0.2.2","junk":"~0.2.0","mkdirp":"~0.3.5","mout":"~0.6.0","nopt":"~2.1.1","lru-cache":"~2.3.0","open":"~0.0.3","promptly":"~0.2.0","q":"~0.9.2","request":"~2.25.0","request-progress":"~0.2.0","retry":"~0.6.0","rimraf":"~2.2.0","semver":"~2.1.0","stringify-object":"~0.1.4","sudo-block":"~0.2.0","tar":"~0.1.17","tmp":"~0.0.20","unzip":"~0.1.7","update-notifier":"~0.1.3","which":"~1.0.5"},"devDependencies":{"expect.js":"~0.2.0","grunt":"~0.4.1","grunt-simple-mocha":"~0.4.0","grunt-contrib-watch":"~0.5.0","grunt-contrib-jshint":"~0.6.0","grunt-execute":"~0.1.4","grunt-shell":"~0.3.0","mocha":"~1.12.0","nock":"~0.22.0","istanbul":"~0.1.42","proxyquire":"~0.4.1"},"scripts":{"test":"grunt test"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\nAlso make sure that [git](http://git-scm.com/) is installed as some bower\npackages require it to be fetched and installed.\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n#### Warning\n\nOn `prezto` or `oh-my-zsh`, do not forget to `alias bower='noglob bower'` or `bower install jquery\\#1.9.1`\n\n#### Running commands with sudo\n\nBower is a user command, there is no need to execute it with superuser permissions.\nHowever, if you still want to run commands with sudo, use `--allow-root` option.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```bash\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific version of a package\nbower install <package>#<version>\n# Using a different name and a specific version of a package\nbower install <name>=<package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar` files. It's contents will be\n  extracted.\n\n‡ These types of `<package>` might have versions available. You can specify a\n[semver](http://semver.org/) compatible version to fetch a specific release, and lock the\npackage to that version. You can also use ranges to specify a range of versions.\n\nAll package contents are installed in the `bower_components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package:\n\n* There **must** be a valid manifest JSON in the current working directory.\n* Your package should use [semver](http://semver.org/) Git tags.\n* Your package **must** be available at a Git endpoint (e.g., GitHub); remember\n  to push your Git tags!\n\nThen use the following command:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management at this point\nin time. It's on a first come, first served basis. Think of it like a URL\nshortener. Now anyone can run `bower install <my-package-name>`, and get your\nlibrary installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nThe current spec can be read\n[here](https://docs.google.com/document/d/1APq7oA9tNao1UYWyOm8dKqlRP2blVkROYLZ2fLIjtWc/edit#heading=h.4pzytc1f9j8k)\nin the `Configuration` section.\n\n\n## Defining a package\n\nYou must create a `bower.json` in your project's root, and specify all of its\ndependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`,\nand is useful for locking down a project's dependencies.\n\n*NOTE:* In versions of Bower before 0.9.0 the package metadata file was called\n`component.json` rather than `bower.json`. This has changed to avoid a name\nclash with another tool. You can still use `component.json` for now but it is\ndeprecated and the automatic fallback is likely to be removed in an upcoming\nrelease.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n* `private` [boolean]: Set to true if you want to keep the package private and \n  do not want to register the package in future.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--paths` option to Bower's `list` command, you will get a\nsimple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\nAlternatively, every command supports the `--json` option that makes bower\noutput JSON. Command result is outputted to `stdout` and error/logs to\n`stderr`.\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n.install(paths, options)\n.on('end', function (installed) {\n    console.log(installed);\n});\n\nbower.commands\n.search('jquery', {})\n.on('end', function (results) {\n    console.log(results);\n});\n```\n\nCommands emit three types of events: `log`, `end`, and `error`.\n\n* `log` is emitted to report the state/progress of the command.\n* `error` will only be emitted if something goes wrong.\n* `end` is emitted when the command successfully ends.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/rewrite/bin/bower).\n\n\n## Completion (experimental)\n\n_NOTE_: Completion is still not implemented for the 1.0.0 release\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n[@addyosmani](https://github.com/addyosmani),\n[@angus-c](https://github.com/angus-c),\n[@borismus](https://github.com/borismus),\n[@carsonmcdonald](https://github.com/carsonmcdonald),\n[@chriseppstein](https://github.com/chriseppstein),\n[@danwrong](https://github.com/danwrong),\n[@davidmaxwaterman](https://github.com/davidmaxwaterman),\n[@desandro](https://github.com/desandro),\n[@hemanth](https://github.com/hemanth),\n[@isaacs](https://github.com/isaacs),\n[@josh](https://github.com/josh),\n[@jrburke](https://github.com/jrburke),\n[@marcelombc](https://github.com/marcelombc),\n[@marcooliveira](https://github.com/marcooliveira),\n[@mklabs](https://github.com/mklabs),\n[@necolas](https://github.com/necolas),\n[@paulirish](https://github.com/paulirish),\n[@richo](https://github.com/richo),\n[@rvagg](https://github.com/rvagg),\n[@sindresorhus](https://github.com/sindresorhus),\n[@SlexAxton](https://github.com/SlexAxton),\n[@sstephenson](https://github.com/sstephenson),\n[@svnlto](https://github.com/svnlto),\n[@tomdale](https://github.com/tomdale),\n[@uzquiano](https://github.com/uzquiano),\n[@visionmedia](https://github.com/visionmedia),\n[@wagenet](https://github.com/wagenet),\n[@wibblymat](https://github.com/wibblymat),\n[@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/bower/issues"},"_id":"bower@1.1.0","dist":{"shasum":"fd30de015c254d53ddf2abd7ca086a36e1db64cd","tarball":"http://registry.npmjs.org/bower/-/bower-1.1.0.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"1.1.1":{"name":"bower","version":"1.1.1","description":"The browser package manager.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/bower.git"},"main":"lib","homepage":"http://bower.io","engines":{"node":">=0.8.0"},"dependencies":{"abbrev":"~1.0.4","archy":"0.0.2","bower-config":"~0.3.0","bower-endpoint-parser":"~0.2.0","bower-json":"~0.3.0","bower-logger":"~0.1.0","bower-registry-client":"~0.1.2","cardinal":"~0.4.0","chalk":"~0.2.0","chmodr":"~0.1.0","fstream":"~0.1.22","fstream-ignore":"~0.0.6","glob":"~3.2.1","graceful-fs":"~2.0.0","handlebars":"~1.0.11","inquirer":"~0.2.2","junk":"~0.2.0","mkdirp":"~0.3.5","mout":"~0.6.0","nopt":"~2.1.1","lru-cache":"~2.3.0","open":"~0.0.3","promptly":"~0.2.0","q":"~0.9.2","request":"~2.25.0","request-progress":"~0.2.0","retry":"~0.6.0","rimraf":"~2.2.0","semver":"~2.1.0","stringify-object":"~0.1.4","sudo-block":"~0.2.0","tar":"~0.1.17","tmp":"~0.0.20","unzip":"~0.1.7","update-notifier":"~0.1.3","which":"~1.0.5"},"devDependencies":{"expect.js":"~0.2.0","grunt":"~0.4.1","grunt-simple-mocha":"~0.4.0","grunt-contrib-watch":"~0.5.0","grunt-contrib-jshint":"~0.6.0","grunt-exec":"~0.4.2","mocha":"~1.12.0","nock":"~0.22.0","istanbul":"~0.1.42","proxyquire":"~0.4.1"},"scripts":{"test":"grunt test"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\nAlso make sure that [git](http://git-scm.com/) is installed as some bower\npackages require it to be fetched and installed.\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n#### Warning\n\nOn `prezto` or `oh-my-zsh`, do not forget to `alias bower='noglob bower'` or `bower install jquery\\#1.9.1`\n\n#### Running commands with sudo\n\nBower is a user command, there is no need to execute it with superuser permissions.\nHowever, if you still want to run commands with sudo, use `--allow-root` option.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```bash\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific version of a package\nbower install <package>#<version>\n# Using a different name and a specific version of a package\nbower install <name>=<package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar` files. Its contents will be\n  extracted.\n\n‡ These types of `<package>` might have versions available. You can specify a\n[semver](http://semver.org/) compatible version to fetch a specific release, and lock the\npackage to that version. You can also use ranges to specify a range of versions.\n\nAll package contents are installed in the `bower_components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package:\n\n* There **must** be a valid manifest JSON in the current working directory.\n* Your package should use [semver](http://semver.org/) Git tags.\n* Your package **must** be available at a Git endpoint (e.g., GitHub); remember\n  to push your Git tags!\n\nThen use the following command:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management at this point\nin time. It's on a first come, first served basis. Think of it like a URL\nshortener. Now anyone can run `bower install <my-package-name>`, and get your\nlibrary installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nThe current spec can be read\n[here](https://docs.google.com/document/d/1APq7oA9tNao1UYWyOm8dKqlRP2blVkROYLZ2fLIjtWc/edit#heading=h.4pzytc1f9j8k)\nin the `Configuration` section.\n\n\n## Defining a package\n\nYou must create a `bower.json` in your project's root, and specify all of its\ndependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`,\nand is useful for locking down a project's dependencies.\n\n*NOTE:* In versions of Bower before 0.9.0 the package metadata file was called\n`component.json` rather than `bower.json`. This has changed to avoid a name\nclash with another tool. You can still use `component.json` for now but it is\ndeprecated and the automatic fallback is likely to be removed in an upcoming\nrelease.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n* `private` [boolean]: Set to true if you want to keep the package private and \n  do not want to register the package in future.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--paths` option to Bower's `list` command, you will get a\nsimple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\nAlternatively, every command supports the `--json` option that makes bower\noutput JSON. Command result is outputted to `stdout` and error/logs to\n`stderr`.\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n.install(paths, options)\n.on('end', function (installed) {\n    console.log(installed);\n});\n\nbower.commands\n.search('jquery', {})\n.on('end', function (results) {\n    console.log(results);\n});\n```\n\nCommands emit three types of events: `log`, `end`, and `error`.\n\n* `log` is emitted to report the state/progress of the command.\n* `error` will only be emitted if something goes wrong.\n* `end` is emitted when the command successfully ends.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/master/bin/bower).\n\n\n## Completion (experimental)\n\n_NOTE_: Completion is still not implemented for the 1.0.0 release\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n[@addyosmani](https://github.com/addyosmani),\n[@angus-c](https://github.com/angus-c),\n[@borismus](https://github.com/borismus),\n[@carsonmcdonald](https://github.com/carsonmcdonald),\n[@chriseppstein](https://github.com/chriseppstein),\n[@danwrong](https://github.com/danwrong),\n[@davidmaxwaterman](https://github.com/davidmaxwaterman),\n[@desandro](https://github.com/desandro),\n[@hemanth](https://github.com/hemanth),\n[@isaacs](https://github.com/isaacs),\n[@josh](https://github.com/josh),\n[@jrburke](https://github.com/jrburke),\n[@marcelombc](https://github.com/marcelombc),\n[@marcooliveira](https://github.com/marcooliveira),\n[@mklabs](https://github.com/mklabs),\n[@necolas](https://github.com/necolas),\n[@paulirish](https://github.com/paulirish),\n[@richo](https://github.com/richo),\n[@rvagg](https://github.com/rvagg),\n[@sindresorhus](https://github.com/sindresorhus),\n[@SlexAxton](https://github.com/SlexAxton),\n[@sstephenson](https://github.com/sstephenson),\n[@svnlto](https://github.com/svnlto),\n[@tomdale](https://github.com/tomdale),\n[@uzquiano](https://github.com/uzquiano),\n[@visionmedia](https://github.com/visionmedia),\n[@wagenet](https://github.com/wagenet),\n[@wibblymat](https://github.com/wibblymat),\n[@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/bower/issues"},"_id":"bower@1.1.1","dist":{"shasum":"d3ac38b690c61460a76ebc5ddecd9e5ec8d65b75","tarball":"http://registry.npmjs.org/bower/-/bower-1.1.1.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"1.1.2":{"name":"bower","version":"1.1.2","description":"The browser package manager.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/bower.git"},"main":"lib","homepage":"http://bower.io","engines":{"node":">=0.8.0"},"dependencies":{"abbrev":"~1.0.4","archy":"0.0.2","bower-config":"~0.3.0","bower-endpoint-parser":"~0.2.0","bower-json":"~0.3.0","bower-logger":"~0.1.0","bower-registry-client":"~0.1.2","cardinal":"~0.4.0","chalk":"~0.2.0","chmodr":"~0.1.0","fstream":"~0.1.22","fstream-ignore":"~0.0.6","glob":"~3.2.1","graceful-fs":"~2.0.0","handlebars":"~1.0.11","inquirer":"~0.2.2","junk":"~0.2.0","mkdirp":"~0.3.5","mout":"~0.6.0","nopt":"~2.1.1","lru-cache":"~2.3.0","open":"~0.0.3","promptly":"~0.2.0","q":"~0.9.2","request":"~2.25.0","request-progress":"~0.2.0","retry":"~0.6.0","rimraf":"~2.2.0","semver":"~2.1.0","stringify-object":"~0.1.4","sudo-block":"~0.2.0","tar":"~0.1.17","tmp":"~0.0.20","unzip":"~0.1.7","update-notifier":"~0.1.3","which":"~1.0.5"},"devDependencies":{"expect.js":"~0.2.0","grunt":"~0.4.1","grunt-simple-mocha":"~0.4.0","grunt-contrib-watch":"~0.5.0","grunt-contrib-jshint":"~0.6.0","grunt-exec":"~0.4.2","mocha":"~1.12.0","nock":"~0.22.0","istanbul":"~0.1.42","proxyquire":"~0.4.1"},"scripts":{"test":"grunt test"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\nAlso make sure that [git](http://git-scm.com/) is installed as some bower\npackages require it to be fetched and installed.\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n#### Warning\n\nOn `prezto` or `oh-my-zsh`, do not forget to `alias bower='noglob bower'` or `bower install jquery\\#1.9.1`\n\n#### Running commands with sudo\n\nBower is a user command, there is no need to execute it with superuser permissions.\nHowever, if you still want to run commands with sudo, use `--allow-root` option.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```bash\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific version of a package\nbower install <package>#<version>\n# Using a different name and a specific version of a package\nbower install <name>=<package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar` files. Its contents will be\n  extracted.\n\n‡ These types of `<package>` might have versions available. You can specify a\n[semver](http://semver.org/) compatible version to fetch a specific release, and lock the\npackage to that version. You can also use ranges to specify a range of versions.\n\nAll package contents are installed in the `bower_components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package:\n\n* There **must** be a valid manifest JSON in the current working directory.\n* Your package should use [semver](http://semver.org/) Git tags.\n* Your package **must** be available at a Git endpoint (e.g., GitHub); remember\n  to push your Git tags!\n\nThen use the following command:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management at this point\nin time. It's on a first come, first served basis. Think of it like a URL\nshortener. Now anyone can run `bower install <my-package-name>`, and get your\nlibrary installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nThe current spec can be read\n[here](https://docs.google.com/document/d/1APq7oA9tNao1UYWyOm8dKqlRP2blVkROYLZ2fLIjtWc/edit#heading=h.4pzytc1f9j8k)\nin the `Configuration` section.\n\n\n## Defining a package\n\nYou must create a `bower.json` in your project's root, and specify all of its\ndependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`,\nand is useful for locking down a project's dependencies.\n\n*NOTE:* In versions of Bower before 0.9.0 the package metadata file was called\n`component.json` rather than `bower.json`. This has changed to avoid a name\nclash with another tool. You can still use `component.json` for now but it is\ndeprecated and the automatic fallback is likely to be removed in an upcoming\nrelease.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n* `private` [boolean]: Set to true if you want to keep the package private and \n  do not want to register the package in future.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--paths` option to Bower's `list` command, you will get a\nsimple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\nAlternatively, every command supports the `--json` option that makes bower\noutput JSON. Command result is outputted to `stdout` and error/logs to\n`stderr`.\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n.install(paths, options)\n.on('end', function (installed) {\n    console.log(installed);\n});\n\nbower.commands\n.search('jquery', {})\n.on('end', function (results) {\n    console.log(results);\n});\n```\n\nCommands emit three types of events: `log`, `end`, and `error`.\n\n* `log` is emitted to report the state/progress of the command.\n* `error` will only be emitted if something goes wrong.\n* `end` is emitted when the command successfully ends.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/master/bin/bower).\n\n\n## Completion (experimental)\n\n_NOTE_: Completion is still not implemented for the 1.0.0 release\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n[@addyosmani](https://github.com/addyosmani),\n[@angus-c](https://github.com/angus-c),\n[@borismus](https://github.com/borismus),\n[@carsonmcdonald](https://github.com/carsonmcdonald),\n[@chriseppstein](https://github.com/chriseppstein),\n[@danwrong](https://github.com/danwrong),\n[@davidmaxwaterman](https://github.com/davidmaxwaterman),\n[@desandro](https://github.com/desandro),\n[@hemanth](https://github.com/hemanth),\n[@isaacs](https://github.com/isaacs),\n[@josh](https://github.com/josh),\n[@jrburke](https://github.com/jrburke),\n[@marcelombc](https://github.com/marcelombc),\n[@marcooliveira](https://github.com/marcooliveira),\n[@mklabs](https://github.com/mklabs),\n[@necolas](https://github.com/necolas),\n[@paulirish](https://github.com/paulirish),\n[@richo](https://github.com/richo),\n[@rvagg](https://github.com/rvagg),\n[@sindresorhus](https://github.com/sindresorhus),\n[@SlexAxton](https://github.com/SlexAxton),\n[@sstephenson](https://github.com/sstephenson),\n[@svnlto](https://github.com/svnlto),\n[@tomdale](https://github.com/tomdale),\n[@uzquiano](https://github.com/uzquiano),\n[@visionmedia](https://github.com/visionmedia),\n[@wagenet](https://github.com/wagenet),\n[@wibblymat](https://github.com/wibblymat),\n[@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/bower/issues"},"_id":"bower@1.1.2","dist":{"shasum":"89c8d5c75b8359e06fc6a6e3cf4105c3bd6946a1","tarball":"http://registry.npmjs.org/bower/-/bower-1.1.2.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"1.2.0":{"name":"bower","version":"1.2.0","description":"The browser package manager.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/bower.git"},"main":"lib","homepage":"http://bower.io","engines":{"node":">=0.8.0"},"dependencies":{"abbrev":"~1.0.4","archy":"0.0.2","bower-config":"~0.4.0","bower-endpoint-parser":"~0.2.0","bower-json":"~0.4.0","bower-logger":"~0.2.0","bower-registry-client":"~0.1.2","cardinal":"~0.4.0","chalk":"~0.2.0","chmodr":"~0.1.0","fstream":"~0.1.22","fstream-ignore":"~0.0.6","glob":"~3.2.1","graceful-fs":"~2.0.0","handlebars":"~1.0.11","inquirer":"~0.2.2","junk":"~0.2.0","mkdirp":"~0.3.5","mout":"~0.6.0","nopt":"~2.1.1","lru-cache":"~2.3.0","open":"~0.0.3","promptly":"~0.2.0","q":"~0.9.2","request":"~2.25.0","request-progress":"~0.2.0","retry":"~0.6.0","rimraf":"~2.2.0","semver":"~2.1.0","stringify-object":"~0.1.4","sudo-block":"~0.2.0","tar":"~0.1.17","tmp":"~0.0.20","unzip":"~0.1.7","update-notifier":"~0.1.3","which":"~1.0.5"},"devDependencies":{"expect.js":"~0.2.0","grunt":"~0.4.1","grunt-simple-mocha":"~0.4.0","grunt-contrib-watch":"~0.5.0","grunt-contrib-jshint":"~0.6.0","grunt-exec":"~0.4.2","mocha":"~1.12.0","nock":"~0.22.0","istanbul":"~0.1.42","proxyquire":"~0.4.1"},"scripts":{"test":"grunt test"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\nAlso make sure that [git](http://git-scm.com/) is installed as some bower\npackages require it to be fetched and installed.\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n#### Warning\n\nOn `prezto` or `oh-my-zsh`, do not forget to `alias bower='noglob bower'` or `bower install jquery\\#1.9.1`\n\n#### Running commands with sudo\n\nBower is a user command, there is no need to execute it with superuser permissions.\nHowever, if you still want to run commands with sudo, use `--allow-root` option.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific version of a package\nbower install <package>#<version>\n# Using a different name and a specific version of a package\nbower install <name>=<package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar` files. Its contents will be\n  extracted.\n\n‡ These types of `<package>` might have versions available. You can specify a\n[semver](http://semver.org/) compatible version to fetch a specific release, and lock the\npackage to that version. You can also use ranges to specify a range of versions.\n\nAll package contents are installed in the `bower_components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package:\n\n* There **must** be a valid manifest JSON in the current working directory.\n* Your package should use [semver](http://semver.org/) Git tags.\n* Your package **must** be available at a Git endpoint (e.g., GitHub); remember\n  to push your Git tags!\n\nThen use the following command:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management at this point\nin time. It's on a first come, first served basis. Think of it like a URL\nshortener. Now anyone can run `bower install <my-package-name>`, and get your\nlibrary installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nThe current spec can be read\n[here](https://docs.google.com/document/d/1APq7oA9tNao1UYWyOm8dKqlRP2blVkROYLZ2fLIjtWc/edit#heading=h.4pzytc1f9j8k)\nin the `Configuration` section.\n\n\n## Defining a package\n\nYou must create a `bower.json` in your project's root, and specify all of its\ndependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`,\nand is useful for locking down a project's dependencies.\n\n*NOTE:* In versions of Bower before 0.9.0 the package metadata file was called\n`component.json` rather than `bower.json`. This has changed to avoid a name\nclash with another tool. You can still use `component.json` for now but it is\ndeprecated and the automatic fallback is likely to be removed in an upcoming\nrelease.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n* `private` [boolean]: Set to true if you want to keep the package private and \n  do not want to register the package in future.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--paths` option to Bower's `list` command, you will get a\nsimple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\nAlternatively, every command supports the `--json` option that makes bower\noutput JSON. Command result is outputted to `stdout` and error/logs to\n`stderr`.\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n.install(['jquery'], { save: true }, { /* custom config */ })\n.on('end', function (installed) {\n    console.log(installed);\n});\n\nbower.commands\n.search('jquery', {})\n.on('end', function (results) {\n    console.log(results);\n});\n```\n\nCommands emit four types of events: `log`, `prompt`, `end`, `error`.\n\n* `log` is emitted to report the state/progress of the command.\n* `prompt` is emitted whenever the user needs to be prompted.\n* `error` will only be emitted if something goes wrong.\n* `end` is emitted when the command successfully ends.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/master/bin/bower).\n\nWhen using bower programmatically, prompting is disabled by default. Though you can enable it when calling commands with `interactive: true` in the config.\nThis requires you to listen for the `prompt` event and handle the prompting yourself. The easiest way is to use the [inquirer](https://npmjs.org/package/inquirer) npm module like so:\n\n```js\nvar inquirer =  require('inquirer');\n\nbower.commands\n.install(['jquery'], { save: true }, { interactive: true })\n// ..\n.on('prompt', function (prompts, callback) {\n    inquirer.prompt(prompts, function (answers) {\n        callback(answers);\n    });\n});\n```\n\n\n## Completion (experimental)\n\n_NOTE_: Completion is still not implemented for the 1.0.0 release\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n[@addyosmani](https://github.com/addyosmani),\n[@angus-c](https://github.com/angus-c),\n[@borismus](https://github.com/borismus),\n[@carsonmcdonald](https://github.com/carsonmcdonald),\n[@chriseppstein](https://github.com/chriseppstein),\n[@danwrong](https://github.com/danwrong),\n[@davidmaxwaterman](https://github.com/davidmaxwaterman),\n[@desandro](https://github.com/desandro),\n[@hemanth](https://github.com/hemanth),\n[@isaacs](https://github.com/isaacs),\n[@josh](https://github.com/josh),\n[@jrburke](https://github.com/jrburke),\n[@marcelombc](https://github.com/marcelombc),\n[@marcooliveira](https://github.com/marcooliveira),\n[@mklabs](https://github.com/mklabs),\n[@MrDHat](https://github.com/MrDHat),\n[@necolas](https://github.com/necolas),\n[@paulirish](https://github.com/paulirish),\n[@richo](https://github.com/richo),\n[@rvagg](https://github.com/rvagg),\n[@sindresorhus](https://github.com/sindresorhus),\n[@SlexAxton](https://github.com/SlexAxton),\n[@sstephenson](https://github.com/sstephenson),\n[@svnlto](https://github.com/svnlto),\n[@tomdale](https://github.com/tomdale),\n[@uzquiano](https://github.com/uzquiano),\n[@visionmedia](https://github.com/visionmedia),\n[@wagenet](https://github.com/wagenet),\n[@wibblymat](https://github.com/wibblymat),\n[@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/bower/issues"},"_id":"bower@1.2.0","dist":{"shasum":"8ec3d0feb4dc2ea5d995f76801a7063ff497b8c3","tarball":"http://registry.npmjs.org/bower/-/bower-1.2.0.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"1.2.1":{"name":"bower","version":"1.2.1","description":"The browser package manager.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/bower.git"},"main":"lib","homepage":"http://bower.io","engines":{"node":">=0.8.0"},"dependencies":{"abbrev":"~1.0.4","archy":"0.0.2","bower-config":"~0.4.0","bower-endpoint-parser":"~0.2.0","bower-json":"~0.4.0","bower-logger":"~0.2.0","bower-registry-client":"~0.1.2","cardinal":"~0.4.0","chalk":"~0.2.0","chmodr":"~0.1.0","fstream":"~0.1.22","fstream-ignore":"~0.0.6","glob":"~3.2.1","graceful-fs":"~2.0.0","handlebars":"~1.0.11","inquirer":"~0.2.2","junk":"~0.2.0","mkdirp":"~0.3.5","mout":"~0.6.0","nopt":"~2.1.1","lru-cache":"~2.3.0","open":"~0.0.3","promptly":"~0.2.0","q":"~0.9.2","request":"~2.25.0","request-progress":"~0.2.0","retry":"~0.6.0","rimraf":"~2.2.0","semver":"~2.1.0","stringify-object":"~0.1.4","sudo-block":"~0.2.0","tar":"~0.1.17","tmp":"~0.0.20","unzip":"~0.1.7","update-notifier":"~0.1.3","which":"~1.0.5"},"devDependencies":{"expect.js":"~0.2.0","grunt":"~0.4.1","grunt-simple-mocha":"~0.4.0","grunt-contrib-watch":"~0.5.0","grunt-contrib-jshint":"~0.6.0","grunt-exec":"~0.4.2","mocha":"~1.12.0","nock":"~0.22.0","istanbul":"~0.1.42","proxyquire":"~0.4.1"},"scripts":{"test":"grunt test"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\nAlso make sure that [git](http://git-scm.com/) is installed as some bower\npackages require it to be fetched and installed.\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n#### Warning\n\nOn `prezto` or `oh-my-zsh`, do not forget to `alias bower='noglob bower'` or `bower install jquery\\#1.9.1`\n\n#### Running commands with sudo\n\nBower is a user command, there is no need to execute it with superuser permissions.\nHowever, if you still want to run commands with sudo, use `--allow-root` option.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific version of a package\nbower install <package>#<version>\n# Using a different name and a specific version of a package\nbower install <name>=<package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar` files. Its contents will be\n  extracted.\n\n‡ These types of `<package>` might have versions available. You can specify a\n[semver](http://semver.org/) compatible version to fetch a specific release, and lock the\npackage to that version. You can also use ranges to specify a range of versions.\n\nAll package contents are installed in the `bower_components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package:\n\n* There **must** be a valid manifest JSON in the current working directory.\n* Your package should use [semver](http://semver.org/) Git tags.\n* Your package **must** be available at a Git endpoint (e.g., GitHub); remember\n  to push your Git tags!\n\nThen use the following command:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management at this point\nin time. It's on a first come, first served basis. Think of it like a URL\nshortener. Now anyone can run `bower install <my-package-name>`, and get your\nlibrary installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nThe current spec can be read\n[here](https://docs.google.com/document/d/1APq7oA9tNao1UYWyOm8dKqlRP2blVkROYLZ2fLIjtWc/edit#heading=h.4pzytc1f9j8k)\nin the `Configuration` section.\n\n\n## Defining a package\n\nYou must create a `bower.json` in your project's root, and specify all of its\ndependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`,\nand is useful for locking down a project's dependencies.\n\n*NOTE:* In versions of Bower before 0.9.0 the package metadata file was called\n`component.json` rather than `bower.json`. This has changed to avoid a name\nclash with another tool. You can still use `component.json` for now but it is\ndeprecated and the automatic fallback is likely to be removed in an upcoming\nrelease.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n* `private` [boolean]: Set to true if you want to keep the package private and \n  do not want to register the package in future.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--paths` option to Bower's `list` command, you will get a\nsimple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\nAlternatively, every command supports the `--json` option that makes bower\noutput JSON. Command result is outputted to `stdout` and error/logs to\n`stderr`.\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n.install(['jquery'], { save: true }, { /* custom config */ })\n.on('end', function (installed) {\n    console.log(installed);\n});\n\nbower.commands\n.search('jquery', {})\n.on('end', function (results) {\n    console.log(results);\n});\n```\n\nCommands emit four types of events: `log`, `prompt`, `end`, `error`.\n\n* `log` is emitted to report the state/progress of the command.\n* `prompt` is emitted whenever the user needs to be prompted.\n* `error` will only be emitted if something goes wrong.\n* `end` is emitted when the command successfully ends.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/master/bin/bower).\n\nWhen using bower programmatically, prompting is disabled by default. Though you can enable it when calling commands with `interactive: true` in the config.\nThis requires you to listen for the `prompt` event and handle the prompting yourself. The easiest way is to use the [inquirer](https://npmjs.org/package/inquirer) npm module like so:\n\n```js\nvar inquirer =  require('inquirer');\n\nbower.commands\n.install(['jquery'], { save: true }, { interactive: true })\n// ..\n.on('prompt', function (prompts, callback) {\n    inquirer.prompt(prompts, callback);\n});\n```\n\n\n## Completion (experimental)\n\n_NOTE_: Completion is still not implemented for the 1.0.0 release\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n[@addyosmani](https://github.com/addyosmani),\n[@angus-c](https://github.com/angus-c),\n[@borismus](https://github.com/borismus),\n[@carsonmcdonald](https://github.com/carsonmcdonald),\n[@chriseppstein](https://github.com/chriseppstein),\n[@danwrong](https://github.com/danwrong),\n[@davidmaxwaterman](https://github.com/davidmaxwaterman),\n[@desandro](https://github.com/desandro),\n[@hemanth](https://github.com/hemanth),\n[@isaacs](https://github.com/isaacs),\n[@josh](https://github.com/josh),\n[@jrburke](https://github.com/jrburke),\n[@marcelombc](https://github.com/marcelombc),\n[@marcooliveira](https://github.com/marcooliveira),\n[@mklabs](https://github.com/mklabs),\n[@MrDHat](https://github.com/MrDHat),\n[@necolas](https://github.com/necolas),\n[@paulirish](https://github.com/paulirish),\n[@richo](https://github.com/richo),\n[@rvagg](https://github.com/rvagg),\n[@sindresorhus](https://github.com/sindresorhus),\n[@SlexAxton](https://github.com/SlexAxton),\n[@sstephenson](https://github.com/sstephenson),\n[@svnlto](https://github.com/svnlto),\n[@tomdale](https://github.com/tomdale),\n[@uzquiano](https://github.com/uzquiano),\n[@visionmedia](https://github.com/visionmedia),\n[@wagenet](https://github.com/wagenet),\n[@wibblymat](https://github.com/wibblymat),\n[@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/bower/issues"},"_id":"bower@1.2.1","dist":{"shasum":"e25fd6c7677205f04b0992f6725048b899f7d779","tarball":"http://registry.npmjs.org/bower/-/bower-1.2.1.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"1.2.2":{"name":"bower","version":"1.2.2","description":"The browser package manager.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/bower.git"},"main":"lib","homepage":"http://bower.io","engines":{"node":">=0.8.0"},"dependencies":{"abbrev":"~1.0.4","archy":"0.0.2","bower-config":"~0.4.3","bower-endpoint-parser":"~0.2.0","bower-json":"~0.4.0","bower-logger":"~0.2.1","bower-registry-client":"~0.1.4","cardinal":"~0.4.0","chalk":"~0.2.0","chmodr":"~0.1.0","fstream":"~0.1.22","fstream-ignore":"~0.0.6","glob":"~3.2.1","graceful-fs":"~2.0.0","handlebars":"~1.0.11","inquirer":"~0.2.2","junk":"~0.2.0","mkdirp":"~0.3.5","mout":"~0.6.0","nopt":"~2.1.1","lru-cache":"~2.3.0","open":"~0.0.3","promptly":"~0.2.0","q":"~0.9.2","request":"~2.27.0","request-progress":"~0.2.0","retry":"~0.6.0","rimraf":"~2.2.0","semver":"~2.1.0","stringify-object":"~0.1.4","sudo-block":"~0.2.0","tar":"~0.1.17","tmp":"~0.0.20","unzip":"~0.1.7","update-notifier":"~0.1.3","which":"~1.0.5"},"devDependencies":{"expect.js":"~0.2.0","grunt":"~0.4.1","grunt-simple-mocha":"~0.4.0","grunt-contrib-watch":"~0.5.0","grunt-contrib-jshint":"~0.6.0","grunt-exec":"~0.4.2","mocha":"~1.12.0","nock":"~0.22.0","istanbul":"~0.1.42","proxyquire":"~0.5.0"},"scripts":{"test":"grunt test"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\nAlso make sure that [git](http://git-scm.com/) is installed as some bower\npackages require it to be fetched and installed.\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n#### Warning\n\nOn `prezto` or `oh-my-zsh`, do not forget to `alias bower='noglob bower'` or `bower install jquery\\#1.9.1`\n\n#### Running commands with sudo\n\nBower is a user command, there is no need to execute it with superuser permissions.\nHowever, if you still want to run commands with sudo, use `--allow-root` option.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific version of a package\nbower install <package>#<version>\n# Using a different name and a specific version of a package\nbower install <name>=<package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar` files. Its contents will be\n  extracted.\n\n‡ These types of `<package>` might have versions available. You can specify a\n[semver](http://semver.org/) compatible version to fetch a specific release, and lock the\npackage to that version. You can also use ranges to specify a range of versions.\n\nAll package contents are installed in the `bower_components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package:\n\n* There **must** be a valid manifest JSON in the current working directory.\n* Your package should use [semver](http://semver.org/) Git tags.\n* Your package **must** be available at a Git endpoint (e.g., GitHub); remember\n  to push your Git tags!\n\nThen use the following command:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management at this point\nin time. It's on a first come, first served basis. Think of it like a URL\nshortener. Now anyone can run `bower install <my-package-name>`, and get your\nlibrary installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nThe current spec can be read\n[here](https://docs.google.com/document/d/1APq7oA9tNao1UYWyOm8dKqlRP2blVkROYLZ2fLIjtWc/edit#heading=h.4pzytc1f9j8k)\nin the `Configuration` section.\n\n\n## Defining a package\n\nYou must create a `bower.json` in your project's root, and specify all of its\ndependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`,\nand is useful for locking down a project's dependencies.\n\n*NOTE:* In versions of Bower before 0.9.0 the package metadata file was called\n`component.json` rather than `bower.json`. This has changed to avoid a name\nclash with another tool. You can still use `component.json` for now but it is\ndeprecated and the automatic fallback is likely to be removed in an upcoming\nrelease.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n* `private` [boolean]: Set to true if you want to keep the package private and \n  do not want to register the package in future.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--paths` option to Bower's `list` command, you will get a\nsimple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\nAlternatively, every command supports the `--json` option that makes bower\noutput JSON. Command result is outputted to `stdout` and error/logs to\n`stderr`.\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n.install(['jquery'], { save: true }, { /* custom config */ })\n.on('end', function (installed) {\n    console.log(installed);\n});\n\nbower.commands\n.search('jquery', {})\n.on('end', function (results) {\n    console.log(results);\n});\n```\n\nCommands emit four types of events: `log`, `prompt`, `end`, `error`.\n\n* `log` is emitted to report the state/progress of the command.\n* `prompt` is emitted whenever the user needs to be prompted.\n* `error` will only be emitted if something goes wrong.\n* `end` is emitted when the command successfully ends.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/master/bin/bower).\n\nWhen using bower programmatically, prompting is disabled by default. Though you can enable it when calling commands with `interactive: true` in the config.\nThis requires you to listen for the `prompt` event and handle the prompting yourself. The easiest way is to use the [inquirer](https://npmjs.org/package/inquirer) npm module like so:\n\n```js\nvar inquirer =  require('inquirer');\n\nbower.commands\n.install(['jquery'], { save: true }, { interactive: true })\n// ..\n.on('prompt', function (prompts, callback) {\n    inquirer.prompt(prompts, callback);\n});\n```\n\n\n## Completion (experimental)\n\n_NOTE_: Completion is still not implemented for the 1.0.0 release\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n[@addyosmani](https://github.com/addyosmani),\n[@angus-c](https://github.com/angus-c),\n[@borismus](https://github.com/borismus),\n[@carsonmcdonald](https://github.com/carsonmcdonald),\n[@chriseppstein](https://github.com/chriseppstein),\n[@danwrong](https://github.com/danwrong),\n[@davidmaxwaterman](https://github.com/davidmaxwaterman),\n[@desandro](https://github.com/desandro),\n[@hemanth](https://github.com/hemanth),\n[@isaacs](https://github.com/isaacs),\n[@josh](https://github.com/josh),\n[@jrburke](https://github.com/jrburke),\n[@marcelombc](https://github.com/marcelombc),\n[@marcooliveira](https://github.com/marcooliveira),\n[@mklabs](https://github.com/mklabs),\n[@MrDHat](https://github.com/MrDHat),\n[@necolas](https://github.com/necolas),\n[@paulirish](https://github.com/paulirish),\n[@richo](https://github.com/richo),\n[@rvagg](https://github.com/rvagg),\n[@sindresorhus](https://github.com/sindresorhus),\n[@SlexAxton](https://github.com/SlexAxton),\n[@sstephenson](https://github.com/sstephenson),\n[@svnlto](https://github.com/svnlto),\n[@tomdale](https://github.com/tomdale),\n[@uzquiano](https://github.com/uzquiano),\n[@visionmedia](https://github.com/visionmedia),\n[@wagenet](https://github.com/wagenet),\n[@wibblymat](https://github.com/wibblymat),\n[@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/bower/issues"},"_id":"bower@1.2.2","dist":{"shasum":"f6bc27b0a3b87d201c9223792795b6d7fd31b6c0","tarball":"http://registry.npmjs.org/bower/-/bower-1.2.2.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"1.2.3":{"name":"bower","version":"1.2.3","description":"The browser package manager.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/bower.git"},"main":"lib","homepage":"http://bower.io","engines":{"node":">=0.8.0"},"dependencies":{"abbrev":"~1.0.4","archy":"0.0.2","bower-config":"~0.4.3","bower-endpoint-parser":"~0.2.0","bower-json":"~0.4.0","bower-logger":"~0.2.1","bower-registry-client":"~0.1.4","cardinal":"~0.4.0","chalk":"~0.2.0","chmodr":"~0.1.0","fstream":"~0.1.22","fstream-ignore":"~0.0.6","glob":"~3.2.1","graceful-fs":"~2.0.0","handlebars":"~1.0.11","inquirer":"~0.2.2","junk":"~0.2.0","mkdirp":"~0.3.5","mout":"~0.6.0","nopt":"~2.1.1","lru-cache":"~2.3.0","open":"~0.0.3","promptly":"~0.2.0","q":"~0.9.2","request":"~2.27.0","request-progress":"~0.2.0","retry":"~0.6.0","rimraf":"~2.2.0","semver":"~2.1.0","stringify-object":"~0.1.4","sudo-block":"~0.2.0","tar":"~0.1.17","tmp":"~0.0.20","unzip":"~0.1.7","update-notifier":"~0.1.3","which":"~1.0.5"},"devDependencies":{"expect.js":"~0.2.0","grunt":"~0.4.1","grunt-simple-mocha":"~0.4.0","grunt-contrib-watch":"~0.5.0","grunt-contrib-jshint":"~0.6.0","grunt-exec":"~0.4.2","mocha":"~1.12.0","nock":"~0.22.0","istanbul":"~0.1.42","proxyquire":"~0.5.0"},"scripts":{"test":"grunt test"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\nAlso make sure that [git](http://git-scm.com/) is installed as some bower\npackages require it to be fetched and installed.\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n#### Warning\n\nOn `prezto` or `oh-my-zsh`, do not forget to `alias bower='noglob bower'` or `bower install jquery\\#1.9.1`\n\n#### Running commands with sudo\n\nBower is a user command, there is no need to execute it with superuser permissions.\nHowever, if you still want to run commands with sudo, use `--allow-root` option.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific version of a package\nbower install <package>#<version>\n# Using a different name and a specific version of a package\nbower install <name>=<package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar` files. Its contents will be\n  extracted.\n\n‡ These types of `<package>` might have versions available. You can specify a\n[semver](http://semver.org/) compatible version to fetch a specific release, and lock the\npackage to that version. You can also use ranges to specify a range of versions.\n\nAll package contents are installed in the `bower_components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package:\n\n* There **must** be a valid manifest JSON in the current working directory.\n* Your package should use [semver](http://semver.org/) Git tags.\n* Your package **must** be available at a Git endpoint (e.g., GitHub); remember\n  to push your Git tags!\n\nThen use the following command:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management at this point\nin time. It's on a first come, first served basis. Think of it like a URL\nshortener. Now anyone can run `bower install <my-package-name>`, and get your\nlibrary installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nThe current spec can be read\n[here](https://docs.google.com/document/d/1APq7oA9tNao1UYWyOm8dKqlRP2blVkROYLZ2fLIjtWc/edit#heading=h.4pzytc1f9j8k)\nin the `Configuration` section.\n\n\n## Defining a package\n\nYou must create a `bower.json` in your project's root, and specify all of its\ndependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`,\nand is useful for locking down a project's dependencies.\n\n*NOTE:* In versions of Bower before 0.9.0 the package metadata file was called\n`component.json` rather than `bower.json`. This has changed to avoid a name\nclash with another tool. You can still use `component.json` for now but it is\ndeprecated and the automatic fallback is likely to be removed in an upcoming\nrelease.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n* `private` [boolean]: Set to true if you want to keep the package private and \n  do not want to register the package in future.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--paths` option to Bower's `list` command, you will get a\nsimple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\nAlternatively, every command supports the `--json` option that makes bower\noutput JSON. Command result is outputted to `stdout` and error/logs to\n`stderr`.\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n.install(['jquery'], { save: true }, { /* custom config */ })\n.on('end', function (installed) {\n    console.log(installed);\n});\n\nbower.commands\n.search('jquery', {})\n.on('end', function (results) {\n    console.log(results);\n});\n```\n\nCommands emit four types of events: `log`, `prompt`, `end`, `error`.\n\n* `log` is emitted to report the state/progress of the command.\n* `prompt` is emitted whenever the user needs to be prompted.\n* `error` will only be emitted if something goes wrong.\n* `end` is emitted when the command successfully ends.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/master/bin/bower).\n\nWhen using bower programmatically, prompting is disabled by default. Though you can enable it when calling commands with `interactive: true` in the config.\nThis requires you to listen for the `prompt` event and handle the prompting yourself. The easiest way is to use the [inquirer](https://npmjs.org/package/inquirer) npm module like so:\n\n```js\nvar inquirer =  require('inquirer');\n\nbower.commands\n.install(['jquery'], { save: true }, { interactive: true })\n// ..\n.on('prompt', function (prompts, callback) {\n    inquirer.prompt(prompts, callback);\n});\n```\n\n\n## Completion (experimental)\n\n_NOTE_: Completion is still not implemented for the 1.0.0 release\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n[@addyosmani](https://github.com/addyosmani),\n[@angus-c](https://github.com/angus-c),\n[@borismus](https://github.com/borismus),\n[@carsonmcdonald](https://github.com/carsonmcdonald),\n[@chriseppstein](https://github.com/chriseppstein),\n[@danwrong](https://github.com/danwrong),\n[@davidmaxwaterman](https://github.com/davidmaxwaterman),\n[@desandro](https://github.com/desandro),\n[@hemanth](https://github.com/hemanth),\n[@isaacs](https://github.com/isaacs),\n[@josh](https://github.com/josh),\n[@jrburke](https://github.com/jrburke),\n[@marcelombc](https://github.com/marcelombc),\n[@marcooliveira](https://github.com/marcooliveira),\n[@mklabs](https://github.com/mklabs),\n[@MrDHat](https://github.com/MrDHat),\n[@necolas](https://github.com/necolas),\n[@paulirish](https://github.com/paulirish),\n[@richo](https://github.com/richo),\n[@rvagg](https://github.com/rvagg),\n[@sindresorhus](https://github.com/sindresorhus),\n[@SlexAxton](https://github.com/SlexAxton),\n[@sstephenson](https://github.com/sstephenson),\n[@svnlto](https://github.com/svnlto),\n[@tomdale](https://github.com/tomdale),\n[@uzquiano](https://github.com/uzquiano),\n[@visionmedia](https://github.com/visionmedia),\n[@wagenet](https://github.com/wagenet),\n[@wibblymat](https://github.com/wibblymat),\n[@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/bower/issues"},"_id":"bower@1.2.3","dist":{"shasum":"5a578d7f502074190ac30a35f6faf19847d0496f","tarball":"http://registry.npmjs.org/bower/-/bower-1.2.3.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"1.2.4":{"name":"bower","version":"1.2.4","description":"The browser package manager.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/bower.git"},"main":"lib","homepage":"http://bower.io","engines":{"node":">=0.8.0"},"dependencies":{"abbrev":"~1.0.4","archy":"0.0.2","bower-config":"~0.4.3","bower-endpoint-parser":"~0.2.0","bower-json":"~0.4.0","bower-logger":"~0.2.1","bower-registry-client":"~0.1.4","cardinal":"~0.4.0","chalk":"~0.2.0","chmodr":"~0.1.0","fstream":"~0.1.22","fstream-ignore":"~0.0.6","glob":"~3.2.1","graceful-fs":"~2.0.0","handlebars":"~1.0.11","inquirer":"~0.2.2","junk":"~0.2.0","mkdirp":"~0.3.5","mout":"~0.6.0","nopt":"~2.1.1","lru-cache":"~2.3.0","open":"~0.0.3","promptly":"~0.2.0","q":"~0.9.2","request":"~2.27.0","request-progress":"~0.2.0","retry":"~0.6.0","rimraf":"~2.2.0","semver":"~2.1.0","stringify-object":"~0.1.4","sudo-block":"~0.2.0","tar":"~0.1.17","tmp":"~0.0.20","unzip":"~0.1.7","update-notifier":"~0.1.3","which":"~1.0.5"},"devDependencies":{"expect.js":"~0.2.0","grunt":"~0.4.1","grunt-simple-mocha":"~0.4.0","grunt-contrib-watch":"~0.5.0","grunt-contrib-jshint":"~0.6.0","grunt-exec":"~0.4.2","mocha":"~1.12.0","nock":"~0.22.0","istanbul":"~0.1.42","proxyquire":"~0.5.0"},"scripts":{"test":"grunt test"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\nAlso make sure that [git](http://git-scm.com/) is installed as some bower\npackages require it to be fetched and installed.\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n#### Warning\n\nOn `prezto` or `oh-my-zsh`, do not forget to `alias bower='noglob bower'` or `bower install jquery\\#1.9.1`\n\n#### Running commands with sudo\n\nBower is a user command, there is no need to execute it with superuser permissions.\nHowever, if you still want to run commands with sudo, use `--allow-root` option.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific version of a package\nbower install <package>#<version>\n# Using a different name and a specific version of a package\nbower install <name>=<package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar` files. Its contents will be\n  extracted.\n\n‡ These types of `<package>` might have versions available. You can specify a\n[semver](http://semver.org/) compatible version to fetch a specific release, and lock the\npackage to that version. You can also use ranges to specify a range of versions.\n\nAll package contents are installed in the `bower_components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package:\n\n* There **must** be a valid manifest JSON in the current working directory.\n* Your package should use [semver](http://semver.org/) Git tags.\n* Your package **must** be available at a Git endpoint (e.g., GitHub); remember\n  to push your Git tags!\n\nThen use the following command:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management at this point\nin time. It's on a first come, first served basis. Think of it like a URL\nshortener. Now anyone can run `bower install <my-package-name>`, and get your\nlibrary installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nThe current spec can be read\n[here](https://docs.google.com/document/d/1APq7oA9tNao1UYWyOm8dKqlRP2blVkROYLZ2fLIjtWc/edit#heading=h.4pzytc1f9j8k)\nin the `Configuration` section.\n\n\n## Defining a package\n\nYou must create a `bower.json` in your project's root, and specify all of its\ndependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`,\nand is useful for locking down a project's dependencies.\n\n*NOTE:* In versions of Bower before 0.9.0 the package metadata file was called\n`component.json` rather than `bower.json`. This has changed to avoid a name\nclash with another tool. You can still use `component.json` for now but it is\ndeprecated and the automatic fallback is likely to be removed in an upcoming\nrelease.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n* `private` [boolean]: Set to true if you want to keep the package private and \n  do not want to register the package in future.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--paths` option to Bower's `list` command, you will get a\nsimple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\nAlternatively, every command supports the `--json` option that makes bower\noutput JSON. Command result is outputted to `stdout` and error/logs to\n`stderr`.\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n.install(['jquery'], { save: true }, { /* custom config */ })\n.on('end', function (installed) {\n    console.log(installed);\n});\n\nbower.commands\n.search('jquery', {})\n.on('end', function (results) {\n    console.log(results);\n});\n```\n\nCommands emit four types of events: `log`, `prompt`, `end`, `error`.\n\n* `log` is emitted to report the state/progress of the command.\n* `prompt` is emitted whenever the user needs to be prompted.\n* `error` will only be emitted if something goes wrong.\n* `end` is emitted when the command successfully ends.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/master/bin/bower).\n\nWhen using bower programmatically, prompting is disabled by default. Though you can enable it when calling commands with `interactive: true` in the config.\nThis requires you to listen for the `prompt` event and handle the prompting yourself. The easiest way is to use the [inquirer](https://npmjs.org/package/inquirer) npm module like so:\n\n```js\nvar inquirer =  require('inquirer');\n\nbower.commands\n.install(['jquery'], { save: true }, { interactive: true })\n// ..\n.on('prompt', function (prompts, callback) {\n    inquirer.prompt(prompts, callback);\n});\n```\n\n\n## Completion (experimental)\n\n_NOTE_: Completion is still not implemented for the 1.0.0 release\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n[@addyosmani](https://github.com/addyosmani),\n[@angus-c](https://github.com/angus-c),\n[@borismus](https://github.com/borismus),\n[@carsonmcdonald](https://github.com/carsonmcdonald),\n[@chriseppstein](https://github.com/chriseppstein),\n[@danwrong](https://github.com/danwrong),\n[@davidmaxwaterman](https://github.com/davidmaxwaterman),\n[@desandro](https://github.com/desandro),\n[@hemanth](https://github.com/hemanth),\n[@isaacs](https://github.com/isaacs),\n[@josh](https://github.com/josh),\n[@jrburke](https://github.com/jrburke),\n[@marcelombc](https://github.com/marcelombc),\n[@marcooliveira](https://github.com/marcooliveira),\n[@mklabs](https://github.com/mklabs),\n[@MrDHat](https://github.com/MrDHat),\n[@necolas](https://github.com/necolas),\n[@paulirish](https://github.com/paulirish),\n[@richo](https://github.com/richo),\n[@rvagg](https://github.com/rvagg),\n[@sindresorhus](https://github.com/sindresorhus),\n[@SlexAxton](https://github.com/SlexAxton),\n[@sstephenson](https://github.com/sstephenson),\n[@svnlto](https://github.com/svnlto),\n[@tomdale](https://github.com/tomdale),\n[@uzquiano](https://github.com/uzquiano),\n[@visionmedia](https://github.com/visionmedia),\n[@wagenet](https://github.com/wagenet),\n[@wibblymat](https://github.com/wibblymat),\n[@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/bower/issues"},"_id":"bower@1.2.4","dist":{"shasum":"7dce66cef5ffab8ef56c053d8df5aa1f1356cfac","tarball":"http://registry.npmjs.org/bower/-/bower-1.2.4.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"1.2.5":{"name":"bower","version":"1.2.5","description":"The browser package manager.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/bower.git"},"main":"lib","homepage":"http://bower.io","engines":{"node":">=0.8.0"},"dependencies":{"abbrev":"~1.0.4","archy":"0.0.2","bower-config":"~0.4.3","bower-endpoint-parser":"~0.2.0","bower-json":"~0.4.0","bower-logger":"~0.2.1","bower-registry-client":"~0.1.4","cardinal":"~0.4.0","chalk":"~0.2.0","chmodr":"~0.1.0","fstream":"~0.1.22","fstream-ignore":"~0.0.6","glob":"~3.2.1","graceful-fs":"~2.0.0","handlebars":"~1.0.11","inquirer":"~0.3.0","junk":"~0.2.0","mkdirp":"~0.3.5","mout":"~0.6.0","nopt":"~2.1.1","lru-cache":"~2.3.0","open":"~0.0.3","osenv":"0.0.3","promptly":"~0.2.0","q":"~0.9.2","request":"~2.27.0","request-progress":"~0.2.0","retry":"~0.6.0","rimraf":"~2.2.0","semver":"~2.1.0","stringify-object":"~0.1.4","sudo-block":"~0.2.0","tar":"~0.1.17","tmp":"~0.0.20","unzip":"~0.1.7","update-notifier":"~0.1.3","which":"~1.0.5"},"devDependencies":{"expect.js":"~0.2.0","grunt":"~0.4.1","grunt-simple-mocha":"~0.4.0","grunt-contrib-watch":"~0.5.0","grunt-contrib-jshint":"~0.6.0","grunt-exec":"~0.4.2","mocha":"~1.12.0","nock":"~0.22.0","istanbul":"~0.1.42","proxyquire":"~0.5.0"},"scripts":{"test":"grunt test"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\nAlso make sure that [git](http://git-scm.com/) is installed as some bower\npackages require it to be fetched and installed.\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n#### Warning\n\nOn `prezto` or `oh-my-zsh`, do not forget to `alias bower='noglob bower'` or `bower install jquery\\#1.9.1`\n\n#### Running commands with sudo\n\nBower is a user command, there is no need to execute it with superuser permissions.\nHowever, if you still want to run commands with sudo, use `--allow-root` option.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific version of a package\nbower install <package>#<version>\n# Using a different name and a specific version of a package\nbower install <name>=<package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar` files. Its contents will be\n  extracted.\n\n‡ These types of `<package>` might have versions available. You can specify a\n[semver](http://semver.org/) compatible version to fetch a specific release, and lock the\npackage to that version. You can also use ranges to specify a range of versions.\n\nAll package contents are installed in the `bower_components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package:\n\n* There **must** be a valid manifest JSON in the current working directory.\n* Your package should use [semver](http://semver.org/) Git tags.\n* Your package **must** be available at a Git endpoint (e.g., GitHub); remember\n  to push your Git tags!\n\nThen use the following command:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management at this point\nin time. It's on a first come, first served basis. Think of it like a URL\nshortener. Now anyone can run `bower install <my-package-name>`, and get your\nlibrary installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nThe current spec can be read\n[here](https://docs.google.com/document/d/1APq7oA9tNao1UYWyOm8dKqlRP2blVkROYLZ2fLIjtWc/edit#heading=h.4pzytc1f9j8k)\nin the `Configuration` section.\n\n\n## Defining a package\n\nYou must create a `bower.json` in your project's root, and specify all of its\ndependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`,\nand is useful for locking down a project's dependencies.\n\n*NOTE:* In versions of Bower before 0.9.0 the package metadata file was called\n`component.json` rather than `bower.json`. This has changed to avoid a name\nclash with another tool. You can still use `component.json` for now but it is\ndeprecated and the automatic fallback is likely to be removed in an upcoming\nrelease.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n* `private` [boolean]: Set to true if you want to keep the package private and \n  do not want to register the package in future.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--paths` option to Bower's `list` command, you will get a\nsimple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\nAlternatively, every command supports the `--json` option that makes bower\noutput JSON. Command result is outputted to `stdout` and error/logs to\n`stderr`.\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n.install(['jquery'], { save: true }, { /* custom config */ })\n.on('end', function (installed) {\n    console.log(installed);\n});\n\nbower.commands\n.search('jquery', {})\n.on('end', function (results) {\n    console.log(results);\n});\n```\n\nCommands emit four types of events: `log`, `prompt`, `end`, `error`.\n\n* `log` is emitted to report the state/progress of the command.\n* `prompt` is emitted whenever the user needs to be prompted.\n* `error` will only be emitted if something goes wrong.\n* `end` is emitted when the command successfully ends.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/master/bin/bower).\n\nWhen using bower programmatically, prompting is disabled by default. Though you can enable it when calling commands with `interactive: true` in the config.\nThis requires you to listen for the `prompt` event and handle the prompting yourself. The easiest way is to use the [inquirer](https://npmjs.org/package/inquirer) npm module like so:\n\n```js\nvar inquirer =  require('inquirer');\n\nbower.commands\n.install(['jquery'], { save: true }, { interactive: true })\n// ..\n.on('prompt', function (prompts, callback) {\n    inquirer.prompt(prompts, callback);\n});\n```\n\n\n## Completion (experimental)\n\n_NOTE_: Completion is still not implemented for the 1.0.0 release\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n[@addyosmani](https://github.com/addyosmani),\n[@angus-c](https://github.com/angus-c),\n[@borismus](https://github.com/borismus),\n[@carsonmcdonald](https://github.com/carsonmcdonald),\n[@chriseppstein](https://github.com/chriseppstein),\n[@danwrong](https://github.com/danwrong),\n[@davidmaxwaterman](https://github.com/davidmaxwaterman),\n[@desandro](https://github.com/desandro),\n[@hemanth](https://github.com/hemanth),\n[@isaacs](https://github.com/isaacs),\n[@josh](https://github.com/josh),\n[@jrburke](https://github.com/jrburke),\n[@marcelombc](https://github.com/marcelombc),\n[@marcooliveira](https://github.com/marcooliveira),\n[@mklabs](https://github.com/mklabs),\n[@MrDHat](https://github.com/MrDHat),\n[@necolas](https://github.com/necolas),\n[@paulirish](https://github.com/paulirish),\n[@richo](https://github.com/richo),\n[@rvagg](https://github.com/rvagg),\n[@sindresorhus](https://github.com/sindresorhus),\n[@SlexAxton](https://github.com/SlexAxton),\n[@sstephenson](https://github.com/sstephenson),\n[@svnlto](https://github.com/svnlto),\n[@tomdale](https://github.com/tomdale),\n[@uzquiano](https://github.com/uzquiano),\n[@visionmedia](https://github.com/visionmedia),\n[@wagenet](https://github.com/wagenet),\n[@wibblymat](https://github.com/wibblymat),\n[@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/bower/issues"},"_id":"bower@1.2.5","dist":{"shasum":"2ef3f565fb6d143582318def68b4b084ac3e5a86","tarball":"http://registry.npmjs.org/bower/-/bower-1.2.5.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"1.2.6":{"name":"bower","version":"1.2.6","description":"The browser package manager.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/bower.git"},"main":"lib","homepage":"http://bower.io","engines":{"node":">=0.8.0"},"dependencies":{"abbrev":"~1.0.4","archy":"0.0.2","bower-config":"~0.5.0","bower-endpoint-parser":"~0.2.0","bower-json":"~0.4.0","bower-logger":"~0.2.1","bower-registry-client":"~0.1.4","cardinal":"~0.4.0","chalk":"~0.2.0","chmodr":"~0.1.0","fstream":"~0.1.22","fstream-ignore":"~0.0.6","glob":"~3.2.1","graceful-fs":"~2.0.0","handlebars":"~1.0.11","inquirer":"~0.3.0","junk":"~0.2.0","mkdirp":"~0.3.5","mout":"~0.6.0","nopt":"~2.1.1","lru-cache":"~2.3.0","open":"~0.0.3","osenv":"0.0.3","promptly":"~0.2.0","q":"~0.9.2","request":"~2.27.0","request-progress":"~0.3.0","retry":"~0.6.0","rimraf":"~2.2.0","semver":"~2.1.0","stringify-object":"~0.1.4","sudo-block":"~0.2.0","tar":"~0.1.17","tmp":"~0.0.20","unzip":"~0.1.7","update-notifier":"~0.1.3","which":"~1.0.5"},"devDependencies":{"expect.js":"~0.2.0","grunt":"~0.4.1","grunt-simple-mocha":"~0.4.0","grunt-contrib-watch":"~0.5.0","grunt-contrib-jshint":"~0.6.0","grunt-exec":"~0.4.2","mocha":"~1.12.0","nock":"~0.22.0","istanbul":"~0.1.42","proxyquire":"~0.5.0"},"scripts":{"test":"grunt test"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\nAlso make sure that [git](http://git-scm.com/) is installed as some bower\npackages require it to be fetched and installed.\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n#### Warning\n\nOn `prezto` or `oh-my-zsh`, do not forget to `alias bower='noglob bower'` or `bower install jquery\\#1.9.1`\n\n#### Running commands with sudo\n\nBower is a user command, there is no need to execute it with superuser permissions.\nHowever, if you still want to run commands with sudo, use `--allow-root` option.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific version of a package\nbower install <package>#<version>\n# Using a different name and a specific version of a package\nbower install <name>=<package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar` files. Its contents will be\n  extracted.\n\n‡ These types of `<package>` might have versions available. You can specify a\n[semver](http://semver.org/) compatible version to fetch a specific release, and lock the\npackage to that version. You can also use ranges to specify a range of versions.\n\nAll package contents are installed in the `bower_components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package:\n\n* There **must** be a valid manifest JSON in the current working directory.\n* Your package should use [semver](http://semver.org/) Git tags.\n* Your package **must** be available at a Git endpoint (e.g., GitHub); remember\n  to push your Git tags!\n\nThen use the following command:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management at this point\nin time. It's on a first come, first served basis. Think of it like a URL\nshortener. Now anyone can run `bower install <my-package-name>`, and get your\nlibrary installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nThe current spec can be read\n[here](https://docs.google.com/document/d/1APq7oA9tNao1UYWyOm8dKqlRP2blVkROYLZ2fLIjtWc/edit#heading=h.4pzytc1f9j8k)\nin the `Configuration` section.\n\n\n## Defining a package\n\nYou must create a `bower.json` in your project's root, and specify all of its\ndependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`,\nand is useful for locking down a project's dependencies.\n\n*NOTE:* In versions of Bower before 0.9.0 the package metadata file was called\n`component.json` rather than `bower.json`. This has changed to avoid a name\nclash with another tool. You can still use `component.json` for now but it is\ndeprecated and the automatic fallback is likely to be removed in an upcoming\nrelease.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n* `private` [boolean]: Set to true if you want to keep the package private and \n  do not want to register the package in future.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--paths` option to Bower's `list` command, you will get a\nsimple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\nAlternatively, every command supports the `--json` option that makes bower\noutput JSON. Command result is outputted to `stdout` and error/logs to\n`stderr`.\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n.install(['jquery'], { save: true }, { /* custom config */ })\n.on('end', function (installed) {\n    console.log(installed);\n});\n\nbower.commands\n.search('jquery', {})\n.on('end', function (results) {\n    console.log(results);\n});\n```\n\nCommands emit four types of events: `log`, `prompt`, `end`, `error`.\n\n* `log` is emitted to report the state/progress of the command.\n* `prompt` is emitted whenever the user needs to be prompted.\n* `error` will only be emitted if something goes wrong.\n* `end` is emitted when the command successfully ends.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/master/bin/bower).\n\nWhen using bower programmatically, prompting is disabled by default. Though you can enable it when calling commands with `interactive: true` in the config.\nThis requires you to listen for the `prompt` event and handle the prompting yourself. The easiest way is to use the [inquirer](https://npmjs.org/package/inquirer) npm module like so:\n\n```js\nvar inquirer =  require('inquirer');\n\nbower.commands\n.install(['jquery'], { save: true }, { interactive: true })\n// ..\n.on('prompt', function (prompts, callback) {\n    inquirer.prompt(prompts, callback);\n});\n```\n\n\n## Completion (experimental)\n\n_NOTE_: Completion is still not implemented for the 1.0.0 release\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n[@addyosmani](https://github.com/addyosmani),\n[@angus-c](https://github.com/angus-c),\n[@borismus](https://github.com/borismus),\n[@carsonmcdonald](https://github.com/carsonmcdonald),\n[@chriseppstein](https://github.com/chriseppstein),\n[@danwrong](https://github.com/danwrong),\n[@davidmaxwaterman](https://github.com/davidmaxwaterman),\n[@desandro](https://github.com/desandro),\n[@hemanth](https://github.com/hemanth),\n[@isaacs](https://github.com/isaacs),\n[@josh](https://github.com/josh),\n[@jrburke](https://github.com/jrburke),\n[@marcelombc](https://github.com/marcelombc),\n[@marcooliveira](https://github.com/marcooliveira),\n[@mklabs](https://github.com/mklabs),\n[@MrDHat](https://github.com/MrDHat),\n[@necolas](https://github.com/necolas),\n[@paulirish](https://github.com/paulirish),\n[@richo](https://github.com/richo),\n[@rvagg](https://github.com/rvagg),\n[@sindresorhus](https://github.com/sindresorhus),\n[@SlexAxton](https://github.com/SlexAxton),\n[@sstephenson](https://github.com/sstephenson),\n[@svnlto](https://github.com/svnlto),\n[@tomdale](https://github.com/tomdale),\n[@uzquiano](https://github.com/uzquiano),\n[@visionmedia](https://github.com/visionmedia),\n[@wagenet](https://github.com/wagenet),\n[@wibblymat](https://github.com/wibblymat),\n[@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/bower/issues"},"_id":"bower@1.2.6","dist":{"shasum":"a8b7bd344601554821957b9ab62fb436febc674d","tarball":"http://registry.npmjs.org/bower/-/bower-1.2.6.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"1.2.7":{"name":"bower","version":"1.2.7","description":"The browser package manager.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/bower.git"},"main":"lib","homepage":"http://bower.io","engines":{"node":">=0.8.0"},"dependencies":{"abbrev":"~1.0.4","archy":"0.0.2","bower-config":"~0.5.0","bower-endpoint-parser":"~0.2.0","bower-json":"~0.4.0","bower-logger":"~0.2.1","bower-registry-client":"~0.1.4","cardinal":"~0.4.0","chalk":"~0.2.0","chmodr":"~0.1.0","fstream":"~0.1.22","fstream-ignore":"~0.0.6","glob":"~3.2.1","graceful-fs":"~2.0.0","handlebars":"~1.0.11","inquirer":"~0.3.0","junk":"~0.2.0","mkdirp":"~0.3.5","mout":"~0.7.0","nopt":"~2.1.1","lru-cache":"~2.3.0","open":"~0.0.3","osenv":"0.0.3","promptly":"~0.2.0","q":"~0.9.2","request":"~2.27.0","request-progress":"~0.3.0","retry":"~0.6.0","rimraf":"~2.2.0","semver":"~2.1.0","stringify-object":"~0.1.4","sudo-block":"~0.2.0","tar":"~0.1.17","tmp":"~0.0.20","unzip":"~0.1.7","update-notifier":"~0.1.3","which":"~1.0.5"},"devDependencies":{"expect.js":"~0.2.0","grunt":"~0.4.1","grunt-simple-mocha":"~0.4.0","grunt-contrib-watch":"~0.5.0","grunt-contrib-jshint":"~0.6.0","grunt-exec":"~0.4.2","mocha":"~1.12.0","nock":"~0.22.0","istanbul":"~0.1.42","proxyquire":"~0.5.0"},"scripts":{"test":"grunt test"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# BOWER [![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower)\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\nAlso make sure that [git](http://git-scm.com/) is installed as some bower\npackages require it to be fetched and installed.\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n#### Warning\n\nOn `prezto` or `oh-my-zsh`, do not forget to `alias bower='noglob bower'` or `bower install jquery\\#1.9.1`\n\n#### Running commands with sudo\n\nBower is a user command, there is no need to execute it with superuser permissions.\nHowever, if you still want to run commands with sudo, use `--allow-root` option.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n```\n# Using the dependencies listed in the current directory's bower.json\nbower install\n# Using a local or remote package\nbower install <package>\n# Using a specific version of a package\nbower install <package>#<version>\n# Using a different name and a specific version of a package\nbower install <name>=<package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar` files. Its contents will be\n  extracted.\n\n‡ These types of `<package>` might have versions available. You can specify a\n[semver](http://semver.org/) compatible version to fetch a specific release, and lock the\npackage to that version. You can also use ranges to specify a range of versions.\n\nAll package contents are installed in the `bower_components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always check installed\npackages into source control.\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Registering packages\n\nTo register a new package:\n\n* There **must** be a valid manifest JSON in the current working directory.\n* Your package should use [semver](http://semver.org/) Git tags.\n* Your package **must** be available at a Git endpoint (e.g., GitHub); remember\n  to push your Git tags!\n\nThen use the following command:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management at this point\nin time. It's on a first come, first served basis. Think of it like a URL\nshortener. Now anyone can run `bower install <my-package-name>`, and get your\nlibrary installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nThe current spec can be read\n[here](https://docs.google.com/document/d/1APq7oA9tNao1UYWyOm8dKqlRP2blVkROYLZ2fLIjtWc/edit#heading=h.4pzytc1f9j8k)\nin the `Configuration` section.\n\n\n## Defining a package\n\nYou must create a `bower.json` in your project's root, and specify all of its\ndependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`,\nand is useful for locking down a project's dependencies.\n\n*NOTE:* In versions of Bower before 0.9.0 the package metadata file was called\n`component.json` rather than `bower.json`. This has changed to avoid a name\nclash with another tool. You can still use `component.json` for now but it is\ndeprecated and the automatic fallback is likely to be removed in an upcoming\nrelease.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n* `private` [boolean]: Set to true if you want to keep the package private and \n  do not want to register the package in future.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--paths` option to Bower's `list` command, you will get a\nsimple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\nAlternatively, every command supports the `--json` option that makes bower\noutput JSON. Command result is outputted to `stdout` and error/logs to\n`stderr`.\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n.install(['jquery'], { save: true }, { /* custom config */ })\n.on('end', function (installed) {\n    console.log(installed);\n});\n\nbower.commands\n.search('jquery', {})\n.on('end', function (results) {\n    console.log(results);\n});\n```\n\nCommands emit four types of events: `log`, `prompt`, `end`, `error`.\n\n* `log` is emitted to report the state/progress of the command.\n* `prompt` is emitted whenever the user needs to be prompted.\n* `error` will only be emitted if something goes wrong.\n* `end` is emitted when the command successfully ends.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/master/bin/bower).\n\nWhen using bower programmatically, prompting is disabled by default. Though you can enable it when calling commands with `interactive: true` in the config.\nThis requires you to listen for the `prompt` event and handle the prompting yourself. The easiest way is to use the [inquirer](https://npmjs.org/package/inquirer) npm module like so:\n\n```js\nvar inquirer =  require('inquirer');\n\nbower.commands\n.install(['jquery'], { save: true }, { interactive: true })\n// ..\n.on('prompt', function (prompts, callback) {\n    inquirer.prompt(prompts, callback);\n});\n```\n\n\n## Completion (experimental)\n\n_NOTE_: Completion is still not implemented for the 1.0.0 release\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n[@addyosmani](https://github.com/addyosmani),\n[@angus-c](https://github.com/angus-c),\n[@borismus](https://github.com/borismus),\n[@carsonmcdonald](https://github.com/carsonmcdonald),\n[@chriseppstein](https://github.com/chriseppstein),\n[@danwrong](https://github.com/danwrong),\n[@davidmaxwaterman](https://github.com/davidmaxwaterman),\n[@desandro](https://github.com/desandro),\n[@hemanth](https://github.com/hemanth),\n[@isaacs](https://github.com/isaacs),\n[@josh](https://github.com/josh),\n[@jrburke](https://github.com/jrburke),\n[@marcelombc](https://github.com/marcelombc),\n[@marcooliveira](https://github.com/marcooliveira),\n[@mklabs](https://github.com/mklabs),\n[@MrDHat](https://github.com/MrDHat),\n[@necolas](https://github.com/necolas),\n[@paulirish](https://github.com/paulirish),\n[@richo](https://github.com/richo),\n[@rvagg](https://github.com/rvagg),\n[@sindresorhus](https://github.com/sindresorhus),\n[@SlexAxton](https://github.com/SlexAxton),\n[@sstephenson](https://github.com/sstephenson),\n[@svnlto](https://github.com/svnlto),\n[@tomdale](https://github.com/tomdale),\n[@uzquiano](https://github.com/uzquiano),\n[@visionmedia](https://github.com/visionmedia),\n[@wagenet](https://github.com/wagenet),\n[@wibblymat](https://github.com/wibblymat),\n[@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/bower/issues"},"_id":"bower@1.2.7","dist":{"shasum":"5b0505c8192bd61a752a7cf8b718d1b3054cd554","tarball":"http://registry.npmjs.org/bower/-/bower-1.2.7.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"1.2.8":{"name":"bower","version":"1.2.8","description":"The browser package manager.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/bower/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/bower.git"},"main":"lib","homepage":"http://bower.io","engines":{"node":">=0.8.0"},"dependencies":{"abbrev":"~1.0.4","archy":"0.0.2","bower-config":"~0.5.0","bower-endpoint-parser":"~0.2.0","bower-json":"~0.4.0","bower-logger":"~0.2.1","bower-registry-client":"~0.1.4","cardinal":"~0.4.0","chalk":"~0.2.0","chmodr":"~0.1.0","decompress-zip":"~0.0.3","fstream":"~0.1.22","fstream-ignore":"~0.0.6","glob":"~3.2.1","graceful-fs":"~2.0.0","handlebars":"~1.0.11","inquirer":"~0.3.0","junk":"~0.2.0","mkdirp":"~0.3.5","mout":"~0.7.0","nopt":"~2.1.1","lru-cache":"~2.3.0","open":"~0.0.3","osenv":"0.0.3","promptly":"~0.2.0","q":"~0.9.2","request":"~2.27.0","request-progress":"~0.3.0","retry":"~0.6.0","rimraf":"~2.2.0","semver":"~2.1.0","stringify-object":"~0.1.4","sudo-block":"~0.2.0","tar":"~0.1.17","tmp":"~0.0.20","update-notifier":"~0.1.3","which":"~1.0.5","p-throttler":"~0.0.1"},"devDependencies":{"expect.js":"~0.2.0","grunt":"~0.4.1","grunt-simple-mocha":"~0.4.0","grunt-contrib-watch":"~0.5.0","grunt-contrib-jshint":"~0.6.0","grunt-exec":"~0.4.2","mocha":"~1.12.0","nock":"~0.22.0","istanbul":"~0.1.42","proxyquire":"~0.5.0"},"scripts":{"test":"grunt test"},"bin":{"bower":"bin/bower"},"preferGlobal":true,"readme":"# Bower\n\n[![Build Status](https://secure.travis-ci.org/bower/bower.png?branch=master)](http://travis-ci.org/bower/bower) [![Views in the last 24 hours](https://sourcegraph.com/api/repos/github.com/bower/bower/counters/views-24h.png)](https://sourcegraph.com/github.com/bower/bower)\n\n<img align=\"right\" height=\"300\" src=\"http://bower.io/img/bower-logo.png\">\n\nBower is a package manager for the web. It offers a generic, unopinionated\nsolution to the problem of **front-end package management**, while exposing the\npackage dependency model via an API that can be consumed by a more opinionated\nbuild stack. There are no system wide dependencies, no dependencies are shared\nbetween different apps, and the dependency tree is flat.\n\nBower runs over Git, and is package-agnostic. A packaged component can be made\nup of any type of asset, and use any type of transport (e.g., AMD, CommonJS,\netc.).\n\n[View all packages available through Bower's registry](http://sindresorhus.com/bower-components/).\n\n\n## Installing Bower\n\nBower depends on [Node](http://nodejs.org/) and [npm](http://npmjs.org/). It's\ninstalled globally using npm:\n\n```\nnpm install -g bower\n```\n\nAlso make sure that [git](http://git-scm.com/) is installed as some bower\npackages require it to be fetched and installed.\n\n\n## Usage\n\nMuch more information is available via `bower help` once it's installed. This\nis just enough to get you started.\n\n### Installing packages and dependencies\n\nBower offers several ways to install packages:\n\n#####Using the dependencies listed in the current directory's bower.json\n```\nbower install\n```\n##### Using a local or remote package\n```\nbower install <package>\n```\n##### Using a specific version of a package\n```\nbower install <package>#<version>\n```\n##### Using a different name and a specific version of a package\n```\nbower install <name>=<package>#<version>\n```\n\nWhere `<package>` can be any one of the following:\n\n* A name that maps to a package registered with Bower, e.g, `jquery`. ‡\n* A remote Git endpoint, e.g., `git://github.com/someone/some-package.git`. Can be\n  public or private. ‡\n* A local endpoint, i.e., a folder that's a Git repository. ‡\n* A shorthand endpoint, e.g., `someone/some-package` (defaults to GitHub). ‡\n* A URL to a file, including `zip` and `tar` files. Its contents will be\n  extracted.\n\n‡ These types of `<package>` might have versions available. You can specify a\n[semver](http://semver.org/) compatible version to fetch a specific release, and lock the\npackage to that version. You can also use ranges to specify a range of versions.\n\nAll package contents are installed in the `bower_components` directory by default.\nYou should **never** directly modify the contents of this directory.\n\nUsing `bower list` will show all the packages that are installed locally.\n\n**N.B.** If you aren't authoring a package that is intended to be consumed by\nothers (e.g., you're building a web app), you should always [check installed\npackages into source control](http://addyosmani.com/blog/checking-in-front-end-dependencies/).\n\n### Finding packages\n\nTo search for packages registered with Bower:\n\n```\nbower search [<name>]\n```\n\nUsing just `bower search` will list all packages in the registry.\n\n### Using packages\n\nThe easiest approach is to use Bower statically, just reference the package's\ninstalled components manually using a `script` tag:\n\n```html\n<script src=\"/bower_components/jquery/index.js\"></script>\n```\n\nFor more complex projects, you'll probably want to concatenate your scripts or\nuse a module loader. Bower is just a package manager, but there are plenty of\nother tools -- such as [Sprockets](https://github.com/sstephenson/sprockets)\nand [RequireJS](http://requirejs.org/) -- that will help you do this.\n\n### Uninstalling packages\n\nTo uninstall a locally installed package:\n\n```\nbower uninstall <package-name>\n```\n\n\n#### Warning\n\nOn `prezto` or `oh-my-zsh`, do not forget to `alias bower='noglob bower'` or `bower install jquery\\#1.9.1`\n\n#### Running commands with sudo\n\nBower is a user command, there is no need to execute it with superuser permissions.\nHowever, if you still want to run commands with sudo, use `--allow-root` option.\n\n#### A note for Windows users\n\nTo use Bower on Windows, you must install\n[msysgit](http://code.google.com/p/msysgit/) correctly. Be sure to check the\noption shown below:\n\n![msysgit](http://f.cl.ly/items/2V2O3i1p3R2F1r2v0a12/mysgit.png)\n\nNote that if you use TortoiseGit and if Bower keeps asking for your SSH\npassword, you should add the following environment variable: `GIT_SSH -\nC:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe`. Adjust the `TortoisePlink`\npath if needed.\n\n### Using bower's cache\n\nBower supports installing packages from its local cache (without internet connection), if the packages were installed before.\n```\nbower install <package-name> --offline\n```\nThe content of the cache can be listed with:\n```\nbower cache list\n```\nThe cache can be cleaned with:\n```\nbower cache clean\n```\n\n## Configuration\n\nBower can be configured using JSON in a `.bowerrc` file.\n\nThe current spec can be read\n[here](https://docs.google.com/document/d/1APq7oA9tNao1UYWyOm8dKqlRP2blVkROYLZ2fLIjtWc/edit#heading=h.4pzytc1f9j8k)\nin the `Configuration` section.\n\n\n## Defining a package\n\nYou must create a `bower.json` in your project's root, and specify all of its\ndependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`,\nand is useful for locking down a project's dependencies.\n\n*NOTE:* In versions of Bower before 0.9.0 the package metadata file was called\n`component.json` rather than `bower.json`. This has changed to avoid a name\nclash with another tool. You can still use `component.json` for now but it is\ndeprecated and the automatic fallback is likely to be removed in an upcoming\nrelease.\n\nYou can interactively create a `bower.json` with the following command:\n\n```\nbower init\n```\n\nThe `bower.json` defines several options:\n\n* `name` (required): The name of your package.\n* `version`: A semantic version number (see [semver](http://semver.org/)).\n* `main` [string|array]: The primary endpoints of your package.\n* `ignore` [array]: An array of paths not needed in production that you want\n  Bower to ignore when installing your package.\n* `dependencies` [hash]: Packages your package depends upon in production.\n* `devDependencies` [hash]: Development dependencies.\n* `private` [boolean]: Set to true if you want to keep the package private and \n  do not want to register the package in future.\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n```\n\n### Registering packages\n\nTo register a new package:\n\n* There **must** be a valid manifest JSON in the current working directory.\n* Your package should use [semver](http://semver.org/) Git tags.\n* Your package **must** be available at a Git endpoint (e.g., GitHub); remember\n  to push your Git tags!\n\nThen use the following command:\n\n```\nbower register <my-package-name> <git-endpoint>\n```\n\nThe Bower registry does not have authentication or user management at this point\nin time. It's on a first come, first served basis. Think of it like a URL\nshortener. Now anyone can run `bower install <my-package-name>`, and get your\nlibrary installed.\n\nThere is no direct way to unregister a package yet. For now, you can [request a\npackage be unregistered](https://github.com/bower/bower/issues/120).\n\n\n## Consuming a package\n\nBower also makes available a source mapping. This can be used by build tools to\neasily consume Bower packages.\n\nIf you pass the `--paths` option to Bower's `list` command, you will get a\nsimple path-to-name mapping:\n\n```json\n{\n  \"backbone\": \"bower_components/backbone/index.js\",\n  \"jquery\": \"bower_components/jquery/index.js\",\n  \"underscore\": \"bower_components/underscore/index.js\"\n}\n```\n\nAlternatively, every command supports the `--json` option that makes bower\noutput JSON. Command result is outputted to `stdout` and error/logs to\n`stderr`.\n\n\n## Programmatic API\n\nBower provides a powerful, programmatic API. All commands can be accessed\nthrough the `bower.commands` object.\n\n```js\nvar bower = require('bower');\n\nbower.commands\n.install(['jquery'], { save: true }, { /* custom config */ })\n.on('end', function (installed) {\n    console.log(installed);\n});\n\nbower.commands\n.search('jquery', {})\n.on('end', function (results) {\n    console.log(results);\n});\n```\n\nCommands emit four types of events: `log`, `prompt`, `end`, `error`.\n\n* `log` is emitted to report the state/progress of the command.\n* `prompt` is emitted whenever the user needs to be prompted.\n* `error` will only be emitted if something goes wrong.\n* `end` is emitted when the command successfully ends.\n\nFor a better of idea how this works, you may want to check out [our bin\nfile](https://github.com/bower/bower/blob/master/bin/bower).\n\nWhen using bower programmatically, prompting is disabled by default. Though you can enable it when calling commands with `interactive: true` in the config.\nThis requires you to listen for the `prompt` event and handle the prompting yourself. The easiest way is to use the [inquirer](https://npmjs.org/package/inquirer) npm module like so:\n\n```js\nvar inquirer =  require('inquirer');\n\nbower.commands\n.install(['jquery'], { save: true }, { interactive: true })\n// ..\n.on('prompt', function (prompts, callback) {\n    inquirer.prompt(prompts, callback);\n});\n```\n\n\n## Completion (experimental)\n\n_NOTE_: Completion is still not implemented for the 1.0.0 release\n\nBower now has an experimental `completion` command that is based on, and works\nsimilarly to the [npm completion](https://npmjs.org/doc/completion.html). It is\nnot available for Windows users.\n\nThis command will output a Bash / ZSH script to put into your `~/.bashrc`,\n`~/.bash_profile`, or `~/.zshrc` file.\n\n```\nbower completion >> ~/.bash_profile\n```\n\n\n## Contact\n\nHave a question?\n\n* [StackOverflow](http://stackoverflow.com/questions/tagged/bower)\n* [Mailinglist](http://groups.google.com/group/twitter-bower) - twitter-bower@googlegroups.com\n* [\\#bower](http://webchat.freenode.net/?channels=bower) on Freenode\n\n\n## Contributing to this project\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTING.md).\n\n* [Bug reports](CONTRIBUTING.md#bugs)\n* [Feature requests](CONTRIBUTING.md#features)\n* [Pull requests](CONTRIBUTING.md#pull-requests)\n\n\n## Authors\n\n* [@fat](https://github.com/fat)\n* [@maccman](https://github.com/maccman)\n* [@satazor](https://github.com/satazor)\n\nThanks for assistance and contributions:\n\n[@addyosmani](https://github.com/addyosmani),\n[@angus-c](https://github.com/angus-c),\n[@borismus](https://github.com/borismus),\n[@carsonmcdonald](https://github.com/carsonmcdonald),\n[@chriseppstein](https://github.com/chriseppstein),\n[@danwrong](https://github.com/danwrong),\n[@davidmaxwaterman](https://github.com/davidmaxwaterman),\n[@desandro](https://github.com/desandro),\n[@hemanth](https://github.com/hemanth),\n[@isaacs](https://github.com/isaacs),\n[@josh](https://github.com/josh),\n[@jrburke](https://github.com/jrburke),\n[@marcelombc](https://github.com/marcelombc),\n[@marcooliveira](https://github.com/marcooliveira),\n[@mklabs](https://github.com/mklabs),\n[@MrDHat](https://github.com/MrDHat),\n[@necolas](https://github.com/necolas),\n[@paulirish](https://github.com/paulirish),\n[@richo](https://github.com/richo),\n[@rvagg](https://github.com/rvagg),\n[@sindresorhus](https://github.com/sindresorhus),\n[@SlexAxton](https://github.com/SlexAxton),\n[@sstephenson](https://github.com/sstephenson),\n[@svnlto](https://github.com/svnlto),\n[@tomdale](https://github.com/tomdale),\n[@uzquiano](https://github.com/uzquiano),\n[@visionmedia](https://github.com/visionmedia),\n[@wagenet](https://github.com/wagenet),\n[@wibblymat](https://github.com/wibblymat),\n[@wycats](https://github.com/wycats)\n\n\n## License\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the MIT License\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/bower/issues"},"_id":"bower@1.2.8","dist":{"shasum":"f63c0804a267d5ffaf2fd3fd488367e73dce202f","tarball":"http://registry.npmjs.org/bower/-/bower-1.2.8.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"wibblymat","email":"mat@wibbly.org.uk"},"maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"},{"name":"wibblymat","email":"mat@wibbly.org.uk"},{"name":"paulirish","email":"paul.irish@gmail.com"}],"directories":{}}},"readme":"BOWER\n=====\n\n### Introduction\n\nBower is a package manager for the web. Bower lets you easily install assets such as images, CSS and JavaScript, and manages dependencies for you.\n\nFor example, to install a package, run:\n\n    bower install jquery\n\nThis will download jQuery to `./components/jquery`. That's it. The idea is that Bower does package management and package management only.\n\n### Installing Bower\n\nBower is installed using [Node](http://nodejs.org/) and [npm](http://npmjs.org/) (oh my, how meta).\n\n    npm install bower -g\n\n### Usage\n\nYour best friend at this stage is probably `bower --help`.\n\nTo install a package:\n\n    bower install jquery\n    bower install git://github.com/maccman/package-jquery.git\n    bower install http://code.jquery.com/jquery-1.7.2.js\n    bower install ./repos/jquery\n\nAs you can see, packages can be installed by name, Git endpoint, URL or local path.\n\nTo update a package, you need to reference it by name:\n\n    bower update jquery-ui\n\nTo list installed packages:\n\n    bower list\n\nTo search for packages:\n\n    bower search [name]\n\nTo list all the available packages, just call `bower search` without specifying a name.\n\n### Defining a package\n\nYou can create a `component.json` file in your project's root, specifying all of its dependencies. This is similar to Node's `package.json`, or Ruby's `Gemfile`, and is useful for locking down a project dependencies.\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./path/to/main.css\"\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\nPut this under your project's root, listing all of your dependencies. When you run `bower install`, bower will read this `component.json` file, resolve all the relevant dependencies and install them.\n\nFor now, `name`, `version`, `main`, and `dependencies` are the only properties that are used by bower. If you have several files you're distributing as a part of your package, alternatively pass an array to `main` like this:\n\n```json\n{\n  \"name\": \"myProject\",\n  \"version\": \"1.0.0\",\n  \"main\": [\"./path/to/app.css\", \"./path/to/app.js\", \"./path/to/sprite.img\"]\n  \"dependencies\": {\n    \"jquery\": \"~1.7.2\"\n  }\n}\n```\n\n### Installing dependencies\n\nDependencies are installed locally via the `bower install` command. First they’re resolved to find conflicts. Then they’re downloaded and unpacked in a local sub directory called `./components`, for example:\n\n\n```\n/component.json\n/components/jquery/index.js\n/components/jquery/component.json\n```\n\nYou can also install packages one at a time `bower install git://my/git/thing`\n\nThere are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n### Deploying\n\nThe easiest approach is to use bower statically, just reference the packages manually from a script tag:\n\n    <script src=\"components/jquery/index.js\"></script>\n\nFor more complex projects, you'll probably want to concatenate your scripts. Bower is just a package manager, but there are lots of awesome libraries out there to help you do this, such as [Sprockets](https://github.com/sstephenson/sprockets) and [RequireJS](http://requirejs.org/).\n\nFor example, to use Sprockets:\n\n```ruby\nenvironment = Sprockets::Environment.new\nenvironment.append_path 'components'\nenvironment.append_path 'public'\nrun environment\n```\n\n### Package Consumption\n\nBower also makes available a source mapping – this can be used by build tools to easily consume bower components.\n\nIf you pass the option `--map` to bower's `list` command it will generate a json with dependency objects. Alternatively, you can pass the `--paths` flag to the `list` command to get a simple path to name mapping:\n\n```json\n{\n  \"backbone\": \"components/backbone/index.js\",\n  \"jquery\": \"components/jquery/index.js\",\n  \"underscore\": \"components/underscore/index.js\"\n}\n```\n\n### Authoring packages\n\nTo register a new package, it's as simple as specifying a `component.json`, pushing the package to a Git endpoint, say GitHub, and running:\n\n    bower register myawesomepackagename git://github.com/maccmans/face\n\nThere's no authentication or user management. It's on a first come, first served basis. Think of it like a URL shortener. Now anyone can run `bower install myawesomepackagename`, and get your library installed.\n\n### Philosophy\n\nCurrently, people are managing dependencies, such as JavaScript libraries, manually. This sucks, and we want to change it.\n\nIn a nutshell, Bower is a generic tool which will resolve dependencies and lock packages down to a version. It runs over Git, and is package-agnostic. A package may contain JavaScript, CSS, images, etc., and doesn't rely on any particular transport (AMD, CommonJS, etc).\n\nBower then makes available a simple programatic api which exposes the package dependency model, so that existing build tools (like Sprockets, LoadBuilder, curls.js, Ender, etc.) can consume it and build files accordingly.\n\n\n### FAQ\n\n**What distinguishes Bower from Jam, Volo or Ender? What does it do better?**\n\nBower is a lower level component then Jam, Volo, or Ender. These managers could consume bower as a dependency.\n\nBower's aim is simply to install git paths, resolve dependencies from a component.json, check versions, and then provide an api which reports on these things. Nothing more. This is a major diversion from past attempts at browser package management. \n\nBower is working under the assumption that there is a single, common problem in frontend application development: dependency resolution. Past attempts (Jam, Volo, Ender) try to tackle this problem in such a way that they actually end up alienating and further segregating the javascript community around transports (sprockets, commonjs, requirejs, regular script tags).\n\nBower is trying to solve the problem of package management in a more generic, unopionated way. It get's away with this by exposing an api which can then be consumed by a more opinionated build stack.\n\n**Volo is an arguably more established project and works with the GitHub search API. Will it take long for Bower to contain a decent number of packages?**\n\nBower (being a git powered package manager) in theory should be capable of consuming most every package that volo does, with the aditional benifit of supporting internal networks and other git repositories not hosted on github.\n\n**We recently saw what happened when the NPM registry completely went down. Is a central point of failure possible for Bower and if so, do you have redundancy planned?**\n\nThere's no redundancy planned at the moment, as bower just installs git urls. It's up to the url provider to establish redundancy.\n\n**Isn't having a package.json file going to conflict with my npm's package.json? Will this be a problem?**\n\nDon't use a package.json – user component.json.\n\n**Bower is an open-source Twitter project. How well can we expect it to be maintained in the future?**\n\nTwitter is in the process of migrating it's frontend architecture onto bower, so it's fairly safe to say it will be maintained and invested in going forward.\n\n\n### Contact\n\nHave a question? Ask on our mailing list!\n\ntwitter-bower@googlegroups.com\n\nhttp://groups.google.com/group/twitter-bower\n\n### Authors\n\n+ [@fat](http://github.com/fat)\n+ [@maccman](http://github.com/maccman)\n\nThanks for assistance and contributions:\n\n+ [@addyosmani](http://github.com/addyosmani)\n+ [@angus-c](http://github.com/angus-c)\n+ [@borismus](http://github.com/borismus)\n+ [@chriseppstein](http://github.com/chriseppstein)\n+ [@danwrong](http://github.com/danwrong)\n+ [@desandro](http://github.com/desandro)\n+ [@isaacs](http://github.com/isaacs)\n+ [@josh](http://github.com/josh)\n+ [@jrburke](http://github.com/jrburke)\n+ [@mklabs](http://github.com/mklabs)\n+ [@paulirish](http://github.com/paulirish)\n+ [@rvagg](http://github.com/rvagg)\n+ [@sindresorhus](http://github.com/sindresorhus)\n+ [@SlexAxton](http://github.com/SlexAxton)\n+ [@sstephenson](http://github.com/sstephenson)\n+ [@tomdale](http://github.com/tomdale)\n+ [@visionmedia](http://github.com/visionmedia)\n+ [@wagenet](http://github.com/wagenet)\n+ [@wycats](http://github.com/wycats)\n","maintainers":[{"name":"fat","email":"jacobthornton@gmail.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"},{"name":"wibblymat","email":"mat@wibbly.org.uk"},{"name":"paulirish","email":"paul.irish@gmail.com"}],"time":{"0.1.0":"2012-09-04T23:58:50.678Z","0.1.2":"2012-09-16T21:38:38.487Z","0.1.3":"2012-09-18T17:38:03.910Z","0.2.0":"2012-09-25T20:56:59.910Z","0.3.0":"2012-10-22T22:41:20.636Z","0.3.1":"2012-10-31T17:59:13.303Z","0.3.2":"2012-11-04T18:42:18.980Z","0.4.0":"2012-11-12T01:12:39.383Z","0.5.0":"2012-11-19T20:20:19.934Z","0.5.1":"2012-11-20T21:29:33.849Z","0.6.0":"2012-11-21T23:31:44.733Z","0.6.1":"2012-11-23T01:44:49.331Z","0.6.2":"2012-11-23T09:24:38.936Z","0.6.3":"2012-11-24T15:37:36.332Z","0.6.4":"2012-11-30T00:52:57.641Z","0.6.5":"2012-12-01T14:37:55.875Z","0.6.6":"2012-12-03T22:34:41.827Z","0.6.7":"2012-12-10T17:57:46.128Z","0.6.8":"2012-12-14T11:05:20.328Z","0.7.0":"2013-02-01T00:42:17.216Z","0.7.1":"2013-02-18T22:04:45.413Z","0.8.0":"2013-02-24T16:23:48.343Z","0.8.1":"2013-02-25T23:40:20.479Z","0.8.2":"2013-02-26T21:04:33.825Z","0.8.3":"2013-02-27T10:09:44.306Z","0.8.4":"2013-03-01T11:49:09.335Z","0.8.5":"2013-03-04T01:54:43.312Z","0.8.6":"2013-04-03T22:54:55.735Z","0.9.0":"2013-04-25T22:18:26.197Z","0.9.1":"2013-04-27T11:04:53.116Z","0.9.2":"2013-04-27T12:01:19.669Z","0.10.0":"2013-07-23T00:08:34.010Z","1.0.0":"2013-07-23T00:13:33.288Z","1.0.1":"2013-07-29T22:59:09.752Z","1.0.2":"2013-07-29T23:18:42.938Z","1.0.3":"2013-07-30T08:00:06.322Z","1.1.0":"2013-08-03T16:32:34.920Z","1.1.1":"2013-08-08T13:14:56.837Z","1.1.2":"2013-08-10T15:11:02.126Z","1.2.0":"2013-08-19T07:44:52.060Z","1.2.1":"2013-08-19T18:21:29.630Z","1.2.2":"2013-08-20T22:33:43.236Z","1.2.3":"2013-08-22T18:10:17.941Z","1.2.4":"2013-08-23T22:13:55.396Z","1.2.5":"2013-08-28T21:07:07.306Z","1.2.6":"2013-09-04T01:44:14.517Z","1.2.7":"2013-09-29T22:07:28.982Z","1.2.8":"2013-12-02T13:45:49.498Z"},"author":{"name":"Twitter"},"users":{"sjonnet":true,"sjonnet19":true,"vincentmac":true,"liqweed":true,"alefteris":true,"maxmaximov":true,"cparker15":true,"leesei":true,"passy":true,"jamesmgreene":true,"ianmcburnie":true,"moonpyk":true,"pid":true,"gableroux":true,"gdi2290":true,"codylindley":true,"tigefa":true,"aniketpant":true,"mhaidarh":true,"cathymacars":true,"xtopher":true,"darosh":true,"denisix":true,"nuzoo":true},"repository":{"type":"git","url":"git://github.com/bower/bower.git"},"_attachments":{"bower-1.2.8.tgz":{"content_type":"application/octet-stream","revpos":176,"digest":"md5-aYasXMd8Ob7yeVsqRsoxVw==","length":98688,"stub":true},"bower-1.2.7.tgz":{"content_type":"application/octet-stream","revpos":170,"digest":"md5-Yrr8K0FrvOJU1R91tjj3mw==","length":97922,"stub":true},"bower-1.2.6.tgz":{"content_type":"application/octet-stream","revpos":167,"digest":"md5-naLzNv5VBiJ4CtkZI1NAqA==","length":97253,"stub":true},"bower-1.2.5.tgz":{"content_type":"application/octet-stream","revpos":165,"digest":"md5-R3LJRxQ04al/J2WjyxQM0Q==","length":96890,"stub":true},"bower-1.2.4.tgz":{"content_type":"application/octet-stream","revpos":162,"digest":"md5-UYV38HiSEFPL654CiIMDlA==","length":96459,"stub":true},"bower-1.2.3.tgz":{"content_type":"application/octet-stream","revpos":160,"digest":"md5-cUhiDYG2q4AL2BxvM7Db8g==","length":96222,"stub":true},"bower-1.2.2.tgz":{"content_type":"application/octet-stream","revpos":158,"digest":"md5-qpa76N+UszQO7Cw7up1p5A==","length":95990,"stub":true},"bower-1.2.1.tgz":{"content_type":"application/octet-stream","revpos":156,"digest":"md5-45PEI6SBBbETDJ87MGCqeA==","length":95635,"stub":true},"bower-1.2.0.tgz":{"content_type":"application/octet-stream","revpos":154,"digest":"md5-4++Q12ogKvmokR7YDw3OPA==","length":95601,"stub":true},"bower-1.1.2.tgz":{"content_type":"application/octet-stream","revpos":151,"digest":"md5-XKaNAUELFAGBP9o4dYGkpg==","length":89524,"stub":true},"bower-1.1.1.tgz":{"content_type":"application/octet-stream","revpos":149,"digest":"md5-fivfjm3tPMQ8a413fBpQkg==","length":88909,"stub":true},"bower-1.1.0.tgz":{"content_type":"application/octet-stream","revpos":143,"digest":"md5-O7U8GJ9D1pY6EdtPnHy80Q==","length":87055,"stub":true},"bower-1.0.3.tgz":{"content_type":"application/octet-stream","revpos":141,"digest":"md5-HiJMhVRE8Y0TwPHLcJZsDg==","length":84759,"stub":true},"bower-1.0.2.tgz":{"content_type":"application/octet-stream","revpos":127,"digest":"md5-qPHVuN/l2zAFTsdV9/v7ng==","length":84485,"stub":true},"bower-1.0.1.tgz":{"content_type":"application/octet-stream","revpos":125,"digest":"md5-/1KzonWMU7LW0USAYCowCQ==","length":84421,"stub":true},"bower-1.0.0.tgz":{"content_type":"application/octet-stream","revpos":123,"digest":"md5-EeGbUMo2mT5wEmpEAFYVRg==","length":80838,"stub":true},"bower-0.10.0.tgz":{"content_type":"application/octet-stream","revpos":115,"digest":"md5-R06VA6cm7x59nRsYAAXb+A==","length":180628,"stub":true},"bower-0.9.2.tgz":{"content_type":"application/octet-stream","revpos":98,"digest":"md5-PQ30ftKTyGZ+7RP1deaqMw==","length":177164,"stub":true},"bower-0.9.1%2Bproper.tgz":{"content_type":"application/octet-stream","revpos":97,"digest":"md5-blTlcOs39zd183v/s1a7HQ==","length":177153,"stub":true},"bower-0.9.1%2B1.tgz":{"content_type":"application/octet-stream","revpos":96,"digest":"md5-Zgn87ZDsTLQn2aTE/22bVg==","length":177149,"stub":true},"bower-0.9.1.tgz":{"content_type":"application/octet-stream","revpos":94,"digest":"md5-8S8kAluaWH3O6KjgW3o6xw==","length":177121,"stub":true},"bower-0.9.0.tgz":{"content_type":"application/octet-stream","revpos":92,"digest":"md5-u7pPEpr/YWMV2uF4OcAmkw==","length":176761,"stub":true},"bower-0.8.6.tgz":{"content_type":"application/octet-stream","revpos":83,"digest":"md5-3/kRSvsbLS9rfNgNLNEyLA==","length":171143,"stub":true},"bower-0.8.5.tgz":{"content_type":"application/octet-stream","revpos":80,"digest":"md5-JYbAy3kf0HmLH9i3Q43JlA==","length":171274,"stub":true},"bower-0.8.4.tgz":{"content_type":"application/octet-stream","revpos":78,"digest":"md5-o/s/iijKBABJjt92WGihQA==","length":171177,"stub":true},"bower-0.8.3.tgz":{"content_type":"application/octet-stream","revpos":76,"digest":"md5-gY+5dAgmyXgCvOb0xO7UpA==","length":170940,"stub":true},"bower-0.8.2.tgz":{"content_type":"application/octet-stream","revpos":74,"digest":"md5-KFPsifA3pLOkb52iomBVYA==","length":170490,"stub":true},"bower-0.8.1.tgz":{"content_type":"application/octet-stream","revpos":72,"digest":"md5-RkNfA/0qJHXqQRJWL68qVw==","length":170332,"stub":true},"bower-0.8.0.tgz":{"content_type":"application/octet-stream","revpos":70,"digest":"md5-1FhkkLYhbf7Hfuc3gce1GQ==","length":170281,"stub":true},"bower-0.7.1.tgz":{"content_type":"application/octet-stream","revpos":68,"digest":"md5-yR2J5Jh3opJWBTrzeCayGg==","length":164037,"stub":true},"bower-0.7.0.tgz":{"content_type":"application/octet-stream","revpos":66,"digest":"md5-I3t+l8E9nECkZw7a9ktrzQ==","length":164075,"stub":true},"bower-0.6.8.tgz":{"content_type":"application/octet-stream","revpos":64,"digest":"md5-5nJj1cE527VhztWZVKG34w==","length":156176,"stub":true},"bower-0.6.7.tgz":{"content_type":"application/octet-stream","revpos":61,"digest":"md5-RgBIhHNJoXSbuC2HL4EmXA==","length":155831,"stub":true},"bower-0.6.6.tgz":{"content_type":"application/octet-stream","revpos":55,"digest":"md5-QJ3lUR/SJOPACxNhiUdfvw==","length":155392,"stub":true},"bower-0.6.5.tgz":{"content_type":"application/octet-stream","revpos":53,"digest":"md5-+sUIpsX0qmnTVYZOpTOfLw==","length":155335,"stub":true},"bower-0.6.4.tgz":{"content_type":"application/octet-stream","revpos":47,"digest":"md5-3yx64DGdjJWbWWvQso5w4w==","length":155201,"stub":true},"bower-0.6.3.tgz":{"content_type":"application/octet-stream","revpos":41,"digest":"md5-MCRo18r5MP4rd6v54DkL2Q==","length":155048,"stub":true},"bower-0.6.2.tgz":{"content_type":"application/octet-stream","revpos":39,"digest":"md5-pE6F6DakHx7wAM/5bhqD6w==","length":155022,"stub":true},"bower-0.6.1.tgz":{"content_type":"application/octet-stream","revpos":37,"digest":"md5-VAmBd515qW9hvcuiWsGnnQ==","length":154978,"stub":true},"bower-0.6.0.tgz":{"content_type":"application/octet-stream","revpos":31,"digest":"md5-cli0lF0ONK62RxUK8puN5A==","length":154857,"stub":true},"bower-0.5.1.tgz":{"content_type":"application/octet-stream","revpos":29,"digest":"md5-s/0ZMg5mE8ZirFn/AgJgfw==","length":152664,"stub":true},"bower-0.5.0.tgz":{"content_type":"application/octet-stream","revpos":27,"digest":"md5-rINL0JNZ73rRAj2puiE3rg==","length":151664,"stub":true},"bower-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":25,"digest":"md5-W9eaZFBJfw9m66wVUMQ3Gg==","length":24766,"stub":true},"bower-0.3.2.tgz":{"content_type":"application/octet-stream","revpos":18,"digest":"md5-A6yLCrjijISHye4pqjtjeg==","length":23909,"stub":true},"bower-0.3.1.tgz":{"content_type":"application/octet-stream","revpos":16,"digest":"md5-7fLxFN7vAluDMurphFXufQ==","length":23574,"stub":true},"bower-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":14,"digest":"md5-MKpoiU6PqqLkIn1MLF3xYQ==","length":22871,"stub":true},"bower-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":12,"digest":"md5-NTXniqXJuOaYFHR6jZWtFw==","length":17629,"stub":true},"bower-0.1.3.tgz":{"content_type":"application/octet-stream","revpos":10,"digest":"md5-Y/Q/gUvsX+5XMNCimLDhSw==","length":17196,"stub":true},"bower-0.1.2.tgz":{"content_type":"application/octet-stream","revpos":8,"digest":"md5-7elyjJ1ee60M+Lu+n2fxhw==","length":16942,"stub":true},"bower-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-mEGCk5Xx6HHP/j4bVuMqUA==","length":16727,"stub":true}},"_etag":"\"7QQ0BWPKX5NPHRCYNRIY6A05\""}