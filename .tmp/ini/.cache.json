{"_id":"ini","_rev":"19-63cab64455b3961bc43f6fa2800fbc12","name":"ini","description":"An ini encoder/decoder for node","dist-tags":{"latest":"1.1.0"},"versions":{"1.0.0":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"ini","description":"An ini encoder/decoder for node","version":"1.0.0","repository":{"type":"git","url":"git://github.com/isaacs/ini.git"},"main":"ini.js","scripts":{"test":"tap test/*.js"},"engines":{"node":"*"},"dependencies":{},"devDependencies":{"tap":"~0.0.9"},"_npmJsonOpts":{"file":"/Users/isaacs/.npm/ini/1.0.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"ini@1.0.0","_engineSupported":true,"_npmVersion":"1.0.22","_nodeVersion":"v0.4.11-pre","_defaultsLoaded":true,"dist":{"shasum":"a17171a4fc9149e26c7951e28db44b1ffab40676","tarball":"http://registry.npmjs.org/ini/-/ini-1.0.0.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"1.0.1":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"ini","description":"An ini encoder/decoder for node","version":"1.0.1","repository":{"type":"git","url":"git://github.com/isaacs/ini.git"},"main":"ini.js","scripts":{"test":"tap test/*.js"},"engines":{"node":"*"},"dependencies":{},"devDependencies":{"tap":"~0.0.9"},"_npmJsonOpts":{"file":"/Users/isaacs/.npm/ini/1.0.1/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"ini@1.0.1","_engineSupported":true,"_npmVersion":"1.0.28-pre-DEV-UNSTABLE","_nodeVersion":"v0.5.7-pre","_defaultsLoaded":true,"dist":{"shasum":"09de7da168015db47155b981bc18821e7ee4a1f6","tarball":"http://registry.npmjs.org/ini/-/ini-1.0.1.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"1.0.2":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"ini","description":"An ini encoder/decoder for node","version":"1.0.2","repository":{"type":"git","url":"git://github.com/isaacs/ini.git"},"main":"ini.js","scripts":{"test":"tap test/*.js"},"engines":{"node":"*"},"dependencies":{},"devDependencies":{"tap":"~0.0.9"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"ini@1.0.2","_engineSupported":true,"_npmVersion":"1.1.0-beta-10","_nodeVersion":"v0.6.7-pre","_defaultsLoaded":true,"dist":{"shasum":"f240a2e4af74cf012440983b1718210fb75a325c","tarball":"http://registry.npmjs.org/ini/-/ini-1.0.2.tgz"},"readme":"An ini format parser and serializer for node.\n\nSections are treated as nested objects.  Items before the first heading\nare saved on the object directly.\n\n## Usage\n\nConsider an ini-file `config.ini` that looks like this:\n\n    ; this comment is being ignored\n    scope = global\n\n    [database]\n    user = dbuser\n    password = dbpassword\n    database = use_this_database\n\n    [paths.default]\n    datadir = /var/lib/data\n\nYou can read, manipulate and write the ini-file like so:\n\n    var fs = require('fs')\n      , ini = require('ini')\n\n    var config = ini.parse(fs.readFileSync('./config.ini', 'utf-8'))\n\n    config.scope = 'local'\n    config.database.database = 'use_another_database'\n    config.paths.default.tmpdir = '/tmp'\n    delete config.paths.default.datadir\n\n    fs.writeFileSync('./config_modified.ini', ini.stringify(config, 'section'))\n\nThis will result in a file called `config_modified.ini` being written to the filesystem with the following content:\n\n    [section]\n    scope = local\n    [section.database]\n    user = dbuser\n    password = dbpassword\n    database = use_another_database\n    [section.paths.default]\n    tmpdir = /tmp\n\n## API\n\n### decode(inistring)\nDecode the ini-style formatted `inistring` into a nested object.\n\n### parse(inistring)\nAlias for `decode(inistring)`\n\n### encode(object, [section])\nEncode the object `object` into an ini-style formatted string. If the optional parameter `section` is given, then all top-level properties of the object are put into this section and the `section`-string is prepended to all sub-sections, see the usage example above.\n\n### stringify(object, [section])\nAlias for `encode(object, [section])`\n\n### safe(val)\nEscapes the string `val` such that it is safe to be used as a key or value in an ini-file. Basically escapes quotes. For example\n\n    ini.safe('\"unsafe string\"')\n\nwould result in\n\n    \"\\\"unsafe string\\\"\"\n\n### unsafe(val)\nUnescapes the string `val`\n\n","maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"1.0.3":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"ini","description":"An ini encoder/decoder for node","version":"1.0.3","repository":{"type":"git","url":"git://github.com/isaacs/ini.git"},"main":"ini.js","scripts":{"test":"tap test/*.js"},"engines":{"node":"*"},"dependencies":{},"devDependencies":{"tap":"~0.0.9"},"readme":"An ini format parser and serializer for node.\n\nSections are treated as nested objects.  Items before the first heading\nare saved on the object directly.\n\n## Usage\n\nConsider an ini-file `config.ini` that looks like this:\n\n    ; this comment is being ignored\n    scope = global\n\n    [database]\n    user = dbuser\n    password = dbpassword\n    database = use_this_database\n\n    [paths.default]\n    datadir = /var/lib/data\n\nYou can read, manipulate and write the ini-file like so:\n\n    var fs = require('fs')\n      , ini = require('ini')\n\n    var config = ini.parse(fs.readFileSync('./config.ini', 'utf-8'))\n\n    config.scope = 'local'\n    config.database.database = 'use_another_database'\n    config.paths.default.tmpdir = '/tmp'\n    delete config.paths.default.datadir\n\n    fs.writeFileSync('./config_modified.ini', ini.stringify(config, 'section'))\n\nThis will result in a file called `config_modified.ini` being written to the filesystem with the following content:\n\n    [section]\n    scope = local\n    [section.database]\n    user = dbuser\n    password = dbpassword\n    database = use_another_database\n    [section.paths.default]\n    tmpdir = /tmp\n\n## API\n\n### decode(inistring)\nDecode the ini-style formatted `inistring` into a nested object.\n\n### parse(inistring)\nAlias for `decode(inistring)`\n\n### encode(object, [section])\nEncode the object `object` into an ini-style formatted string. If the optional parameter `section` is given, then all top-level properties of the object are put into this section and the `section`-string is prepended to all sub-sections, see the usage example above.\n\n### stringify(object, [section])\nAlias for `encode(object, [section])`\n\n### safe(val)\nEscapes the string `val` such that it is safe to be used as a key or value in an ini-file. Basically escapes quotes. For example\n\n    ini.safe('\"unsafe string\"')\n\nwould result in\n\n    \"\\\"unsafe string\\\"\"\n\n### unsafe(val)\nUnescapes the string `val`\n\n","_id":"ini@1.0.3","dist":{"shasum":"a15e830255035b0c4540c1a14b35b6bfff0f00f0","tarball":"http://registry.npmjs.org/ini/-/ini-1.0.3.tgz"},"_npmVersion":"1.1.48","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"1.0.4":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"ini","description":"An ini encoder/decoder for node","version":"1.0.4","repository":{"type":"git","url":"git://github.com/isaacs/ini.git"},"main":"ini.js","scripts":{"test":"tap test/*.js"},"engines":{"node":"*"},"dependencies":{},"devDependencies":{"tap":"~0.0.9"},"readme":"An ini format parser and serializer for node.\n\nSections are treated as nested objects.  Items before the first heading\nare saved on the object directly.\n\n## Usage\n\nConsider an ini-file `config.ini` that looks like this:\n\n    ; this comment is being ignored\n    scope = global\n\n    [database]\n    user = dbuser\n    password = dbpassword\n    database = use_this_database\n\n    [paths.default]\n    datadir = /var/lib/data\n\nYou can read, manipulate and write the ini-file like so:\n\n    var fs = require('fs')\n      , ini = require('ini')\n\n    var config = ini.parse(fs.readFileSync('./config.ini', 'utf-8'))\n\n    config.scope = 'local'\n    config.database.database = 'use_another_database'\n    config.paths.default.tmpdir = '/tmp'\n    delete config.paths.default.datadir\n\n    fs.writeFileSync('./config_modified.ini', ini.stringify(config, 'section'))\n\nThis will result in a file called `config_modified.ini` being written to the filesystem with the following content:\n\n    [section]\n    scope = local\n    [section.database]\n    user = dbuser\n    password = dbpassword\n    database = use_another_database\n    [section.paths.default]\n    tmpdir = /tmp\n\n## API\n\n### decode(inistring)\nDecode the ini-style formatted `inistring` into a nested object.\n\n### parse(inistring)\nAlias for `decode(inistring)`\n\n### encode(object, [section])\nEncode the object `object` into an ini-style formatted string. If the optional parameter `section` is given, then all top-level properties of the object are put into this section and the `section`-string is prepended to all sub-sections, see the usage example above.\n\n### stringify(object, [section])\nAlias for `encode(object, [section])`\n\n### safe(val)\nEscapes the string `val` such that it is safe to be used as a key or value in an ini-file. Basically escapes quotes. For example\n\n    ini.safe('\"unsafe string\"')\n\nwould result in\n\n    \"\\\"unsafe string\\\"\"\n\n### unsafe(val)\nUnescapes the string `val`\n\n","_id":"ini@1.0.4","dist":{"shasum":"da7aee1f450192be7405be1f719683c7574527c1","tarball":"http://registry.npmjs.org/ini/-/ini-1.0.4.tgz"},"_npmVersion":"1.1.48","_npmUser":{"name":"","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"1.0.5":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"ini","description":"An ini encoder/decoder for node","version":"1.0.5","repository":{"type":"git","url":"git://github.com/isaacs/ini.git"},"main":"ini.js","scripts":{"test":"tap test/*.js"},"engines":{"node":"*"},"dependencies":{},"devDependencies":{"tap":"~0.0.9"},"readme":"An ini format parser and serializer for node.\n\nSections are treated as nested objects.  Items before the first heading\nare saved on the object directly.\n\n## Usage\n\nConsider an ini-file `config.ini` that looks like this:\n\n    ; this comment is being ignored\n    scope = global\n\n    [database]\n    user = dbuser\n    password = dbpassword\n    database = use_this_database\n\n    [paths.default]\n    datadir = /var/lib/data\n\nYou can read, manipulate and write the ini-file like so:\n\n    var fs = require('fs')\n      , ini = require('ini')\n\n    var config = ini.parse(fs.readFileSync('./config.ini', 'utf-8'))\n\n    config.scope = 'local'\n    config.database.database = 'use_another_database'\n    config.paths.default.tmpdir = '/tmp'\n    delete config.paths.default.datadir\n\n    fs.writeFileSync('./config_modified.ini', ini.stringify(config, 'section'))\n\nThis will result in a file called `config_modified.ini` being written to the filesystem with the following content:\n\n    [section]\n    scope = local\n    [section.database]\n    user = dbuser\n    password = dbpassword\n    database = use_another_database\n    [section.paths.default]\n    tmpdir = /tmp\n\n## API\n\n### decode(inistring)\nDecode the ini-style formatted `inistring` into a nested object.\n\n### parse(inistring)\nAlias for `decode(inistring)`\n\n### encode(object, [section])\nEncode the object `object` into an ini-style formatted string. If the optional parameter `section` is given, then all top-level properties of the object are put into this section and the `section`-string is prepended to all sub-sections, see the usage example above.\n\n### stringify(object, [section])\nAlias for `encode(object, [section])`\n\n### safe(val)\nEscapes the string `val` such that it is safe to be used as a key or value in an ini-file. Basically escapes quotes. For example\n\n    ini.safe('\"unsafe string\"')\n\nwould result in\n\n    \"\\\"unsafe string\\\"\"\n\n### unsafe(val)\nUnescapes the string `val`\n\n","_id":"ini@1.0.5","dist":{"shasum":"4066aca7252b2783c592decf925500eb7cbf5da6","tarball":"http://registry.npmjs.org/ini/-/ini-1.0.5.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"1.1.0":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"ini","description":"An ini encoder/decoder for node","version":"1.1.0","repository":{"type":"git","url":"git://github.com/isaacs/ini.git"},"main":"ini.js","scripts":{"test":"tap test/*.js"},"engines":{"node":"*"},"dependencies":{},"devDependencies":{"tap":"~0.0.9"},"readme":"An ini format parser and serializer for node.\n\nSections are treated as nested objects.  Items before the first heading\nare saved on the object directly.\n\n## Usage\n\nConsider an ini-file `config.ini` that looks like this:\n\n    ; this comment is being ignored\n    scope = global\n\n    [database]\n    user = dbuser\n    password = dbpassword\n    database = use_this_database\n\n    [paths.default]\n    datadir = /var/lib/data\n    array[] = first value\n    array[] = second value\n    array[] = third value\n\nYou can read, manipulate and write the ini-file like so:\n\n    var fs = require('fs')\n      , ini = require('ini')\n\n    var config = ini.parse(fs.readFileSync('./config.ini', 'utf-8'))\n\n    config.scope = 'local'\n    config.database.database = 'use_another_database'\n    config.paths.default.tmpdir = '/tmp'\n    delete config.paths.default.datadir\n    config.paths.default.array.push('fourth value')\n\n    fs.writeFileSync('./config_modified.ini', ini.stringify(config, 'section'))\n\nThis will result in a file called `config_modified.ini` being written to the filesystem with the following content:\n\n    [section]\n    scope = local\n    [section.database]\n    user = dbuser\n    password = dbpassword\n    database = use_another_database\n    [section.paths.default]\n    tmpdir = /tmp\n    array[] = first value\n    array[] = second value\n    array[] = third value\n    array[] = fourth value\n\n\n## API\n\n### decode(inistring)\nDecode the ini-style formatted `inistring` into a nested object.\n\n### parse(inistring)\nAlias for `decode(inistring)`\n\n### encode(object, [section])\nEncode the object `object` into an ini-style formatted string. If the optional parameter `section` is given, then all top-level properties of the object are put into this section and the `section`-string is prepended to all sub-sections, see the usage example above.\n\n### stringify(object, [section])\nAlias for `encode(object, [section])`\n\n### safe(val)\nEscapes the string `val` such that it is safe to be used as a key or value in an ini-file. Basically escapes quotes. For example\n\n    ini.safe('\"unsafe string\"')\n\nwould result in\n\n    \"\\\"unsafe string\\\"\"\n\n### unsafe(val)\nUnescapes the string `val`\n","readmeFilename":"README.md","_id":"ini@1.1.0","dist":{"shasum":"4e808c2ce144c6c1788918e034d6797bc6cf6281","tarball":"http://registry.npmjs.org/ini/-/ini-1.1.0.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}}},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"time":{"1.0.0":"2011-08-07T07:05:12.514Z","1.0.1":"2011-09-13T17:03:01.369Z","1.0.2":"2012-01-07T22:46:24.188Z","1.0.3":"2012-08-13T18:38:27.785Z","1.0.4":"2012-08-14T23:12:24.868Z","1.0.5":"2012-10-04T17:34:10.486Z","1.1.0":"2013-01-23T01:57:20.617Z"},"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"repository":{"type":"git","url":"git://github.com/isaacs/ini.git"},"users":{"fgribreau":true,"kastor":true},"_attachments":{"ini-1.1.0.tgz":{"content_type":"application/octet-stream","revpos":18,"digest":"md5-M7RVrGTu6klZO1USxK16Sw==","length":4895,"stub":true},"ini-1.0.5.tgz":{"content_type":"application/octet-stream","revpos":16,"digest":"md5-z6RkKk7puTuWGP/4ZSRj/Q==","length":4446,"stub":true},"ini-1.0.4.tgz":{"content_type":"application/octet-stream","revpos":12,"digest":"md5-c+37R2GGyy7ts3PbzFgPNQ==","length":4247,"stub":true},"ini-1.0.3.tgz":{"content_type":"application/octet-stream","revpos":10,"digest":"md5-+1gcopN/ikY2RgDekrI+3Q==","length":4200,"stub":true},"ini-1.0.2.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-cqTOnBcjaVC4MYrOdz3GwQ==","length":3742,"stub":true},"ini-1.0.1.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-srvWQp5CGChxK0uQpIxCsw==","length":2096,"stub":true},"ini-1.0.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-+iNOCINYjeQyaJJPC2aAMg==","length":2089,"stub":true}},"_etag":"\"10CY5CBK53GVBYJF4SYVQDS1U\""}