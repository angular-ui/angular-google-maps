{"_id":"bower-json","_rev":"11-2b28ab2d8a7564d0e6dc62edfbe261fc","name":"bower-json","description":"Read bower.json files with semantics, normalisation, defaults and validation.","dist-tags":{"latest":"0.4.0"},"versions":{"0.1.0-rc.1":{"name":"bower-json","version":"0.1.0-rc.1","description":"Read bower.json files with semantics, normalisation, defaults and validation.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/json/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/json.git"},"main":"lib/json","engines":{"node":">=0.8.0"},"dependencies":{"graceful-fs":"~1.2.2"},"devDependencies":{"expect.js":"~0.2.0","mocha":"~1.12.0"},"scripts":{"test":"mocha -R spec"},"readme":"# bower-json [![Build Status](https://secure.travis-ci.org/bower/json.png?branch=master)](http://travis-ci.org/bower/json)\n\nRead `bower.json` files with semantics, normalisation, defaults and validation.\n\n\n## Usage\n\n#### .read(file, callback)\n\nReads `file` and applies normalisation, defaults and validation according to the `bower.json` spec.   \nIf the passed `file` does not exists, the callback is called with `error.code` equal to `ENOENT`.   \nIf the passed `file` contents are not a valid JSON, the callback is called with `error.code` equal to `EMALFORMED`.   \nIf the `json` does not comply with the `bower.json` spec, the callback is called with `error.code` equal to `EINVALID`.\n\n```js\nvar bowerJson = require('bower-json');\n\n// Can also be used by simply calling bowerJson()\nbowerJson.read('/path/to/bower.json', function (err, json) {\n    if (err) {\n        console.error('There was an error reading the file');\n        console.error(err.message);\n        return;\n    }\n\n    console.log('JSON: ', json);\n});\n```\n\n\n#### .parse(json, callback)\n\nParses an object. Useful when you want to apply normalisation, defaults and validation directly to an object.   \nIf the `json` does not comply with the `bower.json` spec, the callback is called with `error.code` equal to `EINVALID`.\n\n```js\nvar bowerJson = require('bower-json');\n\nvar json = {\n    name: 'my-package',\n    version: '0.0.1'\n};\n\nbowerJson.parse(json, function (err, json) {\n    if (err) {\n        console.error('There was an error parsing the object');\n        console.error(err.message);\n        return;\n    }\n\n    console.log('Parsed: ', json);\n});\n```\n\n\n#### .find(folder, callback)\n\nFinds the `json` filename inside a folder.   \nChecks if a `bower.json` exists, falling back to the deprecated `component.json`.   \nIf no file was found, the callback is called with a `error.code` of `ENOENT`.\n\n```js\nvar bowerJson = require('bower-json');\n\nbowerJson.find('/path/to/folder', function (err, filename) {\n    if (err) {\n        console.error('There is no json file in the folder');\n        return;\n    }\n\n    console.log('Filename: ', filename);\n\n    // Now that we got the filename, we can read its contents\n    bowerJson.read(filename, function (err, json) {\n        if (err) {\n            console.error('There was an error reading the file');\n            console.error(err.message);\n            return;\n        }\n\n        console.log('JSON: ', json);\n    });\n});\n```\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/json/issues"},"_id":"bower-json@0.1.0-rc.1","dist":{"shasum":"4e622a300ecc54b6cb784e52ece2cfaeed8baf08","tarball":"http://registry.npmjs.org/bower-json/-/bower-json-0.1.0-rc.1.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.2.0":{"name":"bower-json","version":"0.2.0","description":"Read bower.json files with semantics, normalisation, defaults and validation.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/json/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/json.git"},"main":"lib/json","engines":{"node":">=0.8.0"},"dependencies":{"deep-extend":"~0.2.5","graceful-fs":"~2.0.0"},"devDependencies":{"expect.js":"~0.2.0","mocha":"~1.12.0","grunt":"~0.4.1","grunt-contrib-watch":"~0.4.4","grunt-contrib-jshint":"~0.6.0","grunt-simple-mocha":"~0.4.0"},"scripts":{"test":"grunt test"},"readme":"# bower-json [![Build Status](https://secure.travis-ci.org/bower/json.png?branch=master)](http://travis-ci.org/bower/json)\n\nRead `bower.json` files with semantics, normalisation, defaults and validation.\n\n\n## Usage\n\n#### .read(file, options, callback)\n\nReads `file` and applies normalisation, defaults and validation according to the `bower.json` spec.   \nIf the passed `file` does not exist, the callback is called with `error.code` equal to `ENOENT`.   \nIf the passed `file` contents are not valid JSON, the callback is called with `error.code` equal to `EMALFORMED`.   \nIf the `json` does not comply with the `bower.json` spec, the callback is called with `error.code` equal to `EINVALID`.\n\nIf `file` is a directory, `find()` will be used to search for the json file.   \nThe `options` argument is optional and can be omitted. These options will be passed to `parse` method.\n\n\n```js\nvar bowerJson = require('bower-json');\n\n// Can also be used by simply calling bowerJson()\nbowerJson.read('/path/to/bower.json', function (err, json) {\n    if (err) {\n        console.error('There was an error reading the file');\n        console.error(err.message);\n        return;\n    }\n\n    console.log('JSON: ', json);\n});\n```\n\n\n#### .parse(json, options)\n\nParses an object. Useful when you want to apply normalisation and validation directly to an object.   \nIf the `json` does not comply with the `bower.json` spec, an error is thrown with `error.code` equal to `EINVALID`.\n\nThe `options` arguments is optional and can be omitted. Available options:\n\n- validate: Apply validation, defaults to `true`\n- normalize: Apply normalisation, defaults to `false`\n- clone: clone, use and return the passed in `json` object instead of using it directly, defaults to `false`\n\n\n```js\nvar bowerJson = require('bower-json');\n\nvar json = {\n    name: 'my-package',\n    version: '0.0.1'\n};\n\ntry {\n    bowerJson.parse(json);\n} catch (err) {\n    console.error('There was an error parsing the object');\n    console.error(err.message);\n}\n```\n\n\n#### .validate(json)\n\nValidates the passed `json` object.   \nThrows an error with `error.code` equal to `EINVALID` if it does not comply with the spec.\n\n\n```js\nvar bowerJson = require('bower-json');\n\nvar json = {\n    name: 'my-package',\n    version: '0.0.1'\n};\n\ntry {\n    bowerJson.validate(json);\n} catch (err) {\n    console.error('There was an error validating the object');\n    console.error(err.message);\n}\n```\n\n\n#### .normalize(json)\n\n```js\nvar bowerJson = require('bower-json');\n\nvar json = {\n    name: 'my-package',\n    version: '0.0.1',\n    main: 'foo.js,bar.js'\n};\n\nbowerJson.nornalize(json);\njson.main // ['foo.js', 'bar.js']\n```\n\n\n#### .find(folder, callback)\n\nFinds the `json` filename inside a folder.   \nChecks if a `bower.json` exists, falling back to the deprecated `component.json`.   \nIf no file was found, the callback is called with a `error.code` of `ENOENT`.\n\n```js\nvar bowerJson = require('bower-json');\n\nbowerJson.find('/path/to/folder', function (err, filename) {\n    if (err) {\n        console.error('There is no json file in the folder');\n        return;\n    }\n\n    console.log('Filename: ', filename);\n\n    // Now that we got the filename, we can read its contents\n    bowerJson.read(filename, function (err, json) {\n        if (err) {\n            console.error('There was an error reading the file');\n            console.error(err.message);\n            return;\n        }\n\n        console.log('JSON: ', json);\n    });\n});\n```\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/json/issues"},"_id":"bower-json@0.2.0","dist":{"shasum":"e4383fe1bdcb527de8119190b2c7245e2f021419","tarball":"http://registry.npmjs.org/bower-json/-/bower-json-0.2.0.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.3.0":{"name":"bower-json","version":"0.3.0","description":"Read bower.json files with semantics, normalisation, defaults and validation.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/json/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/json.git"},"main":"lib/json","engines":{"node":">=0.8.0"},"dependencies":{"deep-extend":"~0.2.5","graceful-fs":"~2.0.0"},"devDependencies":{"expect.js":"~0.2.0","mocha":"~1.12.0","grunt":"~0.4.1","grunt-contrib-watch":"~0.4.4","grunt-contrib-jshint":"~0.6.0","grunt-simple-mocha":"~0.4.0"},"scripts":{"test":"grunt test"},"readme":"# bower-json [![Build Status](https://secure.travis-ci.org/bower/json.png?branch=master)](http://travis-ci.org/bower/json)\n\nRead `bower.json` files with semantics, normalisation, defaults and validation.\n\n\n## Usage\n\n#### .read(file, options, callback)\n\nReads `file` and applies normalisation, defaults and validation according to the `bower.json` spec.   \nIf the passed `file` does not exist, the callback is called with `error.code` equal to `ENOENT`.   \nIf the passed `file` contents are not valid JSON, the callback is called with `error.code` equal to `EMALFORMED`.   \nIf the `json` does not comply with the `bower.json` spec, the callback is called with `error.code` equal to `EINVALID`.\n\nIf `file` is a directory, `find()` will be used to search for the json file.   \nThe `options` argument is optional and can be omitted. These options will be passed to `parse` method.\n\n\n```js\nvar bowerJson = require('bower-json');\n\n// Can also be used by simply calling bowerJson()\nbowerJson.read('/path/to/bower.json', function (err, json) {\n    if (err) {\n        console.error('There was an error reading the file');\n        console.error(err.message);\n        return;\n    }\n\n    console.log('JSON: ', json);\n});\n```\n\n\n#### .parse(json, options)\n\nParses an object. Useful when you want to apply normalisation and validation directly to an object.   \nIf the `json` does not comply with the `bower.json` spec, an error is thrown with `error.code` equal to `EINVALID`.\n\nThe `options` arguments is optional and can be omitted. Available options:\n\n- validate: Apply validation, defaults to `true`\n- normalize: Apply normalisation, defaults to `false`\n- clone: clone, use and return the passed in `json` object instead of using it directly, defaults to `false`\n\n\n```js\nvar bowerJson = require('bower-json');\n\nvar json = {\n    name: 'my-package',\n    version: '0.0.1'\n};\n\ntry {\n    bowerJson.parse(json);\n} catch (err) {\n    console.error('There was an error parsing the object');\n    console.error(err.message);\n}\n```\n\n\n#### .validate(json)\n\nValidates the passed `json` object.   \nThrows an error with `error.code` equal to `EINVALID` if it does not comply with the spec.\n\n\n```js\nvar bowerJson = require('bower-json');\n\nvar json = {\n    name: 'my-package',\n    version: '0.0.1'\n};\n\ntry {\n    bowerJson.validate(json);\n} catch (err) {\n    console.error('There was an error validating the object');\n    console.error(err.message);\n}\n```\n\n\n#### .normalize(json)\n\n```js\nvar bowerJson = require('bower-json');\n\nvar json = {\n    name: 'my-package',\n    version: '0.0.1',\n    main: 'foo.js,bar.js'\n};\n\nbowerJson.nornalize(json);\njson.main // ['foo.js', 'bar.js']\n```\n\n\n#### .find(folder, callback)\n\nFinds the `json` filename inside a folder.   \nChecks if a `bower.json` exists, falling back to `component.json` (deprecated) and `.bower.json`.   \nIf no file was found, the callback is called with a `error.code` of `ENOENT`.\n\n```js\nvar bowerJson = require('bower-json');\n\nbowerJson.find('/path/to/folder', function (err, filename) {\n    if (err) {\n        console.error('There is no json file in the folder');\n        return;\n    }\n\n    console.log('Filename: ', filename);\n\n    // Now that we got the filename, we can read its contents\n    bowerJson.read(filename, function (err, json) {\n        if (err) {\n            console.error('There was an error reading the file');\n            console.error(err.message);\n            return;\n        }\n\n        console.log('JSON: ', json);\n    });\n});\n```\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/json/issues"},"_id":"bower-json@0.3.0","dist":{"shasum":"4b3c8ac94adf728616d3a2df07874e4eab172d24","tarball":"http://registry.npmjs.org/bower-json/-/bower-json-0.3.0.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.4.0":{"name":"bower-json","version":"0.4.0","description":"Read bower.json files with semantics, normalisation, defaults and validation.","author":{"name":"Twitter"},"licenses":[{"type":"MIT","url":"https://github.com/bower/json/blob/master/LICENSE"}],"repository":{"type":"git","url":"git://github.com/bower/json.git"},"main":"lib/json","engines":{"node":">=0.8.0"},"dependencies":{"deep-extend":"~0.2.5","graceful-fs":"~2.0.0","intersect":"~0.0.3"},"devDependencies":{"expect.js":"~0.2.0","mocha":"~1.12.0","grunt":"~0.4.1","grunt-contrib-watch":"~0.4.4","grunt-contrib-jshint":"~0.6.0","grunt-simple-mocha":"~0.4.0"},"scripts":{"test":"grunt test"},"readme":"# bower-json [![Build Status](https://secure.travis-ci.org/bower/json.png?branch=master)](http://travis-ci.org/bower/json)\n\nRead `bower.json` files with semantics, normalisation, defaults and validation.\n\n\n## Usage\n\n#### .read(file, options, callback)\n\nReads `file` and applies normalisation, defaults and validation according to the `bower.json` spec.   \nIf the passed `file` does not exist, the callback is called with `error.code` equal to `ENOENT`.   \nIf the passed `file` contents are not valid JSON, the callback is called with `error.code` equal to `EMALFORMED`.   \nIf the `json` does not comply with the `bower.json` spec, the callback is called with `error.code` equal to `EINVALID`.\n\nIf `file` is a directory, `find()` will be used to search for the json file.   \nThe `options` argument is optional and can be omitted. These options will be passed to `parse` method.\n\n\n```js\nvar bowerJson = require('bower-json');\n\n// Can also be used by simply calling bowerJson()\nbowerJson.read('/path/to/bower.json', function (err, json) {\n    if (err) {\n        console.error('There was an error reading the file');\n        console.error(err.message);\n        return;\n    }\n\n    console.log('JSON: ', json);\n});\n```\n\n\n#### .parse(json, options)\n\nParses an object. Useful when you want to apply normalisation and validation directly to an object.   \nIf the `json` does not comply with the `bower.json` spec, an error is thrown with `error.code` equal to `EINVALID`.\n\nThe `options` arguments is optional and can be omitted. Available options:\n\n- validate: Apply validation, defaults to `true`\n- normalize: Apply normalisation, defaults to `false`\n- clone: clone, use and return the passed in `json` object instead of using it directly, defaults to `false`\n\n\n```js\nvar bowerJson = require('bower-json');\n\nvar json = {\n    name: 'my-package',\n    version: '0.0.1'\n};\n\ntry {\n    bowerJson.parse(json);\n} catch (err) {\n    console.error('There was an error parsing the object');\n    console.error(err.message);\n}\n```\n\n\n#### .validate(json)\n\nValidates the passed `json` object.   \nThrows an error with `error.code` equal to `EINVALID` if it does not comply with the spec.\n\n\n```js\nvar bowerJson = require('bower-json');\n\nvar json = {\n    name: 'my-package',\n    version: '0.0.1'\n};\n\ntry {\n    bowerJson.validate(json);\n} catch (err) {\n    console.error('There was an error validating the object');\n    console.error(err.message);\n}\n```\n\n\n#### .normalize(json)\n\n```js\nvar bowerJson = require('bower-json');\n\nvar json = {\n    name: 'my-package',\n    version: '0.0.1',\n    main: 'foo.js,bar.js'\n};\n\nbowerJson.nornalize(json);\njson.main // ['foo.js', 'bar.js']\n```\n\n\n#### .find(folder, callback)\n\nFinds the `json` filename inside a folder.   \nChecks if a `bower.json` exists, falling back to `component.json` (deprecated) and `.bower.json`.   \nIf no file was found, the callback is called with a `error.code` of `ENOENT`.\n\n```js\nvar bowerJson = require('bower-json');\n\nbowerJson.find('/path/to/folder', function (err, filename) {\n    if (err) {\n        console.error('There is no json file in the folder');\n        return;\n    }\n\n    console.log('Filename: ', filename);\n\n    // Now that we got the filename, we can read its contents\n    bowerJson.read(filename, function (err, json) {\n        if (err) {\n            console.error('There was an error reading the file');\n            console.error(err.message);\n            return;\n        }\n\n        console.log('JSON: ', json);\n    });\n});\n```\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/bower/json/issues"},"_id":"bower-json@0.4.0","dist":{"shasum":"a99c3ccf416ef0590ed0ded252c760f1c6d93766","tarball":"http://registry.npmjs.org/bower-json/-/bower-json-0.4.0.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}}},"readme":"# bower-json [![Build Status](https://secure.travis-ci.org/bower/json.png?branch=master)](http://travis-ci.org/bower/json)\n\nRead `bower.json` files with semantics, normalisation, defaults and validation.\n\n\n## Usage\n\n#### .read(file, callback)\n\nReads `file` and applies normalisation, defaults and validation according to the `bower.json` spec.   \nIf the passed `file` does not exists, the callback is called with `error.code` equal to `ENOENT`.   \nIf the passed `file` contents are not a valid JSON, the callback is called with `error.code` equal to `EMALFORMED`.   \nIf the `json` does not comply with the `bower.json` spec, the callback is called with `error.code` equal to `EINVALID`.\n\n```js\nvar bowerJson = require('bower-json');\n\n// Can also be used by simply calling bowerJson()\nbowerJson.read('/path/to/bower.json', function (err, json) {\n    if (err) {\n        console.error('There was an error reading the file');\n        console.error(err.message);\n        return;\n    }\n\n    console.log('JSON: ', json);\n});\n```\n\n\n#### .parse(json, callback)\n\nParses an object. Useful when you want to apply normalisation, defaults and validation directly to an object.   \nIf the `json` does not comply with the `bower.json` spec, the callback is called with `error.code` equal to `EINVALID`.\n\n```js\nvar bowerJson = require('bower-json');\n\nvar json = {\n    name: 'my-package',\n    version: '0.0.1'\n};\n\nbowerJson.parse(json, function (err, json) {\n    if (err) {\n        console.error('There was an error parsing the object');\n        console.error(err.message);\n        return;\n    }\n\n    console.log('Parsed: ', json);\n});\n```\n\n\n#### .find(folder, callback)\n\nFinds the `json` filename inside a folder.   \nChecks if a `bower.json` exists, falling back to the deprecated `component.json`.   \nIf no file was found, the callback is called with a `error.code` of `ENOENT`.\n\n```js\nvar bowerJson = require('bower-json');\n\nbowerJson.find('/path/to/folder', function (err, filename) {\n    if (err) {\n        console.error('There is no json file in the folder');\n        return;\n    }\n\n    console.log('Filename: ', filename);\n\n    // Now that we got the filename, we can read its contents\n    bowerJson.read(filename, function (err, json) {\n        if (err) {\n            console.error('There was an error reading the file');\n            console.error(err.message);\n            return;\n        }\n\n        console.log('JSON: ', json);\n    });\n});\n```\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","maintainers":[{"name":"satazor","email":"andremiguelcruz@msn.com"},{"name":"wibblymat","email":"mat@wibbly.org.uk"}],"time":{"0.1.0-rc.1":"2013-07-09T19:57:24.653Z","0.2.0":"2013-07-27T21:27:08.754Z","0.3.0":"2013-08-05T13:25:07.182Z","0.4.0":"2013-08-11T13:46:54.127Z"},"author":{"name":"Twitter"},"repository":{"type":"git","url":"git://github.com/bower/json.git"},"_attachments":{"bower-json-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":8,"digest":"md5-zRD2rTrDZHsEWedJ5iBPBw==","length":5838,"stub":true},"bower-json-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":6,"digest":"md5-xkbFWuQE5IlmE8VsIGhIZw==","length":5197,"stub":true},"bower-json-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":4,"digest":"md5-KnULcOds3LwIDq6x3O+Uhw==","length":5042,"stub":true},"bower-json-0.1.0-rc.1.tgz":{"content_type":"application/octet-stream","revpos":2,"digest":"md5-A5IBfovj7XYngIyh8d8ThQ==","length":3672,"stub":true}},"_etag":"\"3D2195L3SJK54W784FXXD47U7\""}