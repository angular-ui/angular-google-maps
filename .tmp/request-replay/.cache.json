{"_id":"request-replay","_rev":"21-58ce5c9a1c5f55e939a69fd3e189f117","name":"request-replay","description":"Replays a request when a network error occurs","dist-tags":{"latest":"0.3.0"},"versions":{"0.1.1":{"name":"request-replay","version":"0.1.1","description":"Replays a request when a network error occurs","main":"index.js","dependencies":{"retry":"~0.6.0","deep-extend":"~0.2.5"},"devDependencies":{"mocha":"~1.12.0","expect.js":"~0.2.0","request":"~2"},"scripts":{"test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/IndigoUnited/node-request-replay"},"bugs":{"url":"http://github.com/IndigoUnited/node-request-replay/issues"},"keywords":["retry","replay","request","mikeal","network"],"author":{"name":"IndigoUnited","email":"hello@indigounited.com","url":"http://indigounited.com"},"license":"MIT","readme":"# request-replay [![Build Status](https://secure.travis-ci.org/IndigoUnited/node-request-replay.png)](http://travis-ci.org/IndigoUnited/node-request-replay.png)\n\nReplays a [request](https://github.com/mikeal/request) when a network error occurs using the [retry](https://github.com/felixge/node-retry) module.\n\n\n## Installation\n\n`$ npm install request-replay`\n\n\n## Usage\n\n```js\nvar fs = require('fs');\nvar request = require('request');\nvar replay = require('request-replay');\n\n// Note that the options argument is optional\n// Accepts the same options the retry module does and an additional\n// errorCodes array that default to ['EADDRINFO', 'ETIMEDOUT', 'ECONNRESET']\nreplay(request('http://google.com/doodle.png'), {}})\n.on('error', function (err) {\n    // Do something with err\n})\n.pipe(fs.createWriteStream('doodle.png'))\n.on('replay', function (replay) {\n    console.log('replay nr:', replay);\n})\n.on('error', function (err) {\n    // Do something with err\n})\n.on('close', function (err) {\n    // Saved to doogle.png!\n})\n```\n\nNote that the default retry options are modified to be more appropriate for requests:\n\n* `retries`: The maximum amount of times to retry the operation. Default is `5`.\n* `factor`: The exponential factor to use. Default is `2`.\n* `minTimeout`: The amount of time before starting the first retry. Default is `2000`.\n* `maxTimeout`: The maximum amount of time between two retries. Default is `35000`.\n* `randomize`: Randomizes the timeouts by multiplying with a factor between `1` to `2`. Default is `false`.\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","_id":"request-replay@0.1.1","dist":{"shasum":"21f4cff3987904b380b505c281a645641ef66a50","tarball":"http://registry.npmjs.org/request-replay/-/request-replay-0.1.1.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.1.3":{"name":"request-replay","version":"0.1.3","description":"Replays a request when a network error occurs","main":"index.js","dependencies":{"retry":"~0.6.0","deep-extend":"~0.2.5"},"devDependencies":{"mocha":"~1.12.0","expect.js":"~0.2.0","request":"~2"},"scripts":{"test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/IndigoUnited/node-request-replay"},"bugs":{"url":"http://github.com/IndigoUnited/node-request-replay/issues"},"keywords":["retry","replay","request","mikeal","network"],"author":{"name":"IndigoUnited","email":"hello@indigounited.com","url":"http://indigounited.com"},"license":"MIT","readme":"# request-replay [![Build Status](https://secure.travis-ci.org/IndigoUnited/node-request-replay.png)](http://travis-ci.org/IndigoUnited/node-request-replay.png)\n\nReplays a [request](https://github.com/mikeal/request) when a network error occurs using the [retry](https://github.com/felixge/node-retry) module.\n\n\n## Installation\n\n`$ npm install request-replay`\n\n\n## Usage\n\n```js\nvar fs = require('fs');\nvar request = require('request');\nvar replay = require('request-replay');\n\n// Note that the options argument is optional\n// Accepts the same options the retry module does and an additional\n// errorCodes array that default to ['EADDRINFO', 'ETIMEDOUT', 'ECONNRESET']\nreplay(request('http://google.com/doodle.png'), {}})\n.on('error', function (err) {\n    // Do something with err\n})\n.pipe(fs.createWriteStream('doodle.png'))\n.on('replay', function (replay, error) {\n    console.log('request failed:', error.code, error.message);\n    console.log('replay nr:', replay);\n})\n.on('error', function (err) {\n    // Do something with err\n})\n.on('close', function (err) {\n    // Saved to doogle.png!\n})\n```\n\nNote that the default retry options are modified to be more appropriate for requests:\n\n* `retries`: The maximum amount of times to retry the operation. Default is `5`.\n* `factor`: The exponential factor to use. Default is `2`.\n* `minTimeout`: The amount of time before starting the first retry. Default is `2000`.\n* `maxTimeout`: The maximum amount of time between two retries. Default is `35000`.\n* `randomize`: Randomizes the timeouts by multiplying with a factor between `1` to `2`. Default is `true`.\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","_id":"request-replay@0.1.3","dist":{"shasum":"dd66a11d9576e3abeae6b1909a4b18bb09818a26","tarball":"http://registry.npmjs.org/request-replay/-/request-replay-0.1.3.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.1.4":{"name":"request-replay","version":"0.1.4","description":"Replays a request when a network error occurs","main":"index.js","dependencies":{"retry":"~0.6.0","deep-extend":"~0.2.5"},"devDependencies":{"mocha":"~1.12.0","expect.js":"~0.2.0","request":"~2"},"scripts":{"test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/IndigoUnited/node-request-replay"},"bugs":{"url":"http://github.com/IndigoUnited/node-request-replay/issues"},"keywords":["retry","replay","request","mikeal","network"],"author":{"name":"IndigoUnited","email":"hello@indigounited.com","url":"http://indigounited.com"},"license":"MIT","readme":"# request-replay [![Build Status](https://secure.travis-ci.org/IndigoUnited/node-request-replay.png)](http://travis-ci.org/IndigoUnited/node-request-replay.png)\n\nReplays a [request](https://github.com/mikeal/request) when a network error occurs using the [retry](https://github.com/felixge/node-retry) module.\n\n\n## Installation\n\n`$ npm install request-replay`\n\n\n## Usage\n\n```js\nvar fs = require('fs');\nvar request = require('request');\nvar replay = require('request-replay');\n\n// Note that the options argument is optional\n// Accepts the same options the retry module does and an additional\n// errorCodes array that default to ['EADDRINFO', 'ETIMEDOUT', 'ECONNRESET']\nreplay(request('http://google.com/doodle.png'), {}})\n.on('error', function (err) {\n    // Do something with err\n})\n.pipe(fs.createWriteStream('doodle.png'))\n.on('replay', function (replay, error) {\n    console.log('request failed:', error.code, error.message);\n    console.log('replay nr:', replay);\n})\n.on('error', function (err) {\n    // Do something with err\n})\n.on('close', function (err) {\n    // Saved to doogle.png!\n})\n```\n\nNote that the default retry options are modified to be more appropriate for requests:\n\n* `retries`: The maximum amount of times to retry the operation. Default is `5`.\n* `factor`: The exponential factor to use. Default is `2`.\n* `minTimeout`: The amount of time before starting the first retry. Default is `2000`.\n* `maxTimeout`: The maximum amount of time between two retries. Default is `35000`.\n* `randomize`: Randomizes the timeouts by multiplying with a factor between `1` to `2`. Default is `true`.\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","_id":"request-replay@0.1.4","dist":{"shasum":"0dd526c38a3af45fb9bdd095bd1a3e1d93344f0a","tarball":"http://registry.npmjs.org/request-replay/-/request-replay-0.1.4.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.1.5":{"name":"request-replay","version":"0.1.5","description":"Replays a request when a network error occurs","main":"index.js","dependencies":{"retry":"~0.6.0"},"devDependencies":{"mocha":"~1.12.0","expect.js":"~0.2.0","request":"~2"},"scripts":{"test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/IndigoUnited/node-request-replay"},"bugs":{"url":"http://github.com/IndigoUnited/node-request-replay/issues"},"keywords":["retry","replay","request","mikeal","network"],"author":{"name":"IndigoUnited","email":"hello@indigounited.com","url":"http://indigounited.com"},"license":"MIT","readme":"# request-replay [![Build Status](https://secure.travis-ci.org/IndigoUnited/node-request-replay.png)](http://travis-ci.org/IndigoUnited/node-request-replay.png)\n\nReplays a [request](https://github.com/mikeal/request) when a network error occurs using the [retry](https://github.com/felixge/node-retry) module.\n\n\n## Installation\n\n`$ npm install request-replay`\n\n\n## Usage\n\n```js\nvar fs = require('fs');\nvar request = require('request');\nvar replay = require('request-replay');\n\n// Note that the options argument is optional\n// Accepts the same options the retry module does and an additional\n// errorCodes array that default to ['EADDRINFO', 'ETIMEDOUT', 'ECONNRESET']\nreplay(request('http://google.com/doodle.png'), {}})\n.on('error', function (err) {\n    // Do something with err\n})\n.pipe(fs.createWriteStream('doodle.png'))\n.on('replay', function (replay, error) {\n    console.log('request failed:', error.code, error.message);\n    console.log('replay nr:', replay);\n})\n.on('error', function (err) {\n    // Do something with err\n})\n.on('close', function (err) {\n    // Saved to doogle.png!\n})\n```\n\nNote that the default retry options are modified to be more appropriate for requests:\n\n* `retries`: The maximum amount of times to retry the operation. Default is `5`.\n* `factor`: The exponential factor to use. Default is `2`.\n* `minTimeout`: The amount of time before starting the first retry. Default is `2000`.\n* `maxTimeout`: The maximum amount of time between two retries. Default is `35000`.\n* `randomize`: Randomizes the timeouts by multiplying with a factor between `1` to `2`. Default is `true`.\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","_id":"request-replay@0.1.5","dist":{"shasum":"ad3c03187c86e27c74b0badcfceab84df24f7af0","tarball":"http://registry.npmjs.org/request-replay/-/request-replay-0.1.5.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.1.6":{"name":"request-replay","version":"0.1.6","description":"Replays a request when a network error occurs","main":"index.js","dependencies":{"retry":"~0.6.0"},"devDependencies":{"mocha":"~1.12.0","expect.js":"~0.2.0","request":"~2"},"scripts":{"test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/IndigoUnited/node-request-replay"},"bugs":{"url":"http://github.com/IndigoUnited/node-request-replay/issues"},"keywords":["retry","replay","request","mikeal","network"],"author":{"name":"IndigoUnited","email":"hello@indigounited.com","url":"http://indigounited.com"},"license":"MIT","readme":"# request-replay [![Build Status](https://secure.travis-ci.org/IndigoUnited/node-request-replay.png)](http://travis-ci.org/IndigoUnited/node-request-replay.png)\n\nReplays a [request](https://github.com/mikeal/request) when a network error occurs using the [retry](https://github.com/felixge/node-retry) module.\n\n\n## Installation\n\n`$ npm install request-replay`\n\n\n## Usage\n\n```js\nvar fs = require('fs');\nvar request = require('request');\nvar replay = require('request-replay');\n\n// Note that the options argument is optional\n// Accepts the same options the retry module does and an additional\n// errorCodes array that default to ['EADDRINFO', 'ETIMEDOUT', 'ECONNRESET']\nreplay(request('http://google.com/doodle.png'), {}})\n.on('error', function (err) {\n    // Do something with err\n})\n.pipe(fs.createWriteStream('doodle.png'))\n.on('replay', function (replay, error) {\n    console.log('request failed:', error.code, error.message);\n    console.log('replay nr:', replay);\n})\n.on('error', function (err) {\n    // Do something with err\n})\n.on('close', function (err) {\n    // Saved to doogle.png!\n})\n```\n\nNote that the default retry options are modified to be more appropriate for requests:\n\n* `retries`: The maximum amount of times to retry the operation. Default is `5`.\n* `factor`: The exponential factor to use. Default is `2`.\n* `minTimeout`: The amount of time before starting the first retry. Default is `2000`.\n* `maxTimeout`: The maximum amount of time between two retries. Default is `35000`.\n* `randomize`: Randomizes the timeouts by multiplying with a factor between `1` to `2`. Default is `true`.\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","_id":"request-replay@0.1.6","dist":{"shasum":"d8e8915f720d06fdeb277971d67ccf52ca25ec3f","tarball":"http://registry.npmjs.org/request-replay/-/request-replay-0.1.6.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.1.7":{"name":"request-replay","version":"0.1.7","description":"Replays a request when a network error occurs","main":"index.js","dependencies":{"retry":"~0.6.0"},"devDependencies":{"mocha":"~1.12.0","expect.js":"~0.2.0","request":"~2"},"scripts":{"test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/IndigoUnited/node-request-replay"},"bugs":{"url":"http://github.com/IndigoUnited/node-request-replay/issues"},"keywords":["retry","replay","request","mikeal","network"],"author":{"name":"IndigoUnited","email":"hello@indigounited.com","url":"http://indigounited.com"},"license":"MIT","readme":"# request-replay [![Build Status](https://secure.travis-ci.org/IndigoUnited/node-request-replay.png)](http://travis-ci.org/IndigoUnited/node-request-replay.png)\n\nReplays a [request](https://github.com/mikeal/request) when a network error occurs using the [retry](https://github.com/felixge/node-retry) module.\n\n\n## Installation\n\n`$ npm install request-replay`\n\n\n## Usage\n\n```js\nvar fs = require('fs');\nvar request = require('request');\nvar replay = require('request-replay');\n\n// Note that the options argument is optional\n// Accepts the same options the retry module does and an additional\n// errorCodes array that default to ['EADDRINFO', 'ETIMEDOUT', 'ECONNRESET']\nreplay(request('http://google.com/doodle.png'), {}})\n.on('error', function (err) {\n    // Do something with err\n})\n.pipe(fs.createWriteStream('doodle.png'))\n.on('replay', function (replay, error) {\n    console.log('request failed:', error.code, error.message);\n    console.log('replay nr:', replay);\n})\n.on('error', function (err) {\n    // Do something with err\n})\n.on('close', function (err) {\n    // Saved to doogle.png!\n})\n```\n\nNote that the default retry options are modified to be more appropriate for requests:\n\n* `retries`: The maximum amount of times to retry the operation. Default is `5`.\n* `factor`: The exponential factor to use. Default is `2`.\n* `minTimeout`: The amount of time before starting the first retry. Default is `2000`.\n* `maxTimeout`: The maximum amount of time between two retries. Default is `35000`.\n* `randomize`: Randomizes the timeouts by multiplying with a factor between `1` to `2`. Default is `true`.\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","_id":"request-replay@0.1.7","dist":{"shasum":"0e3a0f451ac743d8f153d6694fa1c3d0d7a07822","tarball":"http://registry.npmjs.org/request-replay/-/request-replay-0.1.7.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.1.8":{"name":"request-replay","version":"0.1.8","description":"Replays a request when a network error occurs","main":"index.js","dependencies":{"retry":"~0.6.0"},"devDependencies":{"mocha":"~1.12.0","expect.js":"~0.2.0","request":"~2"},"scripts":{"test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/IndigoUnited/node-request-replay"},"bugs":{"url":"http://github.com/IndigoUnited/node-request-replay/issues"},"keywords":["retry","replay","request","mikeal","network"],"author":{"name":"IndigoUnited","email":"hello@indigounited.com","url":"http://indigounited.com"},"license":"MIT","readme":"# request-replay [![Build Status](https://secure.travis-ci.org/IndigoUnited/node-request-replay.png)](http://travis-ci.org/IndigoUnited/node-request-replay.png)\n\nReplays a [request](https://github.com/mikeal/request) when a network error occurs using the [retry](https://github.com/felixge/node-retry) module.\n\n**DO NOT** use this module if you are piping `request` instances.\nIf you are listening to `data` events to buffer, beware that you must reset everything when a `replay` occurs.\nThis is why `pipping` is not supported.\n\n\n## Installation\n\n`$ npm install request-replay`\n\n\n## Usage\n\n```js\nvar fs = require('fs');\nvar request = require('request');\nvar replay = require('request-replay');\n\n// Note that the options argument is optional\n// Accepts the same options the retry module does and an additional\n// errorCodes array that default to ['EADDRINFO', 'ETIMEDOUT', 'ECONNRESET']\nreplay(request('http://google.com/doodle.png', function (err, response, body) {\n    // Do things\n}), {\n    retries: 10,\n    factor: 3\n})\n.on('replay', function (replay, error) {\n    console.log('request failed:', error.code, error.message);\n    console.log('replay nr:', replay);\n})\n```\n\nNote that the default retry options are modified to be more appropriate for requests:\n\n* `retries`: The maximum amount of times to retry the operation. Default is `5`.\n* `factor`: The exponential factor to use. Default is `2`.\n* `minTimeout`: The amount of time before starting the first retry. Default is `2000`.\n* `maxTimeout`: The maximum amount of time between two retries. Default is `35000`.\n* `randomize`: Randomizes the timeouts by multiplying with a factor between `1` to `2`. Default is `true`.\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","_id":"request-replay@0.1.8","dist":{"shasum":"778e446bc422ba031cfa7c6a95d639570c1191b2","tarball":"http://registry.npmjs.org/request-replay/-/request-replay-0.1.8.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.1.10":{"name":"request-replay","version":"0.1.10","description":"Replays a request when a network error occurs","main":"index.js","dependencies":{"retry":"~0.6.0"},"devDependencies":{"mocha":"~1.12.0","expect.js":"~0.2.0","request":"~2"},"scripts":{"test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/IndigoUnited/node-request-replay"},"bugs":{"url":"http://github.com/IndigoUnited/node-request-replay/issues"},"keywords":["retry","replay","request","mikeal","network"],"author":{"name":"IndigoUnited","email":"hello@indigounited.com","url":"http://indigounited.com"},"license":"MIT","readme":"# request-replay [![Build Status](https://secure.travis-ci.org/IndigoUnited/node-request-replay.png)](http://travis-ci.org/IndigoUnited/node-request-replay.png)\n\nReplays a [request](https://github.com/mikeal/request) when a network error occurs using the [retry](https://github.com/felixge/node-retry) module.\n\n**DO NOT** use this module if you are piping `request` instances.\nIf you are listening to `data` events to buffer, beware that you must reset everything when a `replay` occurs.\nThis is why `pipping` is not supported.\n\n\n## Installation\n\n`$ npm install request-replay`\n\n\n## Usage\n\n```js\nvar fs = require('fs');\nvar request = require('request');\nvar replay = require('request-replay');\n\n// Note that the options argument is optional\n// Accepts the same options the retry module does and an additional\n// errorCodes array that default to ['EADDRINFO', 'ETIMEDOUT', 'ECONNRESET', 'ESOCKETTIMEDOUT']\nreplay(request('http://google.com/doodle.png', function (err, response, body) {\n    // Do things\n}), {\n    retries: 10,\n    factor: 3\n})\n.on('replay', function (replay, error) {\n    console.log('request failed:', error.code, error.message);\n    console.log('replay nr:', replay);\n})\n```\n\nNote that the default retry options are modified to be more appropriate for requests:\n\n* `retries`: The maximum amount of times to retry the operation. Default is `5`.\n* `factor`: The exponential factor to use. Default is `2`.\n* `minTimeout`: The amount of time before starting the first retry. Default is `2000`.\n* `maxTimeout`: The maximum amount of time between two retries. Default is `35000`.\n* `randomize`: Randomizes the timeouts by multiplying with a factor between `1` to `2`. Default is `true`.\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","_id":"request-replay@0.1.10","dist":{"shasum":"94cebf99bebce6a3539f146082da349561f32c9f","tarball":"http://registry.npmjs.org/request-replay/-/request-replay-0.1.10.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.2.0":{"name":"request-replay","version":"0.2.0","description":"Replays a request when a network error occurs","main":"index.js","dependencies":{"retry":"~0.6.0"},"devDependencies":{"mocha":"~1.12.0","expect.js":"~0.2.0","request":"~2"},"scripts":{"test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/IndigoUnited/node-request-replay"},"bugs":{"url":"http://github.com/IndigoUnited/node-request-replay/issues"},"keywords":["retry","replay","request","mikeal","network"],"author":{"name":"IndigoUnited","email":"hello@indigounited.com","url":"http://indigounited.com"},"license":"MIT","readme":"# request-replay [![Build Status](https://secure.travis-ci.org/IndigoUnited/node-request-replay.png)](http://travis-ci.org/IndigoUnited/node-request-replay.png)\n\nReplays a [request](https://github.com/mikeal/request) when a network error occurs using the [retry](https://github.com/felixge/node-retry) module.\n\n**DO NOT** use this module if you are piping `request` instances.\nIf you are listening to `data` events to buffer, beware that you must reset everything when a `replay` occurs.\nThis is why `pipping` is not supported.\n\n\n## Installation\n\n`$ npm install request-replay`\n\n\n## Usage\n\n```js\nvar fs = require('fs');\nvar request = require('request');\nvar replay = require('request-replay');\n\n// Note that the options argument is optional\n// Accepts the same options the retry module does and an additional\n// errorCodes array that default to ['EADDRINFO', 'ETIMEDOUT', 'ECONNRESET', 'ESOCKETTIMEDOUT']\nreplay(request('http://google.com/doodle.png', function (err, response, body) {\n    // Do things\n}), {\n    retries: 10,\n    factor: 3\n})\n.on('replay', function (replay) {\n    // \"replay\" is an object that contains some useful information\n    console.log('request failed: ' + replay.error.code + ' ' + replay.error.message);\n    console.log('replay nr: #' + replay.number);\n    console.log('will retry in: ' + replay.delay + 'ms')\n})\n```\n\nNote that the default retry options are modified to be more appropriate for requests:\n\n* `retries`: The maximum amount of times to retry the operation. Default is `5`.\n* `factor`: The exponential factor to use. Default is `2`.\n* `minTimeout`: The amount of time before starting the first retry. Default is `2000`.\n* `maxTimeout`: The maximum amount of time between two retries. Default is `35000`.\n* `randomize`: Randomizes the timeouts by multiplying with a factor between `1` to `2`. Default is `true`.\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","_id":"request-replay@0.2.0","dist":{"shasum":"9b693a5d118b39f5c596ead5ed91a26444057f60","tarball":"http://registry.npmjs.org/request-replay/-/request-replay-0.2.0.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.3.0":{"name":"request-replay","version":"0.3.0","description":"Replays a request when a network error occurs","main":"index.js","dependencies":{"retry":"~0.6.0"},"devDependencies":{"mocha":"~1.12.0","expect.js":"~0.2.0","request":"~2"},"scripts":{"test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/IndigoUnited/node-request-replay"},"bugs":{"url":"http://github.com/IndigoUnited/node-request-replay/issues"},"keywords":["retry","replay","request","mikeal","network"],"author":{"name":"IndigoUnited","email":"hello@indigounited.com","url":"http://indigounited.com"},"license":"MIT","readme":"# request-replay [![Build Status](https://secure.travis-ci.org/IndigoUnited/node-request-replay.png)](http://travis-ci.org/IndigoUnited/node-request-replay.png)\n\nReplays a [request](https://github.com/mikeal/request) when a network error occurs using the [retry](https://github.com/felixge/node-retry) module.\n\n**DO NOT** use this module if you are piping `request` instances.\nIf you are listening to `data` events to buffer, beware that you must reset everything when a `replay` occurs.\nThis is why `pipping` is not supported.\n\n\n## Installation\n\n`$ npm install request-replay`\n\n\n## Usage\n\n```js\nvar fs = require('fs');\nvar request = require('request');\nvar replay = require('request-replay');\n\n// Note that the options argument is optional\n// Accepts the same options the retry module does and an additional\n// errorCodes array that default to ['EADDRINFO', 'ETIMEDOUT', 'ECONNRESET', 'ESOCKETTIMEDOUT']\nreplay(request('http://google.com/doodle.png', function (err, response, body) {\n    // Do things\n}), {\n    retries: 10,\n    factor: 3\n})\n.on('replay', function (replay) {\n    // \"replay\" is an object that contains some useful information\n    console.log('request failed: ' + replay.error.code + ' ' + replay.error.message);\n    console.log('replay nr: #' + replay.number);\n    console.log('will retry in: ' + replay.delay + 'ms')\n})\n```\n\nNote that the default retry options are modified to be more appropriate for requests:\n\n* `retries`: The maximum amount of times to retry the operation. Default is `5`.\n* `factor`: The exponential factor to use. Default is `2`.\n* `minTimeout`: The amount of time before starting the first retry. Default is `2000`.\n* `maxTimeout`: The maximum amount of time between two retries. Default is `35000`.\n* `randomize`: Randomizes the timeouts by multiplying with a factor between `1` to `2`. Default is `true`.\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","_id":"request-replay@0.3.0","dist":{"shasum":"52e66115579a5154a9e303c677e5a84bcafda464","tarball":"http://registry.npmjs.org/request-replay/-/request-replay-0.3.0.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}}},"readme":"# request-replay [![Build Status](https://secure.travis-ci.org/IndigoUnited/node-request-replay.png)](http://travis-ci.org/IndigoUnited/node-request-replay.png)\n\nReplays a [request](https://github.com/mikeal/request) when a network error occurs using the [retry](https://github.com/felixge/node-retry) module.\n\n\n## Installation\n\n`$ npm install request-replay`\n\n\n## Usage\n\n```js\nvar fs = require('fs');\nvar request = require('request');\nvar replay = require('request-replay');\n\n// Note that the options argument is optional\n// Accepts the same options the retry module does and an additional\n// errorCodes array that default to ['EADDRINFO', 'ETIMEDOUT', 'ECONNRESET']\nreplay(request('http://google.com/doodle.png'), {}})\n.on('error', function (err) {\n    // Do something with err\n})\n.pipe(fs.createWriteStream('doodle.png'))\n.on('replay', function (replay) {\n    console.log('replay nr:', replay);\n})\n.on('error', function (err) {\n    // Do something with err\n})\n.on('close', function (err) {\n    // Saved to doogle.png!\n})\n```\n\nNote that the default retry options are modified to be more appropriate for requests:\n\n* `retries`: The maximum amount of times to retry the operation. Default is `5`.\n* `factor`: The exponential factor to use. Default is `2`.\n* `minTimeout`: The amount of time before starting the first retry. Default is `2000`.\n* `maxTimeout`: The maximum amount of time between two retries. Default is `35000`.\n* `randomize`: Randomizes the timeouts by multiplying with a factor between `1` to `2`. Default is `false`.\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","maintainers":[{"name":"satazor","email":"andremiguelcruz@msn.com"}],"time":{"0.1.1":"2013-07-20T18:40:32.712Z","0.1.3":"2013-07-20T21:01:50.683Z","0.1.4":"2013-07-20T21:37:54.101Z","0.1.5":"2013-07-31T20:42:38.049Z","0.1.6":"2013-08-01T13:42:17.982Z","0.1.7":"2013-08-01T14:21:04.254Z","0.1.8":"2013-08-02T00:34:35.652Z","0.1.10":"2013-08-02T13:14:03.013Z","0.2.0":"2013-08-03T11:38:54.337Z","0.3.0":"2013-11-27T15:15:08.182Z"},"author":{"name":"IndigoUnited","email":"hello@indigounited.com","url":"http://indigounited.com"},"repository":{"type":"git","url":"git://github.com/IndigoUnited/node-request-replay"},"_attachments":{"request-replay-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":20,"digest":"md5-xQ3FzNwNpD3wlyZW4qLcdQ==","length":3971,"stub":true},"request-replay-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":18,"digest":"md5-LNA6FcaoLO1Y4sKOmFy9dg==","length":3929,"stub":true},"request-replay-0.1.10.tgz":{"content_type":"application/octet-stream","revpos":16,"digest":"md5-9LO+NM6PhYA6yjErO43v5A==","length":3793,"stub":true},"request-replay-0.1.8.tgz":{"content_type":"application/octet-stream","revpos":14,"digest":"md5-hCGyNJkZHfXLWMpt8tjm0A==","length":3778,"stub":true},"request-replay-0.1.7.tgz":{"content_type":"application/octet-stream","revpos":12,"digest":"md5-QLDKvIp8l8L+z8RMrsQzZg==","length":3667,"stub":true},"request-replay-0.1.6.tgz":{"content_type":"application/octet-stream","revpos":10,"digest":"md5-30nTyhYlt0FtOUO80wNULQ==","length":3661,"stub":true},"request-replay-0.1.5.tgz":{"content_type":"application/octet-stream","revpos":8,"digest":"md5-2Wfu36eSKHM4e9h5G0VZMA==","length":3584,"stub":true},"request-replay-0.1.4.tgz":{"content_type":"application/octet-stream","revpos":6,"digest":"md5-YNKKG1sd0MucYMRkH0WnJQ==","length":3386,"stub":true},"request-replay-0.1.3.tgz":{"content_type":"application/octet-stream","revpos":4,"digest":"md5-QSyMioUmgcF33mxHkcfY7g==","length":3299,"stub":true},"request-replay-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":2,"digest":"md5-hpiXYW+djL3xoaBqSFy84g==","length":3195,"stub":true}},"_etag":"\"4CBPKDLT4B6JQ9BC5GJPRH0UM\""}