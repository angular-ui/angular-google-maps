{"_id":"js-yaml","_rev":"64-1019659efc36eec346194c98aafe682b","name":"js-yaml","description":"YAML 1.2 parser and serializer","dist-tags":{"latest":"3.0.1"},"versions":{"0.2.0":{"name":"js-yaml","version":"0.2.0","description":"YAML 1.1 Parser","keywords":["yaml","parser","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net"},"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","dependencies":{"jsclass":"3.0.4"},"engines":{"node":"> 0.4.11 < 0.7.0"},"_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"_id":"js-yaml@0.2.0","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"a2480a4db3c6896e4a5db16b99b504cb2768cc32","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-0.2.0.tgz"},"scripts":{},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"0.2.1":{"name":"js-yaml","version":"0.2.1","description":"YAML 1.1 Parser","keywords":["yaml","parser","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net"},"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","dependencies":{"jsclass":"3.0.4"},"engines":{"node":"> 0.4.11 < 0.7.0"},"_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"_id":"js-yaml@0.2.1","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.5.9","_defaultsLoaded":true,"dist":{"shasum":"f42ad812a3c3a72740d571f4fb016e31f4bb9344","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-0.2.1.tgz"},"scripts":{},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"0.2.2":{"name":"js-yaml","version":"0.2.2","description":"YAML 1.1 Parser","keywords":["yaml","parser","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","dependencies":{"jsclass":"3.0.4"},"engines":{"node":"> 0.4.11 < 0.7.0"},"_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"_id":"js-yaml@0.2.2","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.5.9","_defaultsLoaded":true,"dist":{"shasum":"79650583b962457ef4eba143fcbd8b57f0972c07","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-0.2.2.tgz"},"scripts":{},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"0.3.0":{"name":"js-yaml","version":"0.3.0","description":"YAML 1.1 Parser","keywords":["yaml","parser","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","engines":{"node":"> 0.4.11 < 0.7.0"},"_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"_id":"js-yaml@0.3.0","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.5.9","_defaultsLoaded":true,"dist":{"shasum":"ed2aecd85e9f474c6c766bde89b3e27a88754f97","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-0.3.0.tgz"},"scripts":{},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"0.3.1":{"name":"js-yaml","version":"0.3.1","description":"YAML 1.1 Parser","keywords":["yaml","parser","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","engines":{"node":"> 0.4.11 < 0.7.0"},"_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"_id":"js-yaml@0.3.1","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"221a8b84dcddd5ee463311b10366574a091c42dd","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-0.3.1.tgz"},"scripts":{},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"0.3.2":{"name":"js-yaml","version":"0.3.2","description":"YAML 1.1 Parser","keywords":["yaml","parser","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"bin":{"jsyaml":"bin/js-yaml.js"},"main":"./index.js","scripts":{"test":"make test"},"devDependencies":{"jslint":"https://github.com/reid/node-jslint/tarball/6131ebf5713274871b89735105e3286131804771"},"engines":{"node":"> 0.4.11"},"_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"_id":"js-yaml@0.3.2","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"7b007593429b52d0e91825648c9d8e9e44fe1c8e","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-0.3.2.tgz"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"0.3.3":{"name":"js-yaml","version":"0.3.3","description":"YAML 1.1 Parser","keywords":["yaml","parser","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","scripts":{"test":"make test"},"devDependencies":{"vows":"~ 0.6.0","jslint":"https://github.com/reid/node-jslint/tarball/6131ebf5713274871b89735105e3286131804771"},"engines":{"node":"> 0.4.11"},"_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"_id":"js-yaml@0.3.3","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"258a966b44a92dfbde4750c049a0fb5ff16d49ce","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-0.3.3.tgz"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"0.3.4":{"name":"js-yaml","version":"0.3.4","description":"YAML 1.1 Parser","keywords":["yaml","parser","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},"contributors":[{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","scripts":{"test":"make test"},"devDependencies":{"vows":"~ 0.6.0","jslint":"https://github.com/reid/node-jslint/tarball/6131ebf5713274871b89735105e3286131804771"},"engines":{"node":"> 0.4.11"},"_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"_id":"js-yaml@0.3.4","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"361a88e93e6a2cb5fe6222ed917906f0402fe4d3","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-0.3.4.tgz"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"0.3.5":{"name":"js-yaml","version":"0.3.5","description":"YAML 1.1 Parser","keywords":["yaml","parser","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},"contributors":[{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","scripts":{"test":"make test"},"devDependencies":{"vows":"~ 0.6.0","jslint":"https://github.com/reid/node-jslint/tarball/6131ebf5713274871b89735105e3286131804771"},"engines":{"node":"> 0.4.11"},"_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"_id":"js-yaml@0.3.5","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"c41bac6f5332e22ae5962323e65cfc38487f2487","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-0.3.5.tgz"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"0.3.6":{"name":"js-yaml","version":"0.3.6","description":"YAML 1.1 Parser","keywords":["yaml","parser","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},"contributors":[{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","scripts":{"test":"make test"},"devDependencies":{"vows":"~ 0.6.0","jslint":"https://github.com/reid/node-jslint/tarball/6131ebf5713274871b89735105e3286131804771"},"engines":{"node":"> 0.4.11"},"_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"_id":"js-yaml@0.3.6","dependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"6134b2ffde54ad070beae9f342750f0f7133d7a9","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-0.3.6.tgz"},"readme":"JS-YAML - YAML 1.1 parser for JavaScript\n========================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\nThis is a native port of [PyYAML](http://pyyaml.org/), the most advanced YAML parser.\nNow you can use all modern YAML feature right in JavaScript. Originally snapshoted version - PyYAML 3.10 (2011-05-30).\n\n## Installation\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\nIf you want to inspect your YAML files from CLI,\ninstall [js-yaml.bin](https://github.com/nodeca/js-yaml.bin).\n\n\n### bundled YAML library for browser\n\n``` html\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support is still buggy, and mostly done to run online demo. If you\ncan help to improve browser compatibility and AMD support - rise pull request.\n\n\n## API\n\nJS-YAML automatically registers handlers for `.yml` and `.yaml` files. You can load them just with `require`.\nThat's mostly equivalent to calling loadAll() on file handler ang gathering all documents into array.\nJust with one string!\n\n``` javascript\nrequire('js-yaml');\n\n// Get array of documents, or throw exception on error\nvar docs = require('/home/ixti/examples.yml');\n\nconsole.log(docs);\n```\n\nIf you are sure, that file has only one document, chained `shift()` will help to exclude array wrapper:\n\n``` javascript\nrequire('js-yaml');\n\n// Get array of documents, or throw exception on error\nvar singleDoc = require('/home/ixti/examples.yml').shift();\n\nconsole.log(singleDoc);\n```\n\n\n### load (string|buffer|file\\_resource)\n\nParses source as single YAML document. Returns JS object or throws exception on error.\n\nThis function does NOT understands multi-doc sources, it throws exception on those.\n\n``` javascript\nvar yaml = require('js-yaml');\n\n// pass the string\nfs.readFile('/home/ixti/example.yml', 'utf8', function (err, data) {\n  if (err) {\n    // handle error\n    return;\n  }\n  try {\n    console.log( yaml.load(data) );\n  } catch(e) {\n    console.log(e);\n  }\n});\n```\n\n\n### loadAll (string|buffer|file\\_resource, iterator)\n\nSame as `Load`, but understands multi-doc sources and apply iterator to each document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\n// pass the string\nfs.readFile('/home/ixti/example.yml', 'utf8', function (err, data) {\n  if (err) {\n    // handle error\n    return;\n  }\n\n  try {\n    yaml.loadAll(data, function (doc) {\n      console.log(doc);\n    });\n  } catch(e) {\n    console.log(e);\n  }\n});\n```\n\n\n### safeLoad (string|buffer|file\\_resource)\n\nSame as `load()` but uses _safe_ schema - only recommended tags of YAML\nspecification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### safeLoadAll (string|buffer|file\\_resource, iterator)\n\nSame as `loadAll()` but uses _safe_ schema - only recommended tags of YAML\nspecification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n## JavaScript YAML tags scheme\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML Tag Discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and [Yaml Types](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\n### Caveats\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies them at the moment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n=>\n\n``` javascript\n{ \"\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\n## License\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file (MIT).\n","maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"0.3.7":{"name":"js-yaml","version":"0.3.7","description":"YAML 1.1 Parser","keywords":["yaml","parser","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},"contributors":[{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","scripts":{"test":"make test"},"devDependencies":{"vows":"~ 0.6.0","jslint":"https://github.com/reid/node-jslint/tarball/6131ebf5713274871b89735105e3286131804771"},"engines":{"node":"> 0.4.11"},"_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"_id":"js-yaml@0.3.7","dependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"d739d8ee86461e54b354d6a7d7d1f2ad9a167f62","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-0.3.7.tgz"},"readme":"JS-YAML - YAML 1.1 parser for JavaScript\n========================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\nThis is a native port of [PyYAML](http://pyyaml.org/), the most advanced YAML parser.\nNow you can use all modern YAML feature right in JavaScript. Originally snapshoted version - PyYAML 3.10 (2011-05-30).\n\n## Installation\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\nIf you want to inspect your YAML files from CLI,\ninstall [js-yaml.bin](https://github.com/nodeca/js-yaml.bin).\n\n\n### bundled YAML library for browser\n\n``` html\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support is still buggy, and mostly done to run online demo. If you\ncan help to improve browser compatibility and AMD support - rise pull request.\n\n\n## API\n\nJS-YAML automatically registers handlers for `.yml` and `.yaml` files. You can load them just with `require`.\nThat's mostly equivalent to calling loadAll() on file handler ang gathering all documents into array.\nJust with one string!\n\n``` javascript\nrequire('js-yaml');\n\n// Get array of documents, or throw exception on error\nvar docs = require('/home/ixti/examples.yml');\n\nconsole.log(docs);\n```\n\nIf you are sure, that file has only one document, chained `shift()` will help to exclude array wrapper:\n\n``` javascript\nrequire('js-yaml');\n\n// Get array of documents, or throw exception on error\nvar singleDoc = require('/home/ixti/examples.yml').shift();\n\nconsole.log(singleDoc);\n```\n\n\n### load (string|buffer|file\\_resource)\n\nParses source as single YAML document. Returns JS object or throws exception on error.\n\nThis function does NOT understands multi-doc sources, it throws exception on those.\n\n``` javascript\nvar yaml = require('js-yaml');\n\n// pass the string\nfs.readFile('/home/ixti/example.yml', 'utf8', function (err, data) {\n  if (err) {\n    // handle error\n    return;\n  }\n  try {\n    console.log( yaml.load(data) );\n  } catch(e) {\n    console.log(e);\n  }\n});\n```\n\n\n### loadAll (string|buffer|file\\_resource, iterator)\n\nSame as `Load`, but understands multi-doc sources and apply iterator to each document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\n// pass the string\nfs.readFile('/home/ixti/example.yml', 'utf8', function (err, data) {\n  if (err) {\n    // handle error\n    return;\n  }\n\n  try {\n    yaml.loadAll(data, function (doc) {\n      console.log(doc);\n    });\n  } catch(e) {\n    console.log(e);\n  }\n});\n```\n\n\n### safeLoad (string|buffer|file\\_resource)\n\nSame as `load()` but uses _safe_ schema - only recommended tags of YAML\nspecification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### safeLoadAll (string|buffer|file\\_resource, iterator)\n\nSame as `loadAll()` but uses _safe_ schema - only recommended tags of YAML\nspecification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n## JavaScript YAML tags scheme\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML Tag Discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and [Yaml Types](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\n### Caveats\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies them at the moment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n=>\n\n``` javascript\n{ \"\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\n## License\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file (MIT).\n","maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"1.0.0":{"name":"js-yaml","version":"1.0.0","description":"YAML 1.1 Parser","keywords":["yaml","parser","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},"contributors":[{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","bin":{"js-yaml":"bin/js-yaml.js"},"scripts":{"test":"make test"},"dependencies":{"argparse":"~ 0.1.3"},"devDependencies":{"vows":"~ 0.6.0"},"engines":{"node":">= 0.6.0"},"readme":"JS-YAML - YAML 1.1 parser for JavaScript\n========================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\nThis is a native port of [PyYAML](http://pyyaml.org/), the most advanced YAML parser.\nNow you can use all modern YAML feature right in JavaScript. Originally snapshoted version - PyYAML 3.10 (2011-05-30).\n\n\n## Braking changes in 0.3.x -> 1.0.x\n\n- `y`, `yes`, `n`, `no`, `on`, `off` are not converted to Booleans anymore.\n  Decision to drop support of such \"magic\" was made after speaking with YAML\n  core developers: from now on we try to keep as minimal subset of rules as\n  possible to keep things obvious. Booleans are following YAML 1.2 core schema\n  now: http://www.yaml.org/spec/1.2/spec.html#id2804923\n- `require('file.yml')` now returns a single document (was array of documents)\n  and throws an error when file contains multiple documents.\n- `js-yaml.bin` become part of `js-yaml` again.\n\n\n## Installation\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install js-yaml -g\n```\n\n##### Usage\n\n    usage: js-yaml [-h] [-v] [-c] [-j] [-t] file\n\n    Positional arguments:\n      file           File with YAML document(s)\n\n    Optional arguments:\n      -h, --help     Show this help message and exit.\n      -v, --version  Show program's version number and exit.\n      -c, --compact  Display errors in compact mode\n      -j, --to-json  Output a non-funky boring JSON\n      -t, --trace    Show stack trace on error\n\n\n\n### bundled YAML library for browser\n\n``` html\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support is still buggy, and mostly done to run online demo. If you\ncan help to improve browser compatibility and AMD support - rise pull request.\n\n\n## API\n\nJS-YAML automatically registers handlers for `.yml` and `.yaml` files. You can load them just with `require`.\nThat's mostly equivalent to calling loadAll() on file handler ang gathering all documents into array.\nJust with one string!\n\n``` javascript\nrequire('js-yaml');\n\n// Get document, or throw exception on error\nvar doc = require('/home/ixti/example.yml');\n\nconsole.log(doc);\n```\n\n\n### load (string|buffer|file\\_resource)\n\nParses source as single YAML document. Returns JS object or throws exception on error.\n\nThis function does NOT understands multi-doc sources, it throws exception on those.\n\n``` javascript\nvar yaml = require('js-yaml');\n\n// pass the string\nfs.readFile('/home/ixti/example.yml', 'utf8', function (err, data) {\n  if (err) {\n    // handle error\n    return;\n  }\n  try {\n    console.log( yaml.load(data) );\n  } catch(e) {\n    console.log(e);\n  }\n});\n```\n\n\n### loadAll (string|buffer|file\\_resource, iterator)\n\nSame as `Load`, but understands multi-doc sources and apply iterator to each document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\n// pass the string\nfs.readFile('/home/ixti/example.yml', 'utf8', function (err, data) {\n  if (err) {\n    // handle error\n    return;\n  }\n\n  try {\n    yaml.loadAll(data, function (doc) {\n      console.log(doc);\n    });\n  } catch(e) {\n    console.log(e);\n  }\n});\n```\n\n\n### safeLoad (string|buffer|file\\_resource)\n\nSame as `load()` but uses _safe_ schema - only recommended tags of YAML\nspecification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### safeLoadAll (string|buffer|file\\_resource, iterator)\n\nSame as `loadAll()` but uses _safe_ schema - only recommended tags of YAML\nspecification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n## JavaScript YAML tags scheme\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML Tag Discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and [Yaml Types](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\n### Caveats\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies them at the moment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n=>\n\n``` javascript\n{ \"\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\n## License\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file (MIT).\n","_id":"js-yaml@1.0.0","dist":{"shasum":"3e5b18955f343d042c1f7506810697ceadded873","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-1.0.0.tgz"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"1.0.1":{"name":"js-yaml","version":"1.0.1","description":"YAML 1.1 Parser","keywords":["yaml","parser","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},"contributors":[{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","bin":{"js-yaml":"bin/js-yaml.js"},"scripts":{"test":"make test"},"dependencies":{"argparse":"~ 0.1.3"},"devDependencies":{"vows":"~ 0.6.0"},"engines":{"node":">= 0.6.0"},"readme":"JS-YAML - YAML 1.1 parser for JavaScript\n========================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\nThis is a native port of [PyYAML](http://pyyaml.org/), the most advanced YAML parser.\nNow you can use all modern YAML feature right in JavaScript. Originally snapshoted version - PyYAML 3.10 (2011-05-30).\n\n\n## Braking changes in 0.3.x -> 1.0.x\n\n- `y`, `yes`, `n`, `no`, `on`, `off` are not converted to Booleans anymore.\n  Decision to drop support of such \"magic\" was made after speaking with YAML\n  core developers: from now on we try to keep as minimal subset of rules as\n  possible to keep things obvious. Booleans are following YAML 1.2 core schema\n  now: http://www.yaml.org/spec/1.2/spec.html#id2804923\n- `require('file.yml')` now returns a single document (was array of documents)\n  and throws an error when file contains multiple documents.\n- `js-yaml.bin` become part of `js-yaml` again.\n\n\n## Installation\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install js-yaml -g\n```\n\n##### Usage\n\n    usage: js-yaml [-h] [-v] [-c] [-j] [-t] file\n\n    Positional arguments:\n      file           File with YAML document(s)\n\n    Optional arguments:\n      -h, --help     Show this help message and exit.\n      -v, --version  Show program's version number and exit.\n      -c, --compact  Display errors in compact mode\n      -j, --to-json  Output a non-funky boring JSON\n      -t, --trace    Show stack trace on error\n\n\n\n### bundled YAML library for browser\n\n``` html\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support is still buggy, and mostly done to run online demo. If you\ncan help to improve browser compatibility and AMD support - rise pull request.\n\n\n## API\n\nJS-YAML automatically registers handlers for `.yml` and `.yaml` files. You can load them just with `require`.\nThat's mostly equivalent to calling loadAll() on file handler ang gathering all documents into array.\nJust with one string!\n\n``` javascript\nrequire('js-yaml');\n\n// Get document, or throw exception on error\nvar doc = require('/home/ixti/example.yml');\n\nconsole.log(doc);\n```\n\n\n### load (string|buffer|file\\_resource)\n\nParses source as single YAML document. Returns JS object or throws exception on error.\n\nThis function does NOT understands multi-doc sources, it throws exception on those.\n\n``` javascript\nvar yaml = require('js-yaml');\n\n// pass the string\nfs.readFile('/home/ixti/example.yml', 'utf8', function (err, data) {\n  if (err) {\n    // handle error\n    return;\n  }\n  try {\n    console.log( yaml.load(data) );\n  } catch(e) {\n    console.log(e);\n  }\n});\n```\n\n\n### loadAll (string|buffer|file\\_resource, iterator)\n\nSame as `Load`, but understands multi-doc sources and apply iterator to each document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\n// pass the string\nfs.readFile('/home/ixti/example.yml', 'utf8', function (err, data) {\n  if (err) {\n    // handle error\n    return;\n  }\n\n  try {\n    yaml.loadAll(data, function (doc) {\n      console.log(doc);\n    });\n  } catch(e) {\n    console.log(e);\n  }\n});\n```\n\n\n### safeLoad (string|buffer|file\\_resource)\n\nSame as `load()` but uses _safe_ schema - only recommended tags of YAML\nspecification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### safeLoadAll (string|buffer|file\\_resource, iterator)\n\nSame as `loadAll()` but uses _safe_ schema - only recommended tags of YAML\nspecification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n## JavaScript YAML tags scheme\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML Tag Discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and [Yaml Types](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\n### Caveats\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies them at the moment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n=>\n\n``` javascript\n{ \"\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\n## License\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file (MIT).\n","_id":"js-yaml@1.0.1","dist":{"shasum":"189fdf5ddf523f4f25d4f9914712e30776246201","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-1.0.1.tgz"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"1.0.2":{"name":"js-yaml","version":"1.0.2","description":"YAML 1.1 Parser","keywords":["yaml","parser","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},"contributors":[{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","bin":{"js-yaml":"bin/js-yaml.js"},"scripts":{"test":"make test"},"dependencies":{"argparse":"~ 0.1.3"},"devDependencies":{"vows":"~ 0.6.0"},"engines":{"node":">= 0.6.0"},"readme":"JS-YAML - YAML 1.1 parser for JavaScript\n========================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\nThis is a native port of [PyYAML](http://pyyaml.org/), the most advanced YAML parser.\nNow you can use all modern YAML feature right in JavaScript. Originally snapshoted\nversion - PyYAML 3.10 (2011-05-30).\n\n\n## Breaking changes in 0.3.x -> 1.0.x\n\n- `y`, `yes`, `n`, `no`, `on`, `off` are not converted to Booleans anymore.\n  Decision to drop support of such \"magic\" was made after speaking with YAML\n  core developers: from now on we try to keep as minimal subset of rules as\n  possible to keep things obvious. Booleans are following YAML 1.2 core schema\n  now: http://www.yaml.org/spec/1.2/spec.html#id2804923\n- `require('file.yml')` now returns a single document (was array of documents)\n  and throws an error when file contains multiple documents. That should improve\n  switching between YAML <-> JSON. `require('file.json')` will give the same\n  result now.\n- `js-yaml.bin` become part of `js-yaml` again.\n\n\n## Installation\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install js-yaml -g\n```\n\n##### Usage\n\n    usage: js-yaml [-h] [-v] [-c] [-j] [-t] file\n\n    Positional arguments:\n      file           File with YAML document(s)\n\n    Optional arguments:\n      -h, --help     Show this help message and exit.\n      -v, --version  Show program's version number and exit.\n      -c, --compact  Display errors in compact mode\n      -j, --to-json  Output a non-funky boring JSON\n      -t, --trace    Show stack trace on error\n\n\n\n### bundled YAML library for browser\n\n``` html\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support is still buggy, and mostly done to run online demo. If you\ncan help to improve browser compatibility and AMD support - rise pull request.\n\n**Support of oldIEs** and some other prehistoric browsers is possible using\n[es5-shims](https://github.com/kriskowal/es5-shim). Just include shims before\njsyaml to use it with outdated browsers.\n\n\n## API\n\nJS-YAML automatically registers handlers for `.yml` and `.yaml` files. You can load them just with `require`.\nThat's mostly equivalent to calling loadAll() on file handler ang gathering all documents into array.\nJust with one string!\n\n``` javascript\nrequire('js-yaml');\n\n// Get document, or throw exception on error\nvar doc = require('/home/ixti/example.yml');\n\nconsole.log(doc);\n```\n\n\n### load (string|buffer|file\\_resource)\n\nParses source as single YAML document. Returns JS object or throws exception on error.\n\nThis function does NOT understands multi-doc sources, it throws exception on those.\n\n``` javascript\nvar yaml = require('js-yaml');\n\n// pass the string\nfs.readFile('/home/ixti/example.yml', 'utf8', function (err, data) {\n  if (err) {\n    // handle error\n    return;\n  }\n  try {\n    console.log( yaml.load(data) );\n  } catch(e) {\n    console.log(e);\n  }\n});\n```\n\n\n### loadAll (string|buffer|file\\_resource, iterator)\n\nSame as `Load`, but understands multi-doc sources and apply iterator to each document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\n// pass the string\nfs.readFile('/home/ixti/example.yml', 'utf8', function (err, data) {\n  if (err) {\n    // handle error\n    return;\n  }\n\n  try {\n    yaml.loadAll(data, function (doc) {\n      console.log(doc);\n    });\n  } catch(e) {\n    console.log(e);\n  }\n});\n```\n\n\n### safeLoad (string|buffer|file\\_resource)\n\nSame as `load()` but uses _safe_ schema - only recommended tags of YAML\nspecification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### safeLoadAll (string|buffer|file\\_resource, iterator)\n\nSame as `loadAll()` but uses _safe_ schema - only recommended tags of YAML\nspecification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n## JavaScript YAML tags scheme\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML Tag Discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and [Yaml Types](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\n### Caveats\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies them at the moment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n=>\n\n``` javascript\n{ \"\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\n## License\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file (MIT).\n","_id":"js-yaml@1.0.2","dist":{"shasum":"ee3f5cebdf1b62d721e573480879d12e919c80d0","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-1.0.2.tgz"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"1.0.3":{"name":"js-yaml","version":"1.0.3","description":"YAML 1.1 Parser","keywords":["yaml","parser","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},"contributors":[{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","bin":{"js-yaml":"bin/js-yaml.js"},"scripts":{"test":"make test"},"dependencies":{"argparse":"~ 0.1.3"},"devDependencies":{"vows":"~ 0.6.0"},"engines":{"node":">= 0.6.0"},"readme":"JS-YAML - YAML 1.1 parser for JavaScript\n========================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\nThis is a native port of [PyYAML](http://pyyaml.org/), the most advanced YAML parser.\nNow you can use all modern YAML feature right in JavaScript. Originally snapshoted\nversion - PyYAML 3.10 (2011-05-30).\n\n\n## Breaking changes in 0.3.x -> 1.0.x\n\n- `y`, `yes`, `n`, `no`, `on`, `off` are not converted to Booleans anymore.\n  Decision to drop support of such \"magic\" was made after speaking with YAML\n  core developers: from now on we try to keep as minimal subset of rules as\n  possible to keep things obvious. Booleans are following YAML 1.2 core schema\n  now: http://www.yaml.org/spec/1.2/spec.html#id2804923\n- `require('file.yml')` now returns a single document (was array of documents)\n  and throws an error when file contains multiple documents. That should improve\n  switching between YAML <-> JSON. So `require('file.yml')` will give the same\n  result as if it was `require('file.json')` now.\n- CLI tool `js-yaml` become part of `js-yaml` again.\n\n\n## Installation\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install js-yaml -g\n```\n\n##### Usage\n\n    usage: js-yaml [-h] [-v] [-c] [-j] [-t] file\n\n    Positional arguments:\n      file           File with YAML document(s)\n\n    Optional arguments:\n      -h, --help     Show this help message and exit.\n      -v, --version  Show program's version number and exit.\n      -c, --compact  Display errors in compact mode\n      -j, --to-json  Output a non-funky boring JSON\n      -t, --trace    Show stack trace on error\n\n\n\n### bundled YAML library for browser\n\n``` html\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support is still buggy, and mostly done to run online demo. If you\ncan help to improve browser compatibility and AMD support - rise pull request.\n\n**Support of oldIEs** and some other prehistoric browsers is possible using\n[es5-shims](https://github.com/kriskowal/es5-shim). Just include shims before\njsyaml to use it with outdated browsers.\n\n\n## API\n\nJS-YAML automatically registers handlers for `.yml` and `.yaml` files. You can load them just with `require`.\nThat's mostly equivalent to calling loadAll() on file handler ang gathering all documents into array.\nJust with one string!\n\n``` javascript\nrequire('js-yaml');\n\n// Get document, or throw exception on error\nvar doc = require('/home/ixti/example.yml');\n\nconsole.log(doc);\n```\n\n\n### load (string|buffer|file\\_resource)\n\nParses source as single YAML document. Returns JS object or throws exception on error.\n\nThis function does NOT understands multi-doc sources, it throws exception on those.\n\n``` javascript\nvar yaml = require('js-yaml');\n\n// pass the string\nfs.readFile('/home/ixti/example.yml', 'utf8', function (err, data) {\n  if (err) {\n    // handle error\n    return;\n  }\n  try {\n    console.log( yaml.load(data) );\n  } catch(e) {\n    console.log(e);\n  }\n});\n```\n\n\n### loadAll (string|buffer|file\\_resource, iterator)\n\nSame as `Load`, but understands multi-doc sources and apply iterator to each document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\n// pass the string\nfs.readFile('/home/ixti/example.yml', 'utf8', function (err, data) {\n  if (err) {\n    // handle error\n    return;\n  }\n\n  try {\n    yaml.loadAll(data, function (doc) {\n      console.log(doc);\n    });\n  } catch(e) {\n    console.log(e);\n  }\n});\n```\n\n\n### safeLoad (string|buffer|file\\_resource)\n\nSame as `load()` but uses _safe_ schema - only recommended tags of YAML\nspecification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### safeLoadAll (string|buffer|file\\_resource, iterator)\n\nSame as `loadAll()` but uses _safe_ schema - only recommended tags of YAML\nspecification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n## JavaScript YAML tags scheme\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML Tag Discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and [Yaml Types](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\n### Caveats\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies them at the moment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n=>\n\n``` javascript\n{ \"\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\n## License\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file (MIT).\n","_id":"js-yaml@1.0.3","dist":{"shasum":"ec619760ffc8ae501c3d62673d874e2b9f07422a","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-1.0.3.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"2.0.0":{"name":"js-yaml","version":"2.0.0","description":"YAML 1.2 parser and serializer","keywords":["yaml","parser","serializer","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Dervus Grim","email":"dervus@lavabit.com"},"contributors":[{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","bin":{"js-yaml":"bin/js-yaml.js"},"scripts":{"test":"make test"},"dependencies":{"argparse":"~ 0.1.11"},"devDependencies":{"mocha":"*"},"engines":{"node":">= 0.6.0"},"readme":"JS-YAML - YAML 1.2 parser and serializer for JavaScript\n=======================================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n\nBreaking changes in 1.x.x -> 2.0.x\n----------------------------------\n\nIf your have not used __custom__ tags or loader classes - no changes needed. Just\nupgrade library and enjoy high parse speed.\n\nIn other case, you should rewrite your tag constructors and custom loader\nclasses, to conform new schema-based API. See\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n[wiki](https://github.com/nodeca/js-yaml/wiki) for details.\nNote, that parser internals were completely rewritten.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install js-yaml -g\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-j] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -j, --to-json  Output a non-funky boring JSON\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support was done mostly for online demo. If you find eny errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\n\nAPI\n---\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\nIn node.js JS-YAML automatically registers handlers for `.yml` and `.yaml`\nfiles. You can load them just with `require`. That's mostly equivalent to\ncalling `load()` on fetched content of a file. Just with one string!\n\n``` javascript\nrequire('js-yaml');\n\n// Get document, or throw exception on error\ntry {\n  var doc = require('/home/ixti/example.yml');\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### load (string [ , options ])\n\nParses `string` as single YAML document. Returns a JavaScript object or throws\n`YAMLException` on error.\n\nNOTE: This function **does not** understands multi-document sources, it throws\nexception on those.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `strict` _(default - false)_ makes the loader to throw errors instead of\n  warnings.\n- `schema` _(default: `DEFAULT_SCHEMA`)_ - specifies a schema to use.\n\n\n### loadAll (string, iterator [ , options ])\n\nSame as `load()`, but understands multi-document sources and apply `iterator` to\neach document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\nyaml.loadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### safeLoad (string [ , options ])\n\nSame as `load()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### safeLoadAll (string, iterator [ , options ])\n\nSame as `loadAll()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### dump (object [ , options ])\n\nSerializes `object` as YAML document.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SCHEMA`)_ specifies a schema to use.\n\nstyles:\n\n``` none\n!!null\n  \"canonical\"   => \"~\"\n\n!!int\n  \"binary\"      => \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       => \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" => \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!null, !!bool, !!float\n  \"lowercase\"   => \"null\", \"true\", \"false\", \".nan\", '.inf'\n  \"uppercase\"   => \"NULL\", \"TRUE\", \"FALSE\", \".NAN\", '.INF'\n  \"camelcase\"   => \"Null\", \"True\", \"False\", \".NaN\", '.Inf'\n```\n\nBy default, !!int uses `decimal`, and !!null, !!bool, !!float use `lowercase`.\n\n\n### safeDump (object [ , options ])\n\nSame as `dump()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\n\n\n\n## Caveats\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies (by calling .toString method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n## License\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n","readmeFilename":"README.md","_id":"js-yaml@2.0.0","dist":{"shasum":"49f50ea0d2264f68c2e16061e4c71bbebe1c5f93","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-2.0.0.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"2.0.1":{"name":"js-yaml","version":"2.0.1","description":"YAML 1.2 parser and serializer","keywords":["yaml","parser","serializer","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Dervus Grim","email":"dervus@lavabit.com"},"contributors":[{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","bin":{"js-yaml":"bin/js-yaml.js"},"scripts":{"test":"make test"},"dependencies":{"argparse":"~ 0.1.11"},"devDependencies":{"mocha":"*"},"engines":{"node":">= 0.6.0"},"readme":"JS-YAML - YAML 1.2 parser and serializer for JavaScript\n=======================================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n\nBreaking changes in 1.x.x -> 2.0.x\n----------------------------------\n\nIf your have not used __custom__ tags or loader classes - no changes needed. Just\nupgrade library and enjoy high parse speed.\n\nIn other case, you should rewrite your tag constructors and custom loader\nclasses, to conform new schema-based API. See\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n[wiki](https://github.com/nodeca/js-yaml/wiki) for details.\nNote, that parser internals were completely rewritten.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install js-yaml -g\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-j] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -j, --to-json  Output a non-funky boring JSON\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support was done mostly for online demo. If you find eny errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\n\nAPI\n---\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\nIn node.js JS-YAML automatically registers handlers for `.yml` and `.yaml`\nfiles. You can load them just with `require`. That's mostly equivalent to\ncalling `load()` on fetched content of a file. Just with one string!\n\n``` javascript\nrequire('js-yaml');\n\n// Get document, or throw exception on error\ntry {\n  var doc = require('/home/ixti/example.yml');\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### load (string [ , options ])\n\nParses `string` as single YAML document. Returns a JavaScript object or throws\n`YAMLException` on error.\n\nNOTE: This function **does not** understands multi-document sources, it throws\nexception on those.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `strict` _(default - false)_ makes the loader to throw errors instead of\n  warnings.\n- `schema` _(default: `DEFAULT_SCHEMA`)_ - specifies a schema to use.\n\n\n### loadAll (string, iterator [ , options ])\n\nSame as `load()`, but understands multi-document sources and apply `iterator` to\neach document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\nyaml.loadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### safeLoad (string [ , options ])\n\nSame as `load()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### safeLoadAll (string, iterator [ , options ])\n\nSame as `loadAll()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### dump (object [ , options ])\n\nSerializes `object` as YAML document.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SCHEMA`)_ specifies a schema to use.\n\nstyles:\n\n``` none\n!!null\n  \"canonical\"   => \"~\"\n\n!!int\n  \"binary\"      => \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       => \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" => \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!null, !!bool, !!float\n  \"lowercase\"   => \"null\", \"true\", \"false\", \".nan\", '.inf'\n  \"uppercase\"   => \"NULL\", \"TRUE\", \"FALSE\", \".NAN\", '.INF'\n  \"camelcase\"   => \"Null\", \"True\", \"False\", \".NaN\", '.Inf'\n```\n\nBy default, !!int uses `decimal`, and !!null, !!bool, !!float use `lowercase`.\n\n\n### safeDump (object [ , options ])\n\nSame as `dump()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\n\n\n\n## Caveats\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies (by calling .toString method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n## License\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n","readmeFilename":"README.md","_id":"js-yaml@2.0.1","dist":{"shasum":"f686747a6be294acadaf48ca68e7c0a647f05109","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-2.0.1.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"2.0.2":{"name":"js-yaml","version":"2.0.2","description":"YAML 1.2 parser and serializer","keywords":["yaml","parser","serializer","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Dervus Grim","email":"dervus@lavabit.com"},"contributors":[{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","bin":{"js-yaml":"bin/js-yaml.js"},"scripts":{"test":"make test"},"dependencies":{"argparse":"~ 0.1.11"},"devDependencies":{"mocha":"*"},"engines":{"node":">= 0.6.0"},"readme":"JS-YAML - YAML 1.2 parser and serializer for JavaScript\n=======================================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n\nBreaking changes in 1.x.x -> 2.0.x\n----------------------------------\n\nIf your have not used __custom__ tags or loader classes - no changes needed. Just\nupgrade library and enjoy high parse speed.\n\nIn other case, you should rewrite your tag constructors and custom loader\nclasses, to conform new schema-based API. See\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n[wiki](https://github.com/nodeca/js-yaml/wiki) for details.\nNote, that parser internals were completely rewritten.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install js-yaml -g\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-j] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -j, --to-json  Output a non-funky boring JSON\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support was done mostly for online demo. If you find eny errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\n\nAPI\n---\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\nIn node.js JS-YAML automatically registers handlers for `.yml` and `.yaml`\nfiles. You can load them just with `require`. That's mostly equivalent to\ncalling `load()` on fetched content of a file. Just with one string!\n\n``` javascript\nrequire('js-yaml');\n\n// Get document, or throw exception on error\ntry {\n  var doc = require('/home/ixti/example.yml');\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### load (string [ , options ])\n\nParses `string` as single YAML document. Returns a JavaScript object or throws\n`YAMLException` on error.\n\nNOTE: This function **does not** understands multi-document sources, it throws\nexception on those.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `strict` _(default - false)_ makes the loader to throw errors instead of\n  warnings.\n- `schema` _(default: `DEFAULT_SCHEMA`)_ - specifies a schema to use.\n\n\n### loadAll (string, iterator [ , options ])\n\nSame as `load()`, but understands multi-document sources and apply `iterator` to\neach document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\nyaml.loadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### safeLoad (string [ , options ])\n\nSame as `load()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### safeLoadAll (string, iterator [ , options ])\n\nSame as `loadAll()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### dump (object [ , options ])\n\nSerializes `object` as YAML document.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SCHEMA`)_ specifies a schema to use.\n\nstyles:\n\n``` none\n!!null\n  \"canonical\"   => \"~\"\n\n!!int\n  \"binary\"      => \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       => \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" => \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!null, !!bool, !!float\n  \"lowercase\"   => \"null\", \"true\", \"false\", \".nan\", '.inf'\n  \"uppercase\"   => \"NULL\", \"TRUE\", \"FALSE\", \".NAN\", '.INF'\n  \"camelcase\"   => \"Null\", \"True\", \"False\", \".NaN\", '.Inf'\n```\n\nBy default, !!int uses `decimal`, and !!null, !!bool, !!float use `lowercase`.\n\n\n### safeDump (object [ , options ])\n\nSame as `dump()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\n\n\n\n## Caveats\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies (by calling .toString method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n## License\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n","readmeFilename":"README.md","_id":"js-yaml@2.0.2","dist":{"shasum":"cbaad5a596cdebdb3c3b5e1a32a0662962961bd8","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-2.0.2.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"2.0.3":{"name":"js-yaml","version":"2.0.3","description":"YAML 1.2 parser and serializer","keywords":["yaml","parser","serializer","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Dervus Grim","email":"dervus@lavabit.com"},"contributors":[{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","bin":{"js-yaml":"bin/js-yaml.js"},"scripts":{"test":"make test"},"dependencies":{"argparse":"~ 0.1.11"},"devDependencies":{"mocha":"*"},"engines":{"node":">= 0.6.0"},"readme":"JS-YAML - YAML 1.2 parser and serializer for JavaScript\n=======================================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n\nBreaking changes in 1.x.x -> 2.0.x\n----------------------------------\n\nIf your have not used __custom__ tags or loader classes - no changes needed. Just\nupgrade library and enjoy high parse speed.\n\nIn other case, you should rewrite your tag constructors and custom loader\nclasses, to conform new schema-based API. See\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n[wiki](https://github.com/nodeca/js-yaml/wiki) for details.\nNote, that parser internals were completely rewritten.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install js-yaml -g\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-j] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -j, --to-json  Output a non-funky boring JSON\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support was done mostly for online demo. If you find eny errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\n\nAPI\n---\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\nIn node.js JS-YAML automatically registers handlers for `.yml` and `.yaml`\nfiles. You can load them just with `require`. That's mostly equivalent to\ncalling `load()` on fetched content of a file. Just with one string!\n\n``` javascript\nrequire('js-yaml');\n\n// Get document, or throw exception on error\ntry {\n  var doc = require('/home/ixti/example.yml');\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### load (string [ , options ])\n\nParses `string` as single YAML document. Returns a JavaScript object or throws\n`YAMLException` on error.\n\nNOTE: This function **does not** understands multi-document sources, it throws\nexception on those.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `strict` _(default - false)_ makes the loader to throw errors instead of\n  warnings.\n- `schema` _(default: `DEFAULT_SCHEMA`)_ - specifies a schema to use.\n\n\n### loadAll (string, iterator [ , options ])\n\nSame as `load()`, but understands multi-document sources and apply `iterator` to\neach document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\nyaml.loadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### safeLoad (string [ , options ])\n\nSame as `load()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### safeLoadAll (string, iterator [ , options ])\n\nSame as `loadAll()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### dump (object [ , options ])\n\nSerializes `object` as YAML document.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SCHEMA`)_ specifies a schema to use.\n\nstyles:\n\n``` none\n!!null\n  \"canonical\"   => \"~\"\n\n!!int\n  \"binary\"      => \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       => \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" => \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!null, !!bool, !!float\n  \"lowercase\"   => \"null\", \"true\", \"false\", \".nan\", '.inf'\n  \"uppercase\"   => \"NULL\", \"TRUE\", \"FALSE\", \".NAN\", '.INF'\n  \"camelcase\"   => \"Null\", \"True\", \"False\", \".NaN\", '.Inf'\n```\n\nBy default, !!int uses `decimal`, and !!null, !!bool, !!float use `lowercase`.\n\n\n### safeDump (object [ , options ])\n\nSame as `dump()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\n\n\n\n## Caveats\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies (by calling .toString method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n## License\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n","readmeFilename":"README.md","_id":"js-yaml@2.0.3","dist":{"shasum":"cf3d3372fd7bcc6d01b442d3dab408abf28c82e7","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-2.0.3.tgz"},"_from":"https://github.com/nodeca/js-yaml/tarball/2.0.3","_resolved":"https://github.com/nodeca/js-yaml/tarball/2.0.3","_npmVersion":"1.2.11","_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"2.0.4":{"name":"js-yaml","version":"2.0.4","description":"YAML 1.2 parser and serializer","keywords":["yaml","parser","serializer","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Dervus Grim","email":"dervus@lavabit.com"},"contributors":[{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","bin":{"js-yaml":"bin/js-yaml.js"},"scripts":{"test":"make test"},"dependencies":{"argparse":"~ 0.1.11"},"devDependencies":{"mocha":"*"},"engines":{"node":">= 0.6.0"},"readme":"JS-YAML - YAML 1.2 parser and serializer for JavaScript\n=======================================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n\nBreaking changes in 1.x.x -> 2.0.x\n----------------------------------\n\nIf your have not used __custom__ tags or loader classes - no changes needed. Just\nupgrade library and enjoy high parse speed.\n\nIn other case, you should rewrite your tag constructors and custom loader\nclasses, to conform new schema-based API. See\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n[wiki](https://github.com/nodeca/js-yaml/wiki) for details.\nNote, that parser internals were completely rewritten.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install js-yaml -g\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-j] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -j, --to-json  Output a non-funky boring JSON\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support was done mostly for online demo. If you find any errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\n\nAPI\n---\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\nIn node.js JS-YAML automatically registers handlers for `.yml` and `.yaml`\nfiles. You can load them just with `require`. That's mostly equivalent to\ncalling `load()` on fetched content of a file. Just with one string!\n\n``` javascript\nrequire('js-yaml');\n\n// Get document, or throw exception on error\ntry {\n  var doc = require('/home/ixti/example.yml');\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### load (string [ , options ])\n\nParses `string` as single YAML document. Returns a JavaScript object or throws\n`YAMLException` on error.\n\nNOTE: This function **does not** understands multi-document sources, it throws\nexception on those.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `strict` _(default - false)_ makes the loader to throw errors instead of\n  warnings.\n- `schema` _(default: `DEFAULT_SCHEMA`)_ - specifies a schema to use.\n\n\n### loadAll (string, iterator [ , options ])\n\nSame as `load()`, but understands multi-document sources and apply `iterator` to\neach document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\nyaml.loadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### safeLoad (string [ , options ])\n\nSame as `load()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### safeLoadAll (string, iterator [ , options ])\n\nSame as `loadAll()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### dump (object [ , options ])\n\nSerializes `object` as YAML document.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SCHEMA`)_ specifies a schema to use.\n\nstyles:\n\n``` none\n!!null\n  \"canonical\"   => \"~\"\n\n!!int\n  \"binary\"      => \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       => \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" => \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!null, !!bool, !!float\n  \"lowercase\"   => \"null\", \"true\", \"false\", \".nan\", '.inf'\n  \"uppercase\"   => \"NULL\", \"TRUE\", \"FALSE\", \".NAN\", '.INF'\n  \"camelcase\"   => \"Null\", \"True\", \"False\", \".NaN\", '.Inf'\n```\n\nBy default, !!int uses `decimal`, and !!null, !!bool, !!float use `lowercase`.\n\n\n### safeDump (object [ , options ])\n\nSame as `dump()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\n\n\n\n## Caveats\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies (by calling .toString method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n## License\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n","readmeFilename":"README.md","_id":"js-yaml@2.0.4","dist":{"shasum":"e6b25fceaa2fe9ce062a4d6150079d110786153c","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-2.0.4.tgz"},"_from":"https://github.com/nodeca/js-yaml/tarball/2.0.4","_resolved":"https://github.com/nodeca/js-yaml/tarball/2.0.4","_npmVersion":"1.2.14","_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"2.0.5":{"name":"js-yaml","version":"2.0.5","description":"YAML 1.2 parser and serializer","keywords":["yaml","parser","serializer","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Dervus Grim","email":"dervus@lavabit.com"},"contributors":[{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","bin":{"js-yaml":"bin/js-yaml.js"},"scripts":{"test":"make test"},"dependencies":{"argparse":"~ 0.1.11","esprima":"~ 1.0.2"},"devDependencies":{"mocha":"*"},"engines":{"node":">= 0.6.0"},"readme":"JS-YAML - YAML 1.2 parser and serializer for JavaScript\n=======================================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n\nBreaking changes in 1.x.x -> 2.0.x\n----------------------------------\n\nIf your have not used __custom__ tags or loader classes - no changes needed. Just\nupgrade library and enjoy high parse speed.\n\nIn other case, you should rewrite your tag constructors and custom loader\nclasses, to conform new schema-based API. See\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n[wiki](https://github.com/nodeca/js-yaml/wiki) for details.\nNote, that parser internals were completely rewritten.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install js-yaml -g\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-j] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -j, --to-json  Output a non-funky boring JSON\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support was done mostly for online demo. If you find any errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\n\nAPI\n---\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\nIn node.js JS-YAML automatically registers handlers for `.yml` and `.yaml`\nfiles. You can load them just with `require`. That's mostly equivalent to\ncalling `load()` on fetched content of a file. Just with one string!\n\n``` javascript\nrequire('js-yaml');\n\n// Get document, or throw exception on error\ntry {\n  var doc = require('/home/ixti/example.yml');\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### load (string [ , options ])\n\nParses `string` as single YAML document. Returns a JavaScript object or throws\n`YAMLException` on error.\n\nNOTE: This function **does not** understands multi-document sources, it throws\nexception on those.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `strict` _(default - false)_ makes the loader to throw errors instead of\n  warnings.\n- `schema` _(default: `DEFAULT_SCHEMA`)_ - specifies a schema to use.\n\n\n### loadAll (string, iterator [ , options ])\n\nSame as `load()`, but understands multi-document sources and apply `iterator` to\neach document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\nyaml.loadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### safeLoad (string [ , options ])\n\nSame as `load()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### safeLoadAll (string, iterator [ , options ])\n\nSame as `loadAll()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### dump (object [ , options ])\n\nSerializes `object` as YAML document.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SCHEMA`)_ specifies a schema to use.\n\nstyles:\n\n``` none\n!!null\n  \"canonical\"   => \"~\"\n\n!!int\n  \"binary\"      => \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       => \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" => \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!null, !!bool, !!float\n  \"lowercase\"   => \"null\", \"true\", \"false\", \".nan\", '.inf'\n  \"uppercase\"   => \"NULL\", \"TRUE\", \"FALSE\", \".NAN\", '.INF'\n  \"camelcase\"   => \"Null\", \"True\", \"False\", \".NaN\", '.Inf'\n```\n\nBy default, !!int uses `decimal`, and !!null, !!bool, !!float use `lowercase`.\n\n\n### safeDump (object [ , options ])\n\nSame as `dump()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\n\n\n\n## Caveats\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies (by calling .toString method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n## License\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n","readmeFilename":"README.md","_id":"js-yaml@2.0.5","dist":{"shasum":"a25ae6509999e97df278c6719da11bd0687743a8","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-2.0.5.tgz"},"_from":"https://github.com/nodeca/js-yaml/tarball/2.0.5","_resolved":"https://github.com/nodeca/js-yaml/tarball/2.0.5","_npmVersion":"1.2.14","_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"2.1.0":{"name":"js-yaml","version":"2.1.0","description":"YAML 1.2 parser and serializer","keywords":["yaml","parser","serializer","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Dervus Grim","email":"dervus@lavabit.com"},"contributors":[{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","bin":{"js-yaml":"bin/js-yaml.js"},"scripts":{"test":"make test"},"dependencies":{"argparse":"~ 0.1.11","esprima":"~ 1.0.2"},"devDependencies":{"mocha":"*"},"engines":{"node":">= 0.6.0"},"readme":"JS-YAML - YAML 1.2 parser and serializer for JavaScript\n=======================================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install js-yaml -g\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-j] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -j, --to-json  Output a non-funky boring JSON\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support was done mostly for online demo. If you find any errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\n\nAPI\n---\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\nIn node.js JS-YAML automatically registers handlers for `.yml` and `.yaml`\nfiles. You can load them just with `require`. That's mostly equivalent to\ncalling `load()` on fetched content of a file. Just with one string!\n\n``` javascript\nrequire('js-yaml');\n\n// Get document, or throw exception on error\ntry {\n  var doc = require('/home/ixti/example.yml');\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### safeLoad (string [ , options ])\n\n**Recommended loading way.** Parses `string` as single YAML document. Returns a JavaScript\nobject or throws `YAMLException` on error. By default, does not support regexps,\nfunctions and undefined. This method is safe for untrusted data.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `strict` _(default - false)_ makes the loader to throw errors instead of\n  warnings.\n- `schema` _(default: `DEFAULT_FULL_SCHEMA`)_ - specifies a schema to use.\n  - `FAILSAFE_SCHEMA` - only strings, arrays and plain objects:\n    http://www.yaml.org/spec/1.2/spec.html#id2802346\n  - `JSON_SCHEMA` - all JSON-supported types:\n    http://www.yaml.org/spec/1.2/spec.html#id2803231\n  - `CORE_SCHEMA` - same as `JSON_SCHEMA`:\n    http://www.yaml.org/spec/1.2/spec.html#id2804923\n  - `DEFAULT_SAFE_SCHEMA` - all supported YAML types, without unsafe ones\n    (`!!js/undefined`, `!!js/regexp` and `!!js/function`):\n    http://yaml.org/type/\n  - `DEFAULT_FULL_SCHEMA` - all supported YAML types.\n\nNOTE: This function **does not** understand multi-document sources, it throws\nexception on those.\n\nNOTE: JS-YAML **does not** support schema-specific tag resolution restrictions.\nSo, JSON schema is not such strict as defined in the YAML specification.\nIt allows numbers in any notaion, use `Null` and `NULL` as `null`, etc.\nCore schema also has no such restrictions. It allows binary notation for integers.\n\n\n### load (string [ , options ])\n\n**Use with care with untrusted sources**. The same as `safeLoad()` but uses\n`DEFAULT_FULL_SCHEMA` by default - adds some JavaScript-specific types:\n`!!js/function`, `!!js/regexp` and `!!js/undefined`. For untrusted sources you\nmust additionally validate object structure, to avoid injections:\n\n``` javascript\nvar untrusted_code = '\"toString\": !<tag:yaml.org,2002:js/function> \"function (){very_evil_thing();}\"';\n\n// I'm just converting that string, what could possibly go wrong?\nrequire('js-yaml').load(untrusted_code) + ''\n```\n\n\n### safeLoadAll (string, iterator [ , options ])\n\nSame as `safeLoad()`, but understands multi-document sources and apply\n`iterator` to each document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\nyaml.safeLoadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### loadAll (string, iterator [ , options ])\n\nSame as `safeLoadAll()` but uses `DEFAULT_FULL_SCHEMA` by default.\n\n\n### safeDump (object [ , options ])\n\nSerializes `object` as YAML document. Uses `DEFAULT_SAFE_SCHEMA`, so it will\nthrow exception if you try to dump regexps or functions. However, you can\ndisable exceptions by `skipInvalid` option.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `skipInvalid` _(default: false)_ - do not throw on invalid types (like function\n  in the safe schema) and skip pairs and single values with such types.\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ specifies a schema to use.\n\nstyles:\n\n``` none\n!!null\n  \"canonical\"   => \"~\"\n\n!!int\n  \"binary\"      => \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       => \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" => \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!null, !!bool, !!float\n  \"lowercase\"   => \"null\", \"true\", \"false\", \".nan\", '.inf'\n  \"uppercase\"   => \"NULL\", \"TRUE\", \"FALSE\", \".NAN\", '.INF'\n  \"camelcase\"   => \"Null\", \"True\", \"False\", \".NaN\", '.Inf'\n```\n\nBy default, !!int uses `decimal`, and !!null, !!bool, !!float use `lowercase`.\n\n\n\n### dump (object [ , options ])\n\nSame as `safeDump()` but without limits (uses `DEFAULT_FULL_SCHEMA` by default).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\nCaveats\n-------\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies (by calling .toString method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n\nBreaking changes in 1.x.x -> 2.0.x\n----------------------------------\n\nIf your have not used __custom__ tags or loader classes - no changes needed. Just\nupgrade library and enjoy high parse speed.\n\nIn other case, you should rewrite your tag constructors and custom loader\nclasses, to conform new schema-based API. See\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n[wiki](https://github.com/nodeca/js-yaml/wiki) for details.\nNote, that parser internals were completely rewritten.\n\n\nLicense\n-------\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n","readmeFilename":"README.md","_id":"js-yaml@2.1.0","dist":{"shasum":"a55a6e4706b01d06326259a6f4bfc42e6ae38b1f","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-2.1.0.tgz"},"_from":"https://github.com/nodeca/js-yaml/tarball/2.1.0","_resolved":"https://github.com/nodeca/js-yaml/tarball/2.1.0","_npmVersion":"1.2.18","_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"2.1.1":{"name":"js-yaml","version":"2.1.1","description":"YAML 1.2 parser and serializer","keywords":["yaml","parser","serializer","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Dervus Grim","email":"dervus@lavabit.com"},"contributors":[{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","bin":{"js-yaml":"bin/js-yaml.js"},"scripts":{"test":"make test"},"dependencies":{"argparse":"~ 0.1.11","esprima":"~ 1.0.2"},"devDependencies":{"mocha":"*"},"engines":{"node":">= 0.6.0"},"readme":"JS-YAML - YAML 1.2 parser and serializer for JavaScript\n=======================================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install js-yaml -g\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-j] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -j, --to-json  Output a non-funky boring JSON\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support was done mostly for online demo. If you find any errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\n\nAPI\n---\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\nIn node.js JS-YAML automatically registers handlers for `.yml` and `.yaml`\nfiles. You can load them just with `require`. That's mostly equivalent to\ncalling `safeLoad()` on fetched content of a file. Just with one string!\n\n``` javascript\nrequire('js-yaml');\n\n// Get document, or throw exception on error\ntry {\n  var doc = require('/home/ixti/example.yml');\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### safeLoad (string [ , options ])\n\n**Recommended loading way.** Parses `string` as single YAML document. Returns a JavaScript\nobject or throws `YAMLException` on error. By default, does not support regexps,\nfunctions and undefined. This method is safe for untrusted data.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `strict` _(default - false)_ makes the loader to throw errors instead of\n  warnings.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ - specifies a schema to use.\n  - `FAILSAFE_SCHEMA` - only strings, arrays and plain objects:\n    http://www.yaml.org/spec/1.2/spec.html#id2802346\n  - `JSON_SCHEMA` - all JSON-supported types:\n    http://www.yaml.org/spec/1.2/spec.html#id2803231\n  - `CORE_SCHEMA` - same as `JSON_SCHEMA`:\n    http://www.yaml.org/spec/1.2/spec.html#id2804923\n  - `DEFAULT_SAFE_SCHEMA` - all supported YAML types, without unsafe ones\n    (`!!js/undefined`, `!!js/regexp` and `!!js/function`):\n    http://yaml.org/type/\n  - `DEFAULT_FULL_SCHEMA` - all supported YAML types.\n\nNOTE: This function **does not** understand multi-document sources, it throws\nexception on those.\n\nNOTE: JS-YAML **does not** support schema-specific tag resolution restrictions.\nSo, JSON schema is not such strict as defined in the YAML specification.\nIt allows numbers in any notaion, use `Null` and `NULL` as `null`, etc.\nCore schema also has no such restrictions. It allows binary notation for integers.\n\n\n### load (string [ , options ])\n\n**Use with care with untrusted sources**. The same as `safeLoad()` but uses\n`DEFAULT_FULL_SCHEMA` by default - adds some JavaScript-specific types:\n`!!js/function`, `!!js/regexp` and `!!js/undefined`. For untrusted sources you\nmust additionally validate object structure, to avoid injections:\n\n``` javascript\nvar untrusted_code = '\"toString\": !<tag:yaml.org,2002:js/function> \"function (){very_evil_thing();}\"';\n\n// I'm just converting that string, what could possibly go wrong?\nrequire('js-yaml').load(untrusted_code) + ''\n```\n\n\n### safeLoadAll (string, iterator [ , options ])\n\nSame as `safeLoad()`, but understands multi-document sources and apply\n`iterator` to each document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\nyaml.safeLoadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### loadAll (string, iterator [ , options ])\n\nSame as `safeLoadAll()` but uses `DEFAULT_FULL_SCHEMA` by default.\n\n\n### safeDump (object [ , options ])\n\nSerializes `object` as YAML document. Uses `DEFAULT_SAFE_SCHEMA`, so it will\nthrow exception if you try to dump regexps or functions. However, you can\ndisable exceptions by `skipInvalid` option.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `skipInvalid` _(default: false)_ - do not throw on invalid types (like function\n  in the safe schema) and skip pairs and single values with such types.\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ specifies a schema to use.\n\nstyles:\n\n``` none\n!!null\n  \"canonical\"   => \"~\"\n\n!!int\n  \"binary\"      => \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       => \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" => \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!null, !!bool, !!float\n  \"lowercase\"   => \"null\", \"true\", \"false\", \".nan\", '.inf'\n  \"uppercase\"   => \"NULL\", \"TRUE\", \"FALSE\", \".NAN\", '.INF'\n  \"camelcase\"   => \"Null\", \"True\", \"False\", \".NaN\", '.Inf'\n```\n\nBy default, !!int uses `decimal`, and !!null, !!bool, !!float use `lowercase`.\n\n\n\n### dump (object [ , options ])\n\nSame as `safeDump()` but without limits (uses `DEFAULT_FULL_SCHEMA` by default).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\nCaveats\n-------\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies (by calling .toString method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n\nBreaking changes in 1.x.x -> 2.0.x\n----------------------------------\n\nIf your have not used __custom__ tags or loader classes - no changes needed. Just\nupgrade library and enjoy high parse speed.\n\nIn other case, you should rewrite your tag constructors and custom loader\nclasses, to conform new schema-based API. See\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n[wiki](https://github.com/nodeca/js-yaml/wiki) for details.\nNote, that parser internals were completely rewritten.\n\n\nLicense\n-------\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n","readmeFilename":"README.md","_id":"js-yaml@2.1.1","dist":{"shasum":"574095ef2253694313a6c2b261c7b6929a9603b7","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-2.1.1.tgz"},"_from":"https://github.com/nodeca/js-yaml/tarball/2.1.1","_resolved":"https://github.com/nodeca/js-yaml/tarball/2.1.1","_npmVersion":"1.2.32","_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"2.1.2":{"name":"js-yaml","version":"2.1.2","description":"YAML 1.2 parser and serializer","keywords":["yaml","parser","serializer","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Dervus Grim","email":"dervus@lavabit.com"},"contributors":[{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","bin":{"js-yaml":"bin/js-yaml.js"},"scripts":{"test":"make test"},"dependencies":{"argparse":"~ 0.1.11","esprima":"~ 1.0.2"},"devDependencies":{"mocha":"*"},"engines":{"node":">= 0.6.0"},"readme":"JS-YAML - YAML 1.2 parser and serializer for JavaScript\n=======================================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install js-yaml -g\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-j] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -j, --to-json  Output a non-funky boring JSON\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support was done mostly for online demo. If you find any errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\n\nAPI\n---\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\nIn node.js JS-YAML automatically registers handlers for `.yml` and `.yaml`\nfiles. You can load them just with `require`. That's mostly equivalent to\ncalling `safeLoad()` on fetched content of a file. Just with one string!\n\n``` javascript\nrequire('js-yaml');\n\n// Get document, or throw exception on error\ntry {\n  var doc = require('/home/ixti/example.yml');\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### safeLoad (string [ , options ])\n\n**Recommended loading way.** Parses `string` as single YAML document. Returns a JavaScript\nobject or throws `YAMLException` on error. By default, does not support regexps,\nfunctions and undefined. This method is safe for untrusted data.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `strict` _(default - false)_ makes the loader to throw errors instead of\n  warnings.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ - specifies a schema to use.\n  - `FAILSAFE_SCHEMA` - only strings, arrays and plain objects:\n    http://www.yaml.org/spec/1.2/spec.html#id2802346\n  - `JSON_SCHEMA` - all JSON-supported types:\n    http://www.yaml.org/spec/1.2/spec.html#id2803231\n  - `CORE_SCHEMA` - same as `JSON_SCHEMA`:\n    http://www.yaml.org/spec/1.2/spec.html#id2804923\n  - `DEFAULT_SAFE_SCHEMA` - all supported YAML types, without unsafe ones\n    (`!!js/undefined`, `!!js/regexp` and `!!js/function`):\n    http://yaml.org/type/\n  - `DEFAULT_FULL_SCHEMA` - all supported YAML types.\n\nNOTE: This function **does not** understand multi-document sources, it throws\nexception on those.\n\nNOTE: JS-YAML **does not** support schema-specific tag resolution restrictions.\nSo, JSON schema is not such strict as defined in the YAML specification.\nIt allows numbers in any notaion, use `Null` and `NULL` as `null`, etc.\nCore schema also has no such restrictions. It allows binary notation for integers.\n\n\n### load (string [ , options ])\n\n**Use with care with untrusted sources**. The same as `safeLoad()` but uses\n`DEFAULT_FULL_SCHEMA` by default - adds some JavaScript-specific types:\n`!!js/function`, `!!js/regexp` and `!!js/undefined`. For untrusted sources you\nmust additionally validate object structure, to avoid injections:\n\n``` javascript\nvar untrusted_code = '\"toString\": !<tag:yaml.org,2002:js/function> \"function (){very_evil_thing();}\"';\n\n// I'm just converting that string, what could possibly go wrong?\nrequire('js-yaml').load(untrusted_code) + ''\n```\n\n\n### safeLoadAll (string, iterator [ , options ])\n\nSame as `safeLoad()`, but understands multi-document sources and apply\n`iterator` to each document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\nyaml.safeLoadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### loadAll (string, iterator [ , options ])\n\nSame as `safeLoadAll()` but uses `DEFAULT_FULL_SCHEMA` by default.\n\n\n### safeDump (object [ , options ])\n\nSerializes `object` as YAML document. Uses `DEFAULT_SAFE_SCHEMA`, so it will\nthrow exception if you try to dump regexps or functions. However, you can\ndisable exceptions by `skipInvalid` option.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `skipInvalid` _(default: false)_ - do not throw on invalid types (like function\n  in the safe schema) and skip pairs and single values with such types.\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ specifies a schema to use.\n\nstyles:\n\n``` none\n!!null\n  \"canonical\"   => \"~\"\n\n!!int\n  \"binary\"      => \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       => \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" => \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!null, !!bool, !!float\n  \"lowercase\"   => \"null\", \"true\", \"false\", \".nan\", '.inf'\n  \"uppercase\"   => \"NULL\", \"TRUE\", \"FALSE\", \".NAN\", '.INF'\n  \"camelcase\"   => \"Null\", \"True\", \"False\", \".NaN\", '.Inf'\n```\n\nBy default, !!int uses `decimal`, and !!null, !!bool, !!float use `lowercase`.\n\n\n\n### dump (object [ , options ])\n\nSame as `safeDump()` but without limits (uses `DEFAULT_FULL_SCHEMA` by default).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\nCaveats\n-------\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies (by calling .toString method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n\nBreaking changes in 1.x.x -> 2.0.x\n----------------------------------\n\nIf your have not used __custom__ tags or loader classes - no changes needed. Just\nupgrade library and enjoy high parse speed.\n\nIn other case, you should rewrite your tag constructors and custom loader\nclasses, to conform new schema-based API. See\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n[wiki](https://github.com/nodeca/js-yaml/wiki) for details.\nNote, that parser internals were completely rewritten.\n\n\nLicense\n-------\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n","readmeFilename":"README.md","_id":"js-yaml@2.1.2","dist":{"shasum":"5404d58972f70112763e0b7e97ced20c39138bbd","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-2.1.2.tgz"},"_from":"https://github.com/nodeca/js-yaml/tarball/2.1.2","_resolved":"https://github.com/nodeca/js-yaml/tarball/2.1.2","_npmVersion":"1.3.8","_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"2.1.3":{"name":"js-yaml","version":"2.1.3","description":"YAML 1.2 parser and serializer","keywords":["yaml","parser","serializer","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Dervus Grim","email":"dervus.grim@gmail.com"},"contributors":[{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","bin":{"js-yaml":"bin/js-yaml.js"},"scripts":{"test":"make test"},"dependencies":{"argparse":"~ 0.1.11","esprima":"~ 1.0.2"},"devDependencies":{"mocha":"*"},"engines":{"node":">= 0.6.0"},"readme":"JS-YAML - YAML 1.2 parser and serializer for JavaScript\n=======================================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install js-yaml -g\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-j] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -j, --to-json  Output a non-funky boring JSON\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support was done mostly for online demo. If you find any errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\n\nAPI\n---\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\nIn node.js JS-YAML automatically registers handlers for `.yml` and `.yaml`\nfiles. You can load them just with `require`. That's mostly equivalent to\ncalling `safeLoad()` on fetched content of a file. Just with one string!\n\n``` javascript\nrequire('js-yaml');\n\n// Get document, or throw exception on error\ntry {\n  var doc = require('/home/ixti/example.yml');\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### safeLoad (string [ , options ])\n\n**Recommended loading way.** Parses `string` as single YAML document. Returns a JavaScript\nobject or throws `YAMLException` on error. By default, does not support regexps,\nfunctions and undefined. This method is safe for untrusted data.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `strict` _(default - false)_ makes the loader to throw errors instead of\n  warnings.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ - specifies a schema to use.\n  - `FAILSAFE_SCHEMA` - only strings, arrays and plain objects:\n    http://www.yaml.org/spec/1.2/spec.html#id2802346\n  - `JSON_SCHEMA` - all JSON-supported types:\n    http://www.yaml.org/spec/1.2/spec.html#id2803231\n  - `CORE_SCHEMA` - same as `JSON_SCHEMA`:\n    http://www.yaml.org/spec/1.2/spec.html#id2804923\n  - `DEFAULT_SAFE_SCHEMA` - all supported YAML types, without unsafe ones\n    (`!!js/undefined`, `!!js/regexp` and `!!js/function`):\n    http://yaml.org/type/\n  - `DEFAULT_FULL_SCHEMA` - all supported YAML types.\n\nNOTE: This function **does not** understand multi-document sources, it throws\nexception on those.\n\nNOTE: JS-YAML **does not** support schema-specific tag resolution restrictions.\nSo, JSON schema is not such strict as defined in the YAML specification.\nIt allows numbers in any notaion, use `Null` and `NULL` as `null`, etc.\nCore schema also has no such restrictions. It allows binary notation for integers.\n\n\n### load (string [ , options ])\n\n**Use with care with untrusted sources**. The same as `safeLoad()` but uses\n`DEFAULT_FULL_SCHEMA` by default - adds some JavaScript-specific types:\n`!!js/function`, `!!js/regexp` and `!!js/undefined`. For untrusted sources you\nmust additionally validate object structure, to avoid injections:\n\n``` javascript\nvar untrusted_code = '\"toString\": !<tag:yaml.org,2002:js/function> \"function (){very_evil_thing();}\"';\n\n// I'm just converting that string, what could possibly go wrong?\nrequire('js-yaml').load(untrusted_code) + ''\n```\n\n\n### safeLoadAll (string, iterator [ , options ])\n\nSame as `safeLoad()`, but understands multi-document sources and apply\n`iterator` to each document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\nyaml.safeLoadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### loadAll (string, iterator [ , options ])\n\nSame as `safeLoadAll()` but uses `DEFAULT_FULL_SCHEMA` by default.\n\n\n### safeDump (object [ , options ])\n\nSerializes `object` as YAML document. Uses `DEFAULT_SAFE_SCHEMA`, so it will\nthrow exception if you try to dump regexps or functions. However, you can\ndisable exceptions by `skipInvalid` option.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `skipInvalid` _(default: false)_ - do not throw on invalid types (like function\n  in the safe schema) and skip pairs and single values with such types.\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ specifies a schema to use.\n\nstyles:\n\n``` none\n!!null\n  \"canonical\"   => \"~\"\n\n!!int\n  \"binary\"      => \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       => \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" => \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!null, !!bool, !!float\n  \"lowercase\"   => \"null\", \"true\", \"false\", \".nan\", '.inf'\n  \"uppercase\"   => \"NULL\", \"TRUE\", \"FALSE\", \".NAN\", '.INF'\n  \"camelcase\"   => \"Null\", \"True\", \"False\", \".NaN\", '.Inf'\n```\n\nBy default, !!int uses `decimal`, and !!null, !!bool, !!float use `lowercase`.\n\n\n\n### dump (object [ , options ])\n\nSame as `safeDump()` but without limits (uses `DEFAULT_FULL_SCHEMA` by default).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\nCaveats\n-------\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies (by calling .toString method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n\nBreaking changes in 1.x.x -> 2.0.x\n----------------------------------\n\nIf your have not used __custom__ tags or loader classes - no changes needed. Just\nupgrade library and enjoy high parse speed.\n\nIn other case, you should rewrite your tag constructors and custom loader\nclasses, to conform new schema-based API. See\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n[wiki](https://github.com/nodeca/js-yaml/wiki) for details.\nNote, that parser internals were completely rewritten.\n\n\nLicense\n-------\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n","readmeFilename":"README.md","_id":"js-yaml@2.1.3","dist":{"shasum":"0ffb5617be55525878063d7a16aee7fdd282e84c","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-2.1.3.tgz"},"_from":"https://github.com/nodeca/js-yaml/tarball/2.1.3","_resolved":"https://github.com/nodeca/js-yaml/tarball/2.1.3","_npmVersion":"1.3.8","_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"3.0.0":{"name":"js-yaml","version":"3.0.0","description":"YAML 1.2 parser and serializer","keywords":["yaml","parser","serializer","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Dervus Grim","email":"dervus.grim@gmail.com"},"contributors":[{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","bin":{"js-yaml":"bin/js-yaml.js"},"scripts":{"test":"make test"},"dependencies":{"argparse":"~ 0.1.11","esprima":"~ 1.0.2"},"devDependencies":{"mocha":"*"},"engines":{"node":">= 0.6.0"},"readme":"JS-YAML - YAML 1.2 parser and serializer for JavaScript\n=======================================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install -g js-yaml\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<!-- esprima required only for !!js/function -->\n<script src=\"esprima.js\"></script>\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support was done mostly for online demo. If you find any errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\nNotes:\n\n1. We have no resourses to support browserified version. Don't expect it to be\n   well tested. Don't expect fast fixes if something goes wrong there.\n2. `!!js/function` in browser bundle will not work by default. If you really need\n   it - load `esprima` parser first (via amd or directly).\n3. `!!bin` in browser will return `Array`, because browsers do not support\n   node.js `Buffer` and adding Buffer shims is completely useless on practice.\n\n\nAPI\n---\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\n``` javascript\nyaml = require('js-yaml');\nfs   = require('fs');\n\n// Get document, or throw exception on error\ntry {\n  var doc = yaml.safeLoad(fs.readFileSync('/home/ixti/example.yml', 'utf8'));\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### safeLoad (string [ , options ])\n\n**Recommended loading way.** Parses `string` as single YAML document. Returns a JavaScript\nobject or throws `YAMLException` on error. By default, does not support regexps,\nfunctions and undefined. This method is safe for untrusted data.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `strict` _(default - false)_ makes the loader to throw errors instead of\n  warnings.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ - specifies a schema to use.\n  - `FAILSAFE_SCHEMA` - only strings, arrays and plain objects:\n    http://www.yaml.org/spec/1.2/spec.html#id2802346\n  - `JSON_SCHEMA` - all JSON-supported types:\n    http://www.yaml.org/spec/1.2/spec.html#id2803231\n  - `CORE_SCHEMA` - same as `JSON_SCHEMA`:\n    http://www.yaml.org/spec/1.2/spec.html#id2804923\n  - `DEFAULT_SAFE_SCHEMA` - all supported YAML types, without unsafe ones\n    (`!!js/undefined`, `!!js/regexp` and `!!js/function`):\n    http://yaml.org/type/\n  - `DEFAULT_FULL_SCHEMA` - all supported YAML types.\n\nNOTE: This function **does not** understand multi-document sources, it throws\nexception on those.\n\nNOTE: JS-YAML **does not** support schema-specific tag resolution restrictions.\nSo, JSON schema is not as strict as defined in the YAML specification.\nIt allows numbers in any notaion, use `Null` and `NULL` as `null`, etc.\nCore schema also has no such restrictions. It allows binary notation for integers.\n\n\n### load (string [ , options ])\n\n**Use with care with untrusted sources**. The same as `safeLoad()` but uses\n`DEFAULT_FULL_SCHEMA` by default - adds some JavaScript-specific types:\n`!!js/function`, `!!js/regexp` and `!!js/undefined`. For untrusted sources you\nmust additionally validate object structure, to avoid injections:\n\n``` javascript\nvar untrusted_code = '\"toString\": !<tag:yaml.org,2002:js/function> \"function (){very_evil_thing();}\"';\n\n// I'm just converting that string, what could possibly go wrong?\nrequire('js-yaml').load(untrusted_code) + ''\n```\n\n\n### safeLoadAll (string, iterator [ , options ])\n\nSame as `safeLoad()`, but understands multi-document sources and apply\n`iterator` to each document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\nyaml.safeLoadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### loadAll (string, iterator [ , options ])\n\nSame as `safeLoadAll()` but uses `DEFAULT_FULL_SCHEMA` by default.\n\n\n### safeDump (object [ , options ])\n\nSerializes `object` as YAML document. Uses `DEFAULT_SAFE_SCHEMA`, so it will\nthrow exception if you try to dump regexps or functions. However, you can\ndisable exceptions by `skipInvalid` option.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `skipInvalid` _(default: false)_ - do not throw on invalid types (like function\n  in the safe schema) and skip pairs and single values with such types.\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ specifies a schema to use.\n\nstyles:\n\n``` none\n!!null\n  \"canonical\"   => \"~\"\n\n!!int\n  \"binary\"      => \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       => \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" => \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!null, !!bool, !!float\n  \"lowercase\"   => \"null\", \"true\", \"false\", \".nan\", '.inf'\n  \"uppercase\"   => \"NULL\", \"TRUE\", \"FALSE\", \".NAN\", '.INF'\n  \"camelcase\"   => \"Null\", \"True\", \"False\", \".NaN\", '.Inf'\n```\n\nBy default, !!int uses `decimal`, and !!null, !!bool, !!float use `lowercase`.\n\n\n\n### dump (object [ , options ])\n\nSame as `safeDump()` but without limits (uses `DEFAULT_FULL_SCHEMA` by default).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\nCaveats\n-------\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies (by calling .toString method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n\nBreaking changes in 2.x.x -> 3.0.x\n----------------------------------\n\nIf your have not used __custom__ tags or loader classes and not loaded yaml\nfiles fia require - no changes needed. Just upgrade library.\n\nIn other case, you should:\n\n1. Replace all occurences of `require('xxxx.yml')` by `fs.readFileSync()` +\n  `yaml.safeLoad()`.\n2. rewrite your custom tags constructors and custom loader\n  classes, to conform new API. See\n  [examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n  [wiki](https://github.com/nodeca/js-yaml/wiki) for details.\n\n\nLicense\n-------\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n","readmeFilename":"README.md","_id":"js-yaml@3.0.0","dist":{"shasum":"46a8ac74fcc6e35f2d42e08c36e2961adc76bf2d","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-3.0.0.tgz"},"_from":"https://github.com/nodeca/js-yaml/tarball/3.0.0","_resolved":"https://github.com/nodeca/js-yaml/tarball/3.0.0","_npmVersion":"1.3.17","_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}},"3.0.1":{"name":"js-yaml","version":"3.0.1","description":"YAML 1.2 parser and serializer","keywords":["yaml","parser","serializer","pyyaml"],"homepage":"https://github.com/nodeca/js-yaml","author":{"name":"Dervus Grim","email":"dervus.grim@gmail.com"},"contributors":[{"name":"Aleksey V Zapparov","email":"ixti@member.fsf.org","url":"http://www.ixti.net/"},{"name":"Martin Grenfell","email":"martin.grenfell@gmail.com","url":"http://got-ravings.blogspot.com"}],"bugs":{"url":"https://github.com/nodeca/js-yaml/issues"},"license":{"type":"MIT","url":"https://github.com/nodeca/js-yaml/blob/master/LICENSE"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"main":"./index.js","bin":{"js-yaml":"bin/js-yaml.js"},"scripts":{"test":"make test"},"dependencies":{"argparse":"~ 0.1.11","esprima":"~ 1.0.2"},"devDependencies":{"mocha":"*"},"engines":{"node":">= 0.6.0"},"readme":"JS-YAML - YAML 1.2 parser and serializer for JavaScript\n=======================================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install -g js-yaml\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<!-- esprima required only for !!js/function -->\n<script src=\"esprima.js\"></script>\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support was done mostly for online demo. If you find any errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\nNotes:\n\n1. We have no resourses to support browserified version. Don't expect it to be\n   well tested. Don't expect fast fixes if something goes wrong there.\n2. `!!js/function` in browser bundle will not work by default. If you really need\n   it - load `esprima` parser first (via amd or directly).\n3. `!!bin` in browser will return `Array`, because browsers do not support\n   node.js `Buffer` and adding Buffer shims is completely useless on practice.\n\n\nAPI\n---\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\n``` javascript\nyaml = require('js-yaml');\nfs   = require('fs');\n\n// Get document, or throw exception on error\ntry {\n  var doc = yaml.safeLoad(fs.readFileSync('/home/ixti/example.yml', 'utf8'));\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### safeLoad (string [ , options ])\n\n**Recommended loading way.** Parses `string` as single YAML document. Returns a JavaScript\nobject or throws `YAMLException` on error. By default, does not support regexps,\nfunctions and undefined. This method is safe for untrusted data.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `strict` _(default - false)_ makes the loader to throw errors instead of\n  warnings.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ - specifies a schema to use.\n  - `FAILSAFE_SCHEMA` - only strings, arrays and plain objects:\n    http://www.yaml.org/spec/1.2/spec.html#id2802346\n  - `JSON_SCHEMA` - all JSON-supported types:\n    http://www.yaml.org/spec/1.2/spec.html#id2803231\n  - `CORE_SCHEMA` - same as `JSON_SCHEMA`:\n    http://www.yaml.org/spec/1.2/spec.html#id2804923\n  - `DEFAULT_SAFE_SCHEMA` - all supported YAML types, without unsafe ones\n    (`!!js/undefined`, `!!js/regexp` and `!!js/function`):\n    http://yaml.org/type/\n  - `DEFAULT_FULL_SCHEMA` - all supported YAML types.\n\nNOTE: This function **does not** understand multi-document sources, it throws\nexception on those.\n\nNOTE: JS-YAML **does not** support schema-specific tag resolution restrictions.\nSo, JSON schema is not as strict as defined in the YAML specification.\nIt allows numbers in any notaion, use `Null` and `NULL` as `null`, etc.\nCore schema also has no such restrictions. It allows binary notation for integers.\n\n\n### load (string [ , options ])\n\n**Use with care with untrusted sources**. The same as `safeLoad()` but uses\n`DEFAULT_FULL_SCHEMA` by default - adds some JavaScript-specific types:\n`!!js/function`, `!!js/regexp` and `!!js/undefined`. For untrusted sources you\nmust additionally validate object structure, to avoid injections:\n\n``` javascript\nvar untrusted_code = '\"toString\": !<tag:yaml.org,2002:js/function> \"function (){very_evil_thing();}\"';\n\n// I'm just converting that string, what could possibly go wrong?\nrequire('js-yaml').load(untrusted_code) + ''\n```\n\n\n### safeLoadAll (string, iterator [ , options ])\n\nSame as `safeLoad()`, but understands multi-document sources and apply\n`iterator` to each document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\nyaml.safeLoadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### loadAll (string, iterator [ , options ])\n\nSame as `safeLoadAll()` but uses `DEFAULT_FULL_SCHEMA` by default.\n\n\n### safeDump (object [ , options ])\n\nSerializes `object` as YAML document. Uses `DEFAULT_SAFE_SCHEMA`, so it will\nthrow exception if you try to dump regexps or functions. However, you can\ndisable exceptions by `skipInvalid` option.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `skipInvalid` _(default: false)_ - do not throw on invalid types (like function\n  in the safe schema) and skip pairs and single values with such types.\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ specifies a schema to use.\n\nstyles:\n\n``` none\n!!null\n  \"canonical\"   => \"~\"\n\n!!int\n  \"binary\"      => \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       => \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" => \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!null, !!bool, !!float\n  \"lowercase\"   => \"null\", \"true\", \"false\", \".nan\", '.inf'\n  \"uppercase\"   => \"NULL\", \"TRUE\", \"FALSE\", \".NAN\", '.INF'\n  \"camelcase\"   => \"Null\", \"True\", \"False\", \".NaN\", '.Inf'\n```\n\nBy default, !!int uses `decimal`, and !!null, !!bool, !!float use `lowercase`.\n\n\n\n### dump (object [ , options ])\n\nSame as `safeDump()` but without limits (uses `DEFAULT_FULL_SCHEMA` by default).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\nCaveats\n-------\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies (by calling .toString method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n\nBreaking changes in 2.x.x -> 3.0.x\n----------------------------------\n\nIf your have not used __custom__ tags or loader classes and not loaded yaml\nfiles fia require - no changes needed. Just upgrade library.\n\nIn other case, you should:\n\n1. Replace all occurences of `require('xxxx.yml')` by `fs.readFileSync()` +\n  `yaml.safeLoad()`.\n2. rewrite your custom tags constructors and custom loader\n  classes, to conform new API. See\n  [examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n  [wiki](https://github.com/nodeca/js-yaml/wiki) for details.\n\n\nLicense\n-------\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n","readmeFilename":"README.md","_id":"js-yaml@3.0.1","dist":{"shasum":"76405fea5bce30fc8f405d48c6dca7f0a32c6afe","tarball":"http://registry.npmjs.org/js-yaml/-/js-yaml-3.0.1.tgz"},"_from":"https://github.com/nodeca/js-yaml/tarball/3.0.1","_resolved":"https://github.com/nodeca/js-yaml/tarball/3.0.1","_npmVersion":"1.3.14","_npmUser":{"name":"vitaly","email":"vitaly@rcdesign.ru"},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"directories":{}}},"maintainers":[{"name":"vitaly","email":"vitaly@rcdesign.ru"}],"time":{"0.2.0":"2011-11-02T01:56:04.988Z","0.2.1":"2011-11-02T15:44:59.476Z","0.2.2":"2011-11-06T19:36:46.376Z","0.3.0":"2011-11-09T11:50:52.572Z","0.3.1":"2011-11-18T04:40:26.297Z","0.3.2":"2011-12-16T03:11:23.796Z","0.3.3":"2011-12-20T00:33:34.021Z","0.3.4":"2011-12-24T12:11:57.618Z","0.3.5":"2012-01-10T12:03:28.241Z","0.3.6":"2012-02-22T04:58:30.034Z","0.3.7":"2012-02-28T16:06:34.722Z","1.0.0":"2012-07-01T15:02:00.004Z","1.0.1":"2012-07-07T09:42:56.820Z","1.0.2":"2012-08-02T08:44:43.484Z","1.0.3":"2012-11-05T01:57:23.010Z","2.0.0":"2013-02-09T07:34:25.954Z","2.0.1":"2013-02-09T15:41:35.905Z","2.0.2":"2013-02-15T11:22:57.482Z","2.0.3":"2013-02-26T03:14:59.871Z","2.0.4":"2013-04-08T11:45:36.838Z","2.0.5":"2013-04-26T14:40:59.621Z","2.1.0":"2013-06-05T14:44:09.636Z","2.1.1":"2013-10-01T20:08:34.063Z","2.1.2":"2013-10-06T21:35:32.358Z","2.1.3":"2013-10-15T21:30:17.137Z","3.0.0":"2013-12-16T08:35:24.383Z","3.0.1":"2013-12-22T18:44:21.114Z"},"author":{"name":"Dervus Grim","email":"dervus.grim@gmail.com"},"repository":{"type":"git","url":"git://github.com/nodeca/js-yaml.git"},"users":{"pvorb":true,"matthiasg":true,"fgribreau":true,"sbruchmann":true,"adamrenny":true,"brianloveswords":true,"denisix":true},"_attachments":{"js-yaml-3.0.1.tgz":{"content_type":"application/octet-stream","revpos":62,"digest":"md5-6fpFtBQfgQSjDW6gFpAY2A==","length":30671,"stub":true},"js-yaml-3.0.0.tgz":{"content_type":"application/octet-stream","revpos":60,"digest":"md5-eUSagNDEHTyv8n1FPpTPCA==","length":30483,"stub":true},"js-yaml-2.1.3.tgz":{"content_type":"application/octet-stream","revpos":56,"digest":"md5-E7rk1ThOm4d29y0ta/cxUA==","length":29615,"stub":true},"js-yaml-2.1.2.tgz":{"content_type":"application/octet-stream","revpos":54,"digest":"md5-I3CDTMpVDQXA1C18HaFrUQ==","length":29514,"stub":true},"js-yaml-2.1.1.tgz":{"content_type":"application/octet-stream","revpos":52,"digest":"md5-Rdq/U0AkcHF9ZGP0VNC+oA==","length":29296,"stub":true},"js-yaml-2.1.0.tgz":{"content_type":"application/octet-stream","revpos":49,"digest":"md5-p1u44hCyrFRZXzj+KxIy/g==","length":29369,"stub":true},"js-yaml-2.0.5.tgz":{"content_type":"application/octet-stream","revpos":47,"digest":"md5-5gLEqkMYbkLd7IM2CQi3TQ==","length":27642,"stub":true},"js-yaml-2.0.4.tgz":{"content_type":"application/octet-stream","revpos":45,"digest":"md5-IKSTVHa1c7rpLay3yi1z8A==","length":27337,"stub":true},"js-yaml-2.0.3.tgz":{"content_type":"application/octet-stream","revpos":43,"digest":"md5-KYW7MP/JctYHvoozlpOX/Q==","length":52066,"stub":true},"js-yaml-2.0.2.tgz":{"content_type":"application/octet-stream","revpos":41,"digest":"md5-lrcoizGLTKay6vwGM8YPGA==","length":51835,"stub":true},"js-yaml-2.0.1.tgz":{"content_type":"application/octet-stream","revpos":39,"digest":"md5-e4piD9PVO/XdDrYgMAQA+Q==","length":51778,"stub":true},"js-yaml-2.0.0.tgz":{"content_type":"application/octet-stream","revpos":37,"digest":"md5-t3IkcvbRAf6Uc2UndL6APA==","length":51845,"stub":true},"js-yaml-1.0.3.tgz":{"content_type":"application/octet-stream","revpos":35,"digest":"md5-TEdDj/WJqSQh7BMYmGjl1A==","length":97332,"stub":true},"js-yaml-1.0.2.tgz":{"content_type":"application/octet-stream","revpos":31,"digest":"md5-ajRJcrZxx/CuWPFI5AJstQ==","length":97376,"stub":true},"js-yaml-1.0.1.tgz":{"content_type":"application/octet-stream","revpos":29,"digest":"md5-zlw4jKYNYnB4h5LPJS3AnQ==","length":97184,"stub":true},"js-yaml-1.0.0.tgz":{"content_type":"application/octet-stream","revpos":27,"digest":"md5-N6U6ITvlBshiZ8/0axlvDA==","length":97148,"stub":true},"js-yaml-0.3.7.tgz":{"content_type":"application/octet-stream","revpos":25,"digest":"md5-14CeYeR9TkQeWohue9jsxg==","length":95136,"stub":true},"js-yaml-0.3.6.tgz":{"content_type":"application/octet-stream","revpos":23,"digest":"md5-1CKjJvTFPfPb/Lwk+e8iVQ==","length":94921,"stub":true},"js-yaml-0.3.5.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-SIfQCbpWBAO2xIi9yr0brQ==","length":243529,"stub":true},"js-yaml-0.3.4.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-wgM3Ve6QwZLeq+VF+K61Ng==","length":243585,"stub":true},"js-yaml-0.3.3.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-2PIc36EQbqMofEfzeTMxBA==","length":235690,"stub":true},"js-yaml-0.3.2.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-IVH5wwwtb2F27G7bfh9A+g==","length":235254,"stub":true},"js-yaml-0.3.1.tgz":{"content_type":"application/octet-stream","revpos":11,"digest":"md5-Bf/XoOS1+Lr3k7I7qLUAjQ==","length":232379,"stub":true},"js-yaml-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-XU1GZWIEr1hV+PRY98znYQ==","length":224314,"stub":true},"js-yaml-0.2.2.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-HZTPZFplqqu+gXXwirH27A==","length":120979,"stub":true},"js-yaml-0.2.1.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-kqJ/v87ynj+CLNsWqBZ15g==","length":29314,"stub":true},"js-yaml-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-p8k9XXJ7vWYS8hrd+uI81A==","length":28522,"stub":true}},"_etag":"\"2DJAMRPIE0HPEOPKW6YSNA2B2\""}