{"_id":"fstream","_rev":"64-8855805421a96e9db9d2ff889080ee42","name":"fstream","description":"Advanced file system stream things","dist-tags":{"latest":"0.1.25"},"versions":{"0.0.0":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.0.0","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":"0.5 || 0.6"},"dependencies":{"rimraf":"~1.0.8","mkdirp":"0.0.7","graceful-fs":"~1.0.1","inherits":"~1.0.0"},"devDependencies":{},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.0.0","_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.5.11-pre","_defaultsLoaded":true,"dist":{"shasum":"dfaf06bfe592b1ff5deee32734e14eb185353f12","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.0.0.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.0.1":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.0.1","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":"0.5 || 0.6"},"dependencies":{"rimraf":"~1.0.8","mkdirp":"~0.1.0","graceful-fs":"~1.0.1","inherits":"~1.0.0"},"devDependencies":{},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.0.1","_engineSupported":true,"_npmVersion":"1.0.104","_nodeVersion":"v0.6.1-pre","_defaultsLoaded":true,"dist":{"shasum":"c7c43f70580fe9e1fa61e255039b958da2c94c6b","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.0.1.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.0":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.0","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":"0.5 || 0.6"},"dependencies":{"rimraf":"~1.0.8","mkdirp":"~0.1.0","graceful-fs":"~1.0.1","inherits":"~1.0.0"},"devDependencies":{},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.0","_engineSupported":true,"_npmVersion":"1.1.0-alpha","_nodeVersion":"v0.6.2-pre","_defaultsLoaded":true,"dist":{"shasum":"9f7ba8b240ea82317bf60ea8a320b65546f963cd","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.0.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.1":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.1","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":"0.5 || 0.6 || 0.7"},"dependencies":{"rimraf":"~1.0.8","mkdirp":"~0.1.0","graceful-fs":"1.1","inherits":"~1.0.0"},"devDependencies":{},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.1","_engineSupported":true,"_npmVersion":"1.1.0-alpha-2","_nodeVersion":"v0.6.2-pre","_defaultsLoaded":true,"dist":{"shasum":"6e6b66de1320684198570fd7b975c3fcebd9fa02","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.1.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.2":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.2","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":"0.5 || 0.6 || 0.7"},"dependencies":{"rimraf":"~1.0.8","mkdirp":"~0.1.0","graceful-fs":"~1.1.1","inherits":"~1.0.0"},"devDependencies":{"tap":"0.1"},"scripts":{"test":"cd examples; tap *.js"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.2","_engineSupported":true,"_npmVersion":"1.1.0-alpha-2","_nodeVersion":"v0.6.4-pre","_defaultsLoaded":true,"dist":{"shasum":"ecd8102214b8f24029f912675efe0e133cf2ca6e","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.2.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.3":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.3","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":"0.5 || 0.6 || 0.7"},"dependencies":{"rimraf":"~1.0.8","mkdirp":"~0.1.0","graceful-fs":"~1.1.1","inherits":"~1.0.0"},"devDependencies":{"tap":"0.1"},"scripts":{"test":"tap examples/*.js"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.3","_engineSupported":true,"_npmVersion":"1.1.0-alpha-2","_nodeVersion":"v0.6.4-pre","_defaultsLoaded":true,"dist":{"shasum":"a99cde7c968a693f6d85085943b4f8db5a55e570","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.3.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.5":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.5","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":"0.5 || 0.6 || 0.7"},"dependencies":{"rimraf":"~1.0.8","mkdirp":"~0.1.0","graceful-fs":"~1.1.1","inherits":"~1.0.0"},"devDependencies":{"tap":"0.1"},"scripts":{"test":"tap examples/*.js"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.5","_engineSupported":true,"_npmVersion":"1.1.0-alpha-2","_nodeVersion":"v0.6.4-pre","_defaultsLoaded":true,"dist":{"shasum":"38f446bd5c34924ba578d91540f4cc4ddead9db0","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.5.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.6":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.6","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":"0.5 || 0.6 || 0.7"},"dependencies":{"rimraf":"~1.0.8","mkdirp":"~0.1.0","graceful-fs":"~1.1.2","inherits":"~1.0.0"},"devDependencies":{"tap":"0.1"},"scripts":{"test":"tap examples/*.js"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.6","_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.4","_defaultsLoaded":true,"dist":{"shasum":"77f0a8a1ab7e467894eb8ff1d27f7f459a865d80","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.6.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.7":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.7","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":"0.5 || 0.6 || 0.7"},"dependencies":{"rimraf":"~1.0.8","mkdirp":"~0.1.0","graceful-fs":"~1.1.2","inherits":"~1.0.0"},"devDependencies":{"tap":"0.1"},"scripts":{"test":"tap examples/*.js"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.7","_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.6-pre","_defaultsLoaded":true,"dist":{"shasum":"1f4d58b614773aa17ff5cf294bbf9ecedea2352b","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.7.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.8":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.8","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":"0.5 || 0.6 || 0.7"},"dependencies":{"rimraf":"~1.0.8","mkdirp":"~0.1.0","graceful-fs":"~1.1.2","inherits":"~1.0.0"},"devDependencies":{"tap":"0.1"},"scripts":{"test":"tap examples/*.js"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.8","_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.6-pre","_defaultsLoaded":true,"dist":{"shasum":"57bae43e6e1c8a1d7171226d266563580b035e80","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.8.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.9":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.9","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":"0.5 || 0.6 || 0.7"},"dependencies":{"rimraf":"~1.0.8","mkdirp":"~0.1.0","graceful-fs":"~1.1.2","inherits":"~1.0.0"},"devDependencies":{"tap":"0.1"},"scripts":{"test":"tap examples/*.js"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.9","_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.6-pre","_defaultsLoaded":true,"dist":{"shasum":"7eb48a015c1f17e59beac8599c006dda15f645ce","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.9.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.10":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.10","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":"0.5 || 0.6 || 0.7"},"dependencies":{"rimraf":"~1.0.8","mkdirp":"~0.1.0","graceful-fs":"~1.1.2","inherits":"~1.0.0"},"devDependencies":{"tap":"0.1"},"scripts":{"test":"tap examples/*.js"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.10","_engineSupported":true,"_npmVersion":"1.1.0-beta-5","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"2616d64be64ed1b10f83c550dc4458c56877f935","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.10.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.11":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.11","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":"0.5 || 0.6 || 0.7"},"dependencies":{"rimraf":"~1.0.8","mkdirp":"~0.1.0","graceful-fs":"~1.1.2","inherits":"~1.0.0"},"devDependencies":{"tap":"0.1"},"scripts":{"test":"tap examples/*.js"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.11","_engineSupported":true,"_npmVersion":"1.1.0-beta-8","_nodeVersion":"v0.6.7-pre","_defaultsLoaded":true,"dist":{"shasum":"55c0c04dfbcc7f2cf388542da361ba1282944e0c","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.11.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.12":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.12","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":"0.5 || 0.6 || 0.7"},"dependencies":{"rimraf":"2","mkdirp":"0.3","graceful-fs":"~1.1.2","inherits":"~1.0.0"},"devDependencies":{"tap":"0.1"},"scripts":{"test":"tap examples/*.js"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.12","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.9-pre","_defaultsLoaded":true,"dist":{"shasum":"181de8f871c326615db1f3db864685f1d29b020b","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.12.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.13":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.13","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":"0.5 || 0.6 || 0.7"},"dependencies":{"rimraf":"2","mkdirp":"0.3","graceful-fs":"~1.1.2","inherits":"~1.0.0"},"devDependencies":{"tap":"0.1"},"scripts":{"test":"tap examples/*.js"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.13","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.2","_nodeVersion":"v0.7.6-pre","_defaultsLoaded":true,"dist":{"shasum":"16a7c3d902550a78ce7e7d6fafb7a1267de64a44","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.13.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.14":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.14","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":">=0.6"},"dependencies":{"rimraf":"2","mkdirp":"0.3","graceful-fs":"~1.1.2","inherits":"~1.0.0"},"devDependencies":{"tap":""},"scripts":{"test":"tap examples/*.js"},"license":"BSD","_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.14","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.10","_nodeVersion":"v0.7.7-pre","_defaultsLoaded":true,"dist":{"shasum":"fe9b924b6ffcfeb173df5a9198d146a61df7ba5b","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.14.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.15":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.15","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":">=0.6"},"dependencies":{"rimraf":"2","mkdirp":"0.3","graceful-fs":"~1.1.2","inherits":"~1.0.0"},"devDependencies":{"tap":""},"scripts":{"test":"tap examples/*.js"},"license":"BSD","_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.15","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.7.7-pre","_defaultsLoaded":true,"dist":{"shasum":"375eede09d82537b7d9933889ca2fbb1060e7bf6","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.15.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.16":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.16","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":">=0.6"},"dependencies":{"rimraf":"2","mkdirp":"0.3","graceful-fs":"~1.1.2","inherits":"~1.0.0"},"devDependencies":{"tap":""},"scripts":{"test":"tap examples/*.js"},"license":"BSD","_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.16","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.7.7-pre","_defaultsLoaded":true,"dist":{"shasum":"97ee9ec8b24cbe1f7d8d59eb5b43a01b33b1fe15","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.16.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.17":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.17","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":">=0.6"},"dependencies":{"rimraf":"2","mkdirp":"0.3","graceful-fs":"~1.1.2","inherits":"~1.0.0"},"devDependencies":{"tap":""},"scripts":{"test":"tap examples/*.js"},"license":"BSD","_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.17","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.7.7-pre","_defaultsLoaded":true,"dist":{"shasum":"7d7ce7fd541fc20a458832cce2f0999aed32b30c","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.17.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.18":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.18","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":">=0.6"},"dependencies":{"rimraf":"2","mkdirp":"0.3","graceful-fs":"~1.1.2","inherits":"~1.0.0"},"devDependencies":{"tap":""},"scripts":{"test":"tap examples/*.js"},"license":"BSD","_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"fstream@0.1.18","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.13","_nodeVersion":"v0.7.7-pre","_defaultsLoaded":true,"dist":{"shasum":"741660affc0b175e57050498d060e53764a3aa34","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.18.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.19":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.19","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":">=0.6"},"dependencies":{"rimraf":"2","mkdirp":"0.3","graceful-fs":"~1.1.2","inherits":"~1.0.0"},"devDependencies":{"tap":""},"scripts":{"test":"tap examples/*.js"},"license":"BSD","readme":"Like FS streams, but with stat on them, and supporting directories and\nsymbolic links, as well as normal files.  Also, you can use this to set\nthe stats on a file, even if you don't change its contents, or to create\na symlink, etc.\n\nSo, for example, you can \"write\" a directory, and it'll call `mkdir`.  You\ncan specify a uid and gid, and it'll call `chown`.  You can specify a\n`mtime` and `atime`, and it'll call `utimes`.  You can call it a symlink\nand provide a `linkpath` and it'll call `symlink`.\n\nNote that it won't automatically resolve symbolic links.  So, if you\ncall `fstream.Reader('/some/symlink')` then you'll get an object\nthat stats and then ends immediately (since it has no data).  To follow\nsymbolic links, do this: `fstream.Reader({path:'/some/symlink', follow:\ntrue })`.\n\nThere are various checks to make sure that the bytes emitted are the\nsame as the intended size, if the size is set.\n\n## Examples\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nThis will create the directories if they're missing, and then write\n`hello\\n` into the file, chmod it to 0755, and assert that 6 bytes have\nbeen written when it's done.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          , flags: \"a\"\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nYou can pass flags in, if you want to append to a file.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/symlink\"\n          , linkpath: \"./file\"\n          , SymbolicLink: true\n          , mode: \"0755\" // octal strings supported\n          })\n  .end()\n```\n\nIf isSymbolicLink is a function, it'll be called, and if it returns\ntrue, then it'll treat it as a symlink.  If it's not a function, then\nany truish value will make a symlink, or you can set `type:\n'SymbolicLink'`, which does the same thing.\n\nNote that the linkpath is relative to the symbolic link location, not\nthe parent dir or cwd.\n\n```javascript\nfstream\n  .Reader(\"path/to/dir\")\n  .pipe(fstream.Writer(\"path/to/other/dir\"))\n```\n\nThis will do like `cp -Rp path/to/dir path/to/other/dir`.  If the other\ndir exists and isn't a directory, then it'll emit an error.  It'll also\nset the uid, gid, mode, etc. to be identical.  In this way, it's more\nlike `rsync -a` than simply a copy.\n","_id":"fstream@0.1.19","dist":{"shasum":"0ff93e775ff9a6b847666e0241604c13093469c4","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.19.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.20":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.20","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":">=0.6"},"dependencies":{"rimraf":"2","mkdirp":"0.3","graceful-fs":"~1.1.2","inherits":"~1.0.0"},"devDependencies":{"tap":""},"scripts":{"test":"tap examples/*.js"},"license":"BSD","readme":"Like FS streams, but with stat on them, and supporting directories and\nsymbolic links, as well as normal files.  Also, you can use this to set\nthe stats on a file, even if you don't change its contents, or to create\na symlink, etc.\n\nSo, for example, you can \"write\" a directory, and it'll call `mkdir`.  You\ncan specify a uid and gid, and it'll call `chown`.  You can specify a\n`mtime` and `atime`, and it'll call `utimes`.  You can call it a symlink\nand provide a `linkpath` and it'll call `symlink`.\n\nNote that it won't automatically resolve symbolic links.  So, if you\ncall `fstream.Reader('/some/symlink')` then you'll get an object\nthat stats and then ends immediately (since it has no data).  To follow\nsymbolic links, do this: `fstream.Reader({path:'/some/symlink', follow:\ntrue })`.\n\nThere are various checks to make sure that the bytes emitted are the\nsame as the intended size, if the size is set.\n\n## Examples\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nThis will create the directories if they're missing, and then write\n`hello\\n` into the file, chmod it to 0755, and assert that 6 bytes have\nbeen written when it's done.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          , flags: \"a\"\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nYou can pass flags in, if you want to append to a file.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/symlink\"\n          , linkpath: \"./file\"\n          , SymbolicLink: true\n          , mode: \"0755\" // octal strings supported\n          })\n  .end()\n```\n\nIf isSymbolicLink is a function, it'll be called, and if it returns\ntrue, then it'll treat it as a symlink.  If it's not a function, then\nany truish value will make a symlink, or you can set `type:\n'SymbolicLink'`, which does the same thing.\n\nNote that the linkpath is relative to the symbolic link location, not\nthe parent dir or cwd.\n\n```javascript\nfstream\n  .Reader(\"path/to/dir\")\n  .pipe(fstream.Writer(\"path/to/other/dir\"))\n```\n\nThis will do like `cp -Rp path/to/dir path/to/other/dir`.  If the other\ndir exists and isn't a directory, then it'll emit an error.  It'll also\nset the uid, gid, mode, etc. to be identical.  In this way, it's more\nlike `rsync -a` than simply a copy.\n","readmeFilename":"README.md","_id":"fstream@0.1.20","dist":{"shasum":"a167d960f761715a6185ec31ce81cfad7e56f33b","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.20.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.21":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.21","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":">=0.6"},"dependencies":{"rimraf":"2","mkdirp":"0.3","graceful-fs":"~1.1.2","inherits":"~1.0.0"},"devDependencies":{"tap":""},"scripts":{"test":"tap examples/*.js"},"license":"BSD","readme":"Like FS streams, but with stat on them, and supporting directories and\nsymbolic links, as well as normal files.  Also, you can use this to set\nthe stats on a file, even if you don't change its contents, or to create\na symlink, etc.\n\nSo, for example, you can \"write\" a directory, and it'll call `mkdir`.  You\ncan specify a uid and gid, and it'll call `chown`.  You can specify a\n`mtime` and `atime`, and it'll call `utimes`.  You can call it a symlink\nand provide a `linkpath` and it'll call `symlink`.\n\nNote that it won't automatically resolve symbolic links.  So, if you\ncall `fstream.Reader('/some/symlink')` then you'll get an object\nthat stats and then ends immediately (since it has no data).  To follow\nsymbolic links, do this: `fstream.Reader({path:'/some/symlink', follow:\ntrue })`.\n\nThere are various checks to make sure that the bytes emitted are the\nsame as the intended size, if the size is set.\n\n## Examples\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nThis will create the directories if they're missing, and then write\n`hello\\n` into the file, chmod it to 0755, and assert that 6 bytes have\nbeen written when it's done.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          , flags: \"a\"\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nYou can pass flags in, if you want to append to a file.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/symlink\"\n          , linkpath: \"./file\"\n          , SymbolicLink: true\n          , mode: \"0755\" // octal strings supported\n          })\n  .end()\n```\n\nIf isSymbolicLink is a function, it'll be called, and if it returns\ntrue, then it'll treat it as a symlink.  If it's not a function, then\nany truish value will make a symlink, or you can set `type:\n'SymbolicLink'`, which does the same thing.\n\nNote that the linkpath is relative to the symbolic link location, not\nthe parent dir or cwd.\n\n```javascript\nfstream\n  .Reader(\"path/to/dir\")\n  .pipe(fstream.Writer(\"path/to/other/dir\"))\n```\n\nThis will do like `cp -Rp path/to/dir path/to/other/dir`.  If the other\ndir exists and isn't a directory, then it'll emit an error.  It'll also\nset the uid, gid, mode, etc. to be identical.  In this way, it's more\nlike `rsync -a` than simply a copy.\n","readmeFilename":"README.md","_id":"fstream@0.1.21","dist":{"shasum":"7968bd1891653f19780f560fba9d2176b1950388","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.21.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.22":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.22","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":">=0.6"},"dependencies":{"rimraf":"2","mkdirp":"0.3","graceful-fs":"~1.2.0","inherits":"~1.0.0"},"devDependencies":{"tap":""},"scripts":{"test":"tap examples/*.js"},"license":"BSD","readme":"Like FS streams, but with stat on them, and supporting directories and\nsymbolic links, as well as normal files.  Also, you can use this to set\nthe stats on a file, even if you don't change its contents, or to create\na symlink, etc.\n\nSo, for example, you can \"write\" a directory, and it'll call `mkdir`.  You\ncan specify a uid and gid, and it'll call `chown`.  You can specify a\n`mtime` and `atime`, and it'll call `utimes`.  You can call it a symlink\nand provide a `linkpath` and it'll call `symlink`.\n\nNote that it won't automatically resolve symbolic links.  So, if you\ncall `fstream.Reader('/some/symlink')` then you'll get an object\nthat stats and then ends immediately (since it has no data).  To follow\nsymbolic links, do this: `fstream.Reader({path:'/some/symlink', follow:\ntrue })`.\n\nThere are various checks to make sure that the bytes emitted are the\nsame as the intended size, if the size is set.\n\n## Examples\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nThis will create the directories if they're missing, and then write\n`hello\\n` into the file, chmod it to 0755, and assert that 6 bytes have\nbeen written when it's done.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          , flags: \"a\"\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nYou can pass flags in, if you want to append to a file.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/symlink\"\n          , linkpath: \"./file\"\n          , SymbolicLink: true\n          , mode: \"0755\" // octal strings supported\n          })\n  .end()\n```\n\nIf isSymbolicLink is a function, it'll be called, and if it returns\ntrue, then it'll treat it as a symlink.  If it's not a function, then\nany truish value will make a symlink, or you can set `type:\n'SymbolicLink'`, which does the same thing.\n\nNote that the linkpath is relative to the symbolic link location, not\nthe parent dir or cwd.\n\n```javascript\nfstream\n  .Reader(\"path/to/dir\")\n  .pipe(fstream.Writer(\"path/to/other/dir\"))\n```\n\nThis will do like `cp -Rp path/to/dir path/to/other/dir`.  If the other\ndir exists and isn't a directory, then it'll emit an error.  It'll also\nset the uid, gid, mode, etc. to be identical.  In this way, it's more\nlike `rsync -a` than simply a copy.\n","readmeFilename":"README.md","_id":"fstream@0.1.22","dist":{"shasum":"5bbe66da356b3402f1e30863fcaf64814993cca6","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.22.tgz"},"_from":".","_npmVersion":"1.2.4","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.23":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.23","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":">=0.6"},"dependencies":{"rimraf":"2","mkdirp":"0.3","graceful-fs":"~2.0.0","inherits":"~1.0.0"},"devDependencies":{"tap":""},"scripts":{"test":"tap examples/*.js"},"license":"BSD","readme":"Like FS streams, but with stat on them, and supporting directories and\nsymbolic links, as well as normal files.  Also, you can use this to set\nthe stats on a file, even if you don't change its contents, or to create\na symlink, etc.\n\nSo, for example, you can \"write\" a directory, and it'll call `mkdir`.  You\ncan specify a uid and gid, and it'll call `chown`.  You can specify a\n`mtime` and `atime`, and it'll call `utimes`.  You can call it a symlink\nand provide a `linkpath` and it'll call `symlink`.\n\nNote that it won't automatically resolve symbolic links.  So, if you\ncall `fstream.Reader('/some/symlink')` then you'll get an object\nthat stats and then ends immediately (since it has no data).  To follow\nsymbolic links, do this: `fstream.Reader({path:'/some/symlink', follow:\ntrue })`.\n\nThere are various checks to make sure that the bytes emitted are the\nsame as the intended size, if the size is set.\n\n## Examples\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nThis will create the directories if they're missing, and then write\n`hello\\n` into the file, chmod it to 0755, and assert that 6 bytes have\nbeen written when it's done.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          , flags: \"a\"\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nYou can pass flags in, if you want to append to a file.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/symlink\"\n          , linkpath: \"./file\"\n          , SymbolicLink: true\n          , mode: \"0755\" // octal strings supported\n          })\n  .end()\n```\n\nIf isSymbolicLink is a function, it'll be called, and if it returns\ntrue, then it'll treat it as a symlink.  If it's not a function, then\nany truish value will make a symlink, or you can set `type:\n'SymbolicLink'`, which does the same thing.\n\nNote that the linkpath is relative to the symbolic link location, not\nthe parent dir or cwd.\n\n```javascript\nfstream\n  .Reader(\"path/to/dir\")\n  .pipe(fstream.Writer(\"path/to/other/dir\"))\n```\n\nThis will do like `cp -Rp path/to/dir path/to/other/dir`.  If the other\ndir exists and isn't a directory, then it'll emit an error.  It'll also\nset the uid, gid, mode, etc. to be identical.  In this way, it's more\nlike `rsync -a` than simply a copy.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/isaacs/fstream/issues"},"_id":"fstream@0.1.23","dist":{"shasum":"e1ac8d0945a7f27789e71f00a6d86575d14fc4ec","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.23.tgz"},"_from":".","_npmVersion":"1.3.2","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.24":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.24","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":">=0.6"},"dependencies":{"rimraf":"2","mkdirp":"0.3","graceful-fs":"~2.0.0","inherits":"~2.0.0"},"devDependencies":{"tap":""},"scripts":{"test":"tap examples/*.js"},"license":"BSD","readme":"Like FS streams, but with stat on them, and supporting directories and\nsymbolic links, as well as normal files.  Also, you can use this to set\nthe stats on a file, even if you don't change its contents, or to create\na symlink, etc.\n\nSo, for example, you can \"write\" a directory, and it'll call `mkdir`.  You\ncan specify a uid and gid, and it'll call `chown`.  You can specify a\n`mtime` and `atime`, and it'll call `utimes`.  You can call it a symlink\nand provide a `linkpath` and it'll call `symlink`.\n\nNote that it won't automatically resolve symbolic links.  So, if you\ncall `fstream.Reader('/some/symlink')` then you'll get an object\nthat stats and then ends immediately (since it has no data).  To follow\nsymbolic links, do this: `fstream.Reader({path:'/some/symlink', follow:\ntrue })`.\n\nThere are various checks to make sure that the bytes emitted are the\nsame as the intended size, if the size is set.\n\n## Examples\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nThis will create the directories if they're missing, and then write\n`hello\\n` into the file, chmod it to 0755, and assert that 6 bytes have\nbeen written when it's done.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          , flags: \"a\"\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nYou can pass flags in, if you want to append to a file.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/symlink\"\n          , linkpath: \"./file\"\n          , SymbolicLink: true\n          , mode: \"0755\" // octal strings supported\n          })\n  .end()\n```\n\nIf isSymbolicLink is a function, it'll be called, and if it returns\ntrue, then it'll treat it as a symlink.  If it's not a function, then\nany truish value will make a symlink, or you can set `type:\n'SymbolicLink'`, which does the same thing.\n\nNote that the linkpath is relative to the symbolic link location, not\nthe parent dir or cwd.\n\n```javascript\nfstream\n  .Reader(\"path/to/dir\")\n  .pipe(fstream.Writer(\"path/to/other/dir\"))\n```\n\nThis will do like `cp -Rp path/to/dir path/to/other/dir`.  If the other\ndir exists and isn't a directory, then it'll emit an error.  It'll also\nset the uid, gid, mode, etc. to be identical.  In this way, it's more\nlike `rsync -a` than simply a copy.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/isaacs/fstream/issues"},"_id":"fstream@0.1.24","dist":{"shasum":"267fe9d034f46bc99f824789d38b987ad01be884","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.24.tgz"},"_from":".","_npmVersion":"1.3.4","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"0.1.25":{"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"name":"fstream","description":"Advanced file system stream things","version":"0.1.25","repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"main":"fstream.js","engines":{"node":">=0.6"},"dependencies":{"rimraf":"2","mkdirp":"0.3","graceful-fs":"~2.0.0","inherits":"~2.0.0"},"devDependencies":{"tap":""},"scripts":{"test":"tap examples/*.js"},"license":"BSD","readme":"Like FS streams, but with stat on them, and supporting directories and\nsymbolic links, as well as normal files.  Also, you can use this to set\nthe stats on a file, even if you don't change its contents, or to create\na symlink, etc.\n\nSo, for example, you can \"write\" a directory, and it'll call `mkdir`.  You\ncan specify a uid and gid, and it'll call `chown`.  You can specify a\n`mtime` and `atime`, and it'll call `utimes`.  You can call it a symlink\nand provide a `linkpath` and it'll call `symlink`.\n\nNote that it won't automatically resolve symbolic links.  So, if you\ncall `fstream.Reader('/some/symlink')` then you'll get an object\nthat stats and then ends immediately (since it has no data).  To follow\nsymbolic links, do this: `fstream.Reader({path:'/some/symlink', follow:\ntrue })`.\n\nThere are various checks to make sure that the bytes emitted are the\nsame as the intended size, if the size is set.\n\n## Examples\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nThis will create the directories if they're missing, and then write\n`hello\\n` into the file, chmod it to 0755, and assert that 6 bytes have\nbeen written when it's done.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          , flags: \"a\"\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nYou can pass flags in, if you want to append to a file.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/symlink\"\n          , linkpath: \"./file\"\n          , SymbolicLink: true\n          , mode: \"0755\" // octal strings supported\n          })\n  .end()\n```\n\nIf isSymbolicLink is a function, it'll be called, and if it returns\ntrue, then it'll treat it as a symlink.  If it's not a function, then\nany truish value will make a symlink, or you can set `type:\n'SymbolicLink'`, which does the same thing.\n\nNote that the linkpath is relative to the symbolic link location, not\nthe parent dir or cwd.\n\n```javascript\nfstream\n  .Reader(\"path/to/dir\")\n  .pipe(fstream.Writer(\"path/to/other/dir\"))\n```\n\nThis will do like `cp -Rp path/to/dir path/to/other/dir`.  If the other\ndir exists and isn't a directory, then it'll emit an error.  It'll also\nset the uid, gid, mode, etc. to be identical.  In this way, it's more\nlike `rsync -a` than simply a copy.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/isaacs/fstream/issues"},"homepage":"https://github.com/isaacs/fstream","_id":"fstream@0.1.25","dist":{"shasum":"deef2db7c7898357c2b37202212a9e5b36abc732","tarball":"http://registry.npmjs.org/fstream/-/fstream-0.1.25.tgz"},"_from":".","_npmVersion":"1.3.15","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}}},"readme":"Like FS streams, but with stat on them, and supporting directories and\nsymbolic links, as well as normal files.  Also, you can use this to set\nthe stats on a file, even if you don't change its contents, or to create\na symlink, etc.\n\nSo, for example, you can \"write\" a directory, and it'll call `mkdir`.  You\ncan specify a uid and gid, and it'll call `chown`.  You can specify a\n`mtime` and `atime`, and it'll call `utimes`.  You can call it a symlink\nand provide a `linkpath` and it'll call `symlink`.\n\nNote that it won't automatically resolve symbolic links.  So, if you\ncall `fstream.Reader('/some/symlink')` then you'll get an object\nthat stats and then ends immediately (since it has no data).  To follow\nsymbolic links, do this: `fstream.Reader({path:'/some/symlink', follow:\ntrue })`.\n\nThere are various checks to make sure that the bytes emitted are the\nsame as the intended size, if the size is set.\n\n## Examples\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nThis will create the directories if they're missing, and then write\n`hello\\n` into the file, chmod it to 0755, and assert that 6 bytes have\nbeen written when it's done.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          , flags: \"a\"\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nYou can pass flags in, if you want to append to a file.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/symlink\"\n          , linkpath: \"./file\"\n          , SymbolicLink: true\n          , mode: \"0755\" // octal strings supported\n          })\n  .end()\n```\n\nIf isSymbolicLink is a function, it'll be called, and if it returns\ntrue, then it'll treat it as a symlink.  If it's not a function, then\nany truish value will make a symlink, or you can set `type:\n'SymbolicLink'`, which does the same thing.\n\nNote that the linkpath is relative to the symbolic link location, not\nthe parent dir or cwd.\n\n```javascript\nfstream\n  .Reader(\"path/to/dir\")\n  .pipe(fstream.Writer(\"path/to/other/dir\"))\n```\n\nThis will do like `cp -Rp path/to/dir path/to/other/dir`.  If the other\ndir exists and isn't a directory, then it'll emit an error.  It'll also\nset the uid, gid, mode, etc. to be identical.  In this way, it's more\nlike `rsync -a` than simply a copy.\n","maintainers":[{"name":"isaacs","email":"i@izs.me"}],"time":{"0.0.0":"2011-11-01T00:05:59.755Z","0.0.1":"2011-11-08T01:36:30.916Z","0.1.0":"2011-11-20T07:40:38.400Z","0.1.1":"2011-11-23T00:45:27.393Z","0.1.2":"2011-11-29T01:17:18.898Z","0.1.3":"2011-11-29T02:46:40.880Z","0.1.5":"2011-11-30T18:54:06.331Z","0.1.6":"2011-12-03T02:28:11.557Z","0.1.7":"2011-12-08T17:59:56.620Z","0.1.8":"2011-12-09T01:59:39.726Z","0.1.9":"2011-12-09T02:10:35.493Z","0.1.10":"2011-12-16T17:27:57.631Z","0.1.11":"2012-01-05T00:47:21.323Z","0.1.12":"2012-02-04T19:01:05.519Z","0.1.13":"2012-02-28T00:38:39.500Z","0.1.14":"2012-03-20T01:19:27.155Z","0.1.15":"2012-03-26T21:14:32.435Z","0.1.16":"2012-03-27T06:01:18.231Z","0.1.17":"2012-03-27T20:44:44.597Z","0.1.18":"2012-03-29T00:43:10.326Z","0.1.19":"2012-09-08T15:53:38.928Z","0.1.20":"2012-12-19T22:34:28.188Z","0.1.21":"2012-12-28T00:57:05.221Z","0.1.22":"2013-02-06T00:02:34.000Z","0.1.23":"2013-07-11T07:13:33.151Z","0.1.24":"2013-07-24T03:39:22.530Z","0.1.25":"2013-11-20T21:33:09.159Z"},"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"http://blog.izs.me/"},"repository":{"type":"git","url":"git://github.com/isaacs/fstream.git"},"users":{"fgribreau":true,"michaelnisi":true},"_attachments":{"fstream-0.1.25.tgz":{"content_type":"application/octet-stream","revpos":63,"digest":"md5-gYBWAKwn7SC74h4mRQIUdg==","length":17347,"stub":true},"fstream-0.1.24.tgz":{"content_type":"application/octet-stream","revpos":61,"digest":"md5-EHRtJ1pnXgbqojDLQbgKkQ==","length":17305,"stub":true},"fstream-0.1.23.tgz":{"content_type":"application/octet-stream","revpos":59,"digest":"md5-i0tB61OK1mnBhPU8B6N1TQ==","length":17265,"stub":true},"fstream-0.1.22.tgz":{"content_type":"application/octet-stream","revpos":57,"digest":"md5-o88DkIKHtjjXRl2PU7YHxQ==","length":17261,"stub":true},"fstream-0.1.21.tgz":{"content_type":"application/octet-stream","revpos":54,"digest":"md5-pZDRX7hQpsibRSMJbCi3+A==","length":17255,"stub":true},"fstream-0.1.20.tgz":{"content_type":"application/octet-stream","revpos":52,"digest":"md5-JwoO+3EM+H8lYUgST0DhUw==","length":17287,"stub":true},"fstream-0.1.19.tgz":{"content_type":"application/octet-stream","revpos":49,"digest":"md5-UtyCBev2ic/L7CE+6Njjlw==","length":17289,"stub":true},"fstream-0.1.18.tgz":{"content_type":"application/octet-stream","revpos":45,"digest":"md5-a+LnkFmdpqX1o7ybr1fztA==","length":17276,"stub":true},"fstream-0.1.17.tgz":{"content_type":"application/octet-stream","revpos":39,"digest":"md5-RgXIZ0Zbun4wLpQH+xWIWw==","length":16908,"stub":true},"fstream-0.1.16.tgz":{"content_type":"application/octet-stream","revpos":37,"digest":"md5-APfwXhT31pez28LfAlQNHw==","length":16885,"stub":true},"fstream-0.1.15.tgz":{"content_type":"application/octet-stream","revpos":35,"digest":"md5-twckdK+MvOOF3hGJh4y9tA==","length":32661,"stub":true},"fstream-0.1.14.tgz":{"content_type":"application/octet-stream","revpos":33,"digest":"md5-hyC2gAlWNinS8w4+3jQyeQ==","length":16326,"stub":true},"fstream-0.1.13.tgz":{"content_type":"application/octet-stream","revpos":31,"digest":"md5-CeIpGxzlPz15HqeVhqin9A==","length":29779,"stub":true},"fstream-0.1.12.tgz":{"content_type":"application/octet-stream","revpos":29,"digest":"md5-kIrl7m63W7IiGgbeXh1AAA==","length":29778,"stub":true},"fstream-0.1.11.tgz":{"content_type":"application/octet-stream","revpos":27,"digest":"md5-wWFLvHJqGJUDoRO/UfucHQ==","length":29276,"stub":true},"fstream-0.1.10.tgz":{"content_type":"application/octet-stream","revpos":25,"digest":"md5-WBWrioWp0LEvBzw8/HvHdg==","length":29265,"stub":true},"fstream-0.1.9.tgz":{"content_type":"application/octet-stream","revpos":23,"digest":"md5-lBfXgMPV4vO1sv0CHgdLgA==","length":29123,"stub":true},"fstream-0.1.8.tgz":{"content_type":"application/octet-stream","revpos":21,"digest":"md5-n6ltn9KXSpxvOW+4R/pFQg==","length":29097,"stub":true},"fstream-0.1.7.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-ye9Jkw65QdldpqnQY0pfTw==","length":28819,"stub":true},"fstream-0.1.6.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-KA7sVZNQS1iu8ODEySffRQ==","length":28809,"stub":true},"fstream-0.1.5.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-O6yQIiJrNh1VYZkkhrrMlw==","length":28523,"stub":true},"fstream-0.1.3.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-C6nWxg9xROy2VCOTAAIKKw==","length":28711,"stub":true},"fstream-0.1.2.tgz":{"content_type":"application/octet-stream","revpos":11,"digest":"md5-l5mxj1T8q6o5MoWbQOfjrQ==","length":28651,"stub":true},"fstream-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-jF4iNFsSMaotKq8+XdZhxw==","length":27079,"stub":true},"fstream-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-l5ucHtBrYVbfnPjaKNW6UQ==","length":27190,"stub":true},"fstream-0.0.1.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-COtcBZ037akj7MGkQrSHlg==","length":30720,"stub":true},"fstream-0.0.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-UXPp3tRwFJkzvSvgeYYV8Q==","length":10240,"stub":true}},"_etag":"\"CWRXOR55MZP9K7M6RI7IOBLK7\""}