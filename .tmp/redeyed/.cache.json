{"_id":"redeyed","_rev":"55-50dc1718fe8488ebd4e2428b390cef13","name":"redeyed","description":"Takes JavaScript code, along with a config and returns the original code with tokens wrapped as configured.","dist-tags":{"latest":"0.4.2"},"versions":{"0.1.0":{"name":"redeyed","version":"0.1.0","description":"Takes a JavaScript abstract syntax tree, along with a config and returns the original code with words wrapped as configured.","author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"main":"redeyed.js","scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/redeyed.git"},"keywords":["ast","syntax","tree","source","wrap","metadata"],"license":"MIT","devDependencies":{"tap":"~0.3.1"},"dependencies":{"esprima":"~0.9.9"},"readme":"# redeyed [![Build Status](https://secure.travis-ci.org/thlorenz/redeyed.png)](http://travis-ci.org/thlorenz/redeyed)\n\n*Add color to your syntax tree!*\n\n![frog](http://allaboutfrogs.org/gallery/photos/redeyes/red1.gif)\n\n[Red Eyed Tree Frog](http://allaboutfrogs.org/info/species/redeye.html) (*Agalychnis callidryas*)\n\n## Status\n\nNothing useful here yet, so proceed as follows:\n\n```javascript\nif (youLikeTheIdea) star(); // this will encourage me to focus more effort on this project\nmoveOn();\n```\n\n## What?\n\nTakes a JavaScript abstract syntax tree, along with a config and returns the original code with words wrapped as configured.\n\n## What for?\n\nOne usecase is adding metadata to your code that can then be used to apply syntax highlighting.\n\n\n\n","_id":"redeyed@0.1.0","dist":{"shasum":"96fdbe59d6fff4c35e6365db67b18ed42c399172","tarball":"http://registry.npmjs.org/redeyed/-/redeyed-0.1.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.1.1":{"name":"redeyed","version":"0.1.1","description":"Takes a JavaScript abstract syntax tree, along with a config and returns the original code with words wrapped as configured.","author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"main":"redeyed.js","scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/redeyed.git"},"keywords":["ast","syntax","tree","source","wrap","metadata"],"license":"MIT","devDependencies":{"tap":"~0.3.1"},"dependencies":{"esprima":"~0.9.9"},"readme":"# redeyed [![Build Status](https://secure.travis-ci.org/thlorenz/redeyed.png)](http://travis-ci.org/thlorenz/redeyed)\n\n*Add color to your syntax tree!*\n\n![frog](http://allaboutfrogs.org/gallery/photos/redeyes/red1.gif)\n\n[Red Eyed Tree Frog](http://allaboutfrogs.org/info/species/redeye.html) (*Agalychnis callidryas*)\n\n## Status\n\nNothing useful here yet, so proceed as follows:\n\n```javascript\nif (youLikeTheIdea) star(); // this will encourage me to focus more effort on this project\nmoveOn();\n```\n\n## What?\n\nTakes a JavaScript abstract syntax tree, along with a config and returns the original code with words wrapped as configured.\n\n## What for?\n\nOne usecase is adding metadata to your code that can then be used to apply syntax highlighting.\n\n\n\n","_id":"redeyed@0.1.1","dist":{"shasum":"f129527737875059d6f479bdc492235cbc065c96","tarball":"http://registry.npmjs.org/redeyed/-/redeyed-0.1.1.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.1.2":{"name":"redeyed","version":"0.1.2","description":"Takes JavaScript code, along with a config and returns the original code with tokens wrapped as configured.","author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"main":"redeyed.js","scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/redeyed.git"},"keywords":["ast","syntax","tree","source","wrap","metadata"],"license":"MIT","devDependencies":{"tap":"~0.3.1"},"dependencies":{"esprima":"~0.9.9"},"readme":"# redeyed [![Build Status](https://secure.travis-ci.org/thlorenz/redeyed.png)](http://travis-ci.org/thlorenz/redeyed)\n\n*Add color to your JavaScript!*\n\n![frog](http://allaboutfrogs.org/gallery/photos/redeyes/red1.gif)\n\n[Red Eyed Tree Frog](http://allaboutfrogs.org/info/species/redeye.html) (*Agalychnis callidryas*)\n\n## What?\n\nTakes JavaScript code, along with a config and returns the original code with tokens wrapped and/or replaced as configured.\n\n## What for?\n\nOne usecase is adding metadata to your code that can then be used to apply syntax highlighting.\n\n## How?\n\n- copy the [config.js](https://github.com/thlorenz/redeyed/blob/master/config.js) and edit it in order to specify how\n  certain tokens are to be surrounded/replaced\n- replace the `undefined` of each token you want to configure with one of the following\n\n### {String} config\n\n`'before:after'`: wraps the token inside before/after \n\n### {Object} config\n\n`{ _before: 'before', _after: 'after' }`: wraps token inside before/after\n\n### {Function} config\n\n`function (s) { return 'replacement for s'; }`: replaces the token with whatever is returned by the provided function\n\n### Missing before and after resolution\n\nFor the `{String}` and `{Object}` configurations, 'before' or 'after' may be omitted:\n\n- `{String}`: \n  - `'before:'` (omitting 'after')\n  - `':after'` (omitting 'before')\n- `{Object}`: \n  - `{ _before: 'before' }` (omitting '_after')\n  - `{ _after: 'after' }` (omitting '_before')\n\nIn these cases the missing half is resolved as follows:\n\n- from the `parent._default` (i.e., `Keyword._default`) if found\n- otherwise from the `config._default` if found\n- otherwise `''` (empty string)\n\n### Transforming JavaScript code\n\nInvoke redeyed with your configuration and a code snippet as in the below example:\n\n```javascript\nvar redeyed = require('redeyed')\n  , config = require('./path/to/config')\n  , code = 'var a = 3;'\n  , result;\n\n// redeyed will throw an error (caused by the esprima parser) if the code has invalid javascript\ntry {\n  result = redeyed(code, config);\n  console.log(result);\n} catch(err) {\n  console.error(err);\n}\n```\n\n## redeyed in the wild\n\n- [cardinal](https://github.com/thlorenz/cardinal): Syntax highlights JavaScript code with ANSI colors to be printed to\n  the terminal\n","_id":"redeyed@0.1.2","dist":{"shasum":"422263d3b679f7173bb4c0535e33cffa6cbd92ce","tarball":"http://registry.npmjs.org/redeyed/-/redeyed-0.1.2.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.1.3":{"name":"redeyed","version":"0.1.3","description":"Takes JavaScript code, along with a config and returns the original code with tokens wrapped as configured.","author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"main":"redeyed.js","scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/redeyed.git"},"keywords":["ast","syntax","tree","source","wrap","metadata"],"license":"MIT","devDependencies":{"tap":"~0.3.1","readdirp":"~0.2.1"},"dependencies":{"esprima":"~0.9.9"},"readme":"# redeyed [![Build Status](https://secure.travis-ci.org/thlorenz/redeyed.png)](http://travis-ci.org/thlorenz/redeyed)\n\n*Add color to your JavaScript!*\n\n![frog](http://allaboutfrogs.org/gallery/photos/redeyes/red1.gif)\n\n[Red Eyed Tree Frog](http://allaboutfrogs.org/info/species/redeye.html) (*Agalychnis callidryas*)\n\n## What?\n\nTakes JavaScript code, along with a config and returns the original code with tokens wrapped and/or replaced as configured.\n\n## What for?\n\nOne usecase is adding metadata to your code that can then be used to apply syntax highlighting.\n\n## How?\n\n- copy the [config.js](https://github.com/thlorenz/redeyed/blob/master/config.js) and edit it in order to specify how\n  certain tokens are to be surrounded/replaced\n- replace the `undefined` of each token you want to configure with one of the following\n\n### {String} config\n\n`'before:after'`: wraps the token inside before/after \n\n### {Object} config\n\n`{ _before: 'before', _after: 'after' }`: wraps token inside before/after\n\n### {Function} config\n\n`function (s) { return 'replacement for s'; }`: replaces the token with whatever is returned by the provided function\n\n### Missing before and after resolution\n\nFor the `{String}` and `{Object}` configurations, 'before' or 'after' may be omitted:\n\n- `{String}`: \n  - `'before:'` (omitting 'after')\n  - `':after'` (omitting 'before')\n- `{Object}`: \n  - `{ _before: 'before' }` (omitting '_after')\n  - `{ _after: 'after' }` (omitting '_before')\n\nIn these cases the missing half is resolved as follows:\n\n- from the `parent._default` (i.e., `Keyword._default`) if found\n- otherwise from the `config._default` if found\n- otherwise `''` (empty string)\n\n### Transforming JavaScript code\n\nInvoke redeyed with your configuration and a code snippet as in the below example:\n\n```javascript\nvar redeyed = require('redeyed')\n  , config = require('./path/to/config')\n  , code = 'var a = 3;'\n  , result;\n\n// redeyed will throw an error (caused by the esprima parser) if the code has invalid javascript\ntry {\n  result = redeyed(code, config);\n  console.log(result);\n} catch(err) {\n  console.error(err);\n}\n```\n\n## redeyed in the wild\n\n- [cardinal](https://github.com/thlorenz/cardinal): Syntax highlights JavaScript code with ANSI colors to be printed to\n  the terminal\n","_id":"redeyed@0.1.3","dist":{"shasum":"48fc72d6cfb18316187a1c9dc5e3694d5934bb8a","tarball":"http://registry.npmjs.org/redeyed/-/redeyed-0.1.3.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.1.4":{"name":"redeyed","version":"0.1.4","description":"Takes JavaScript code, along with a config and returns the original code with tokens wrapped as configured.","author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"main":"redeyed.js","scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/redeyed.git"},"keywords":["ast","syntax","tree","source","wrap","metadata"],"license":"MIT","devDependencies":{"tap":"~0.3.1","readdirp":"~0.2.1"},"dependencies":{"esprima":"~0.9.9"},"readme":"# redeyed [![Build Status](https://secure.travis-ci.org/thlorenz/redeyed.png)](http://travis-ci.org/thlorenz/redeyed)\n\n*Add color to your JavaScript!*\n\n![frog](http://allaboutfrogs.org/gallery/photos/redeyes/red1.gif)\n\n[Red Eyed Tree Frog](http://allaboutfrogs.org/info/species/redeye.html) (*Agalychnis callidryas*)\n\n## What?\n\nTakes JavaScript code, along with a config and returns the original code with tokens wrapped and/or replaced as configured.\n\n## What for?\n\nOne usecase is adding metadata to your code that can then be used to apply syntax highlighting.\n\n## How?\n\n- copy the [config.js](https://github.com/thlorenz/redeyed/blob/master/config.js) and edit it in order to specify how\n  certain tokens are to be surrounded/replaced\n- replace the `undefined` of each token you want to configure with one of the following\n\n### {String} config\n\n`'before:after'`: wraps the token inside before/after \n\n### {Object} config\n\n`{ _before: 'before', _after: 'after' }`: wraps token inside before/after\n\n### {Function} config\n\n`function (s) { return 'replacement for s'; }`: replaces the token with whatever is returned by the provided function\n\n### Missing before and after resolution\n\nFor the `{String}` and `{Object}` configurations, 'before' or 'after' may be omitted:\n\n- `{String}`: \n  - `'before:'` (omitting 'after')\n  - `':after'` (omitting 'before')\n- `{Object}`: \n  - `{ _before: 'before' }` (omitting '_after')\n  - `{ _after: 'after' }` (omitting '_before')\n\nIn these cases the missing half is resolved as follows:\n\n- from the `parent._default` (i.e., `Keyword._default`) if found\n- otherwise from the `config._default` if found\n- otherwise `''` (empty string)\n\n### Transforming JavaScript code\n\nInvoke redeyed with your configuration and a code snippet as in the below example:\n\n```javascript\nvar redeyed = require('redeyed')\n  , config = require('./path/to/config')\n  , code = 'var a = 3;'\n  , result;\n\n// redeyed will throw an error (caused by the esprima parser) if the code has invalid javascript\ntry {\n  result = redeyed(code, config);\n  console.log(result);\n} catch(err) {\n  console.error(err);\n}\n```\n\n## redeyed in the wild\n\n- [cardinal](https://github.com/thlorenz/cardinal): Syntax highlights JavaScript code with ANSI colors to be printed to\n  the terminal\n","_id":"redeyed@0.1.4","dist":{"shasum":"f735b210277ce5bd30bbc4dcccfe7828145172ce","tarball":"http://registry.npmjs.org/redeyed/-/redeyed-0.1.4.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.1.5":{"name":"redeyed","version":"0.1.5","description":"Takes JavaScript code, along with a config and returns the original code with tokens wrapped as configured.","author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"main":"redeyed.js","scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/redeyed.git"},"keywords":["ast","syntax","tree","source","wrap","metadata"],"license":"MIT","devDependencies":{"tap":"~0.3.1","readdirp":"~0.2.1"},"dependencies":{"esprima":"~0.9.9"},"readme":"# redeyed [![Build Status](https://secure.travis-ci.org/thlorenz/redeyed.png)](http://travis-ci.org/thlorenz/redeyed)\n\n*Add color to your JavaScript!*\n\n![frog](http://allaboutfrogs.org/gallery/photos/redeyes/red1.gif)\n\n[Red Eyed Tree Frog](http://allaboutfrogs.org/info/species/redeye.html) (*Agalychnis callidryas*)\n\n## What?\n\nTakes JavaScript code, along with a config and returns the original code with tokens wrapped and/or replaced as configured.\n\n## What for?\n\nOne usecase is adding metadata to your code that can then be used to apply syntax highlighting.\n\n## How?\n\n- copy the [config.js](https://github.com/thlorenz/redeyed/blob/master/config.js) and edit it in order to specify how\n  certain tokens are to be surrounded/replaced\n- replace the `undefined` of each token you want to configure with one of the following\n\n### {String} config\n\n`'before:after'`: wraps the token inside before/after \n\n### {Object} config\n\n`{ _before: 'before', _after: 'after' }`: wraps token inside before/after\n\n### {Function} config\n\n`function (s) { return 'replacement for s'; }`: replaces the token with whatever is returned by the provided function\n\n### Missing before and after resolution\n\nFor the `{String}` and `{Object}` configurations, 'before' or 'after' may be omitted:\n\n- `{String}`: \n  - `'before:'` (omitting 'after')\n  - `':after'` (omitting 'before')\n- `{Object}`: \n  - `{ _before: 'before' }` (omitting '_after')\n  - `{ _after: 'after' }` (omitting '_before')\n\nIn these cases the missing half is resolved as follows:\n\n- from the `parent._default` (i.e., `Keyword._default`) if found\n- otherwise from the `config._default` if found\n- otherwise `''` (empty string)\n\n### Transforming JavaScript code\n\nInvoke redeyed with your configuration and a code snippet as in the below example:\n\n```javascript\nvar redeyed = require('redeyed')\n  , config = require('./path/to/config')\n  , code = 'var a = 3;'\n  , result;\n\n// redeyed will throw an error (caused by the esprima parser) if the code has invalid javascript\ntry {\n  result = redeyed(code, config);\n  console.log(result);\n} catch(err) {\n  console.error(err);\n}\n```\n\n## redeyed in the wild\n\n- [cardinal](https://github.com/thlorenz/cardinal): Syntax highlights JavaScript code with ANSI colors to be printed to\n  the terminal\n","_id":"redeyed@0.1.5","dist":{"shasum":"0d7111a93dc66e1aefe01baaf21e09c9ad765cc3","tarball":"http://registry.npmjs.org/redeyed/-/redeyed-0.1.5.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.2.0":{"name":"redeyed","version":"0.2.0","description":"Takes JavaScript code, along with a config and returns the original code with tokens wrapped as configured.","author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"main":"redeyed.js","scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/redeyed.git"},"keywords":["ast","syntax","tree","source","wrap","metadata"],"license":"MIT","devDependencies":{"tap":"~0.3.1","readdirp":"~0.2.1"},"dependencies":{"esprima":"~1.0.0"},"readme":"# redeyed [![Build Status](https://secure.travis-ci.org/thlorenz/redeyed.png)](http://travis-ci.org/thlorenz/redeyed)\n\n*Add color to your JavaScript!*\n\n![frog](http://allaboutfrogs.org/gallery/photos/redeyes/red1.gif)\n\n[Red Eyed Tree Frog](http://allaboutfrogs.org/info/species/redeye.html) (*Agalychnis callidryas*)\n\n## What?\n\nTakes JavaScript code, along with a config and returns the original code with tokens wrapped and/or replaced as configured.\n\n## What for?\n\nOne usecase is adding metadata to your code that can then be used to apply syntax highlighting.\n\n## How?\n\n- copy the [config.js](https://github.com/thlorenz/redeyed/blob/master/config.js) and edit it in order to specify how\n  certain tokens are to be surrounded/replaced\n- replace the `undefined` of each token you want to configure with one of the following\n\n### {String} config\n\n`'before:after'`: wraps the token inside before/after \n\n### {Object} config\n\n`{ _before: 'before', _after: 'after' }`: wraps token inside before/after\n\n### {Function} config\n\n`function (s) { return 'replacement for s'; }`: replaces the token with whatever is returned by the provided function\n\n### Missing before and after resolution\n\nFor the `{String}` and `{Object}` configurations, 'before' or 'after' may be omitted:\n\n- `{String}`: \n  - `'before:'` (omitting 'after')\n  - `':after'` (omitting 'before')\n- `{Object}`: \n  - `{ _before: 'before' }` (omitting '_after')\n  - `{ _after: 'after' }` (omitting '_before')\n\nIn these cases the missing half is resolved as follows:\n\n- from the `parent._default` (i.e., `Keyword._default`) if found\n- otherwise from the `config._default` if found\n- otherwise `''` (empty string)\n\n### Transforming JavaScript code\n\nInvoke redeyed with your configuration and a code snippet as in the below example:\n\n```javascript\nvar redeyed = require('redeyed')\n  , config = require('./path/to/config')\n  , code = 'var a = 3;'\n  , result;\n\n// redeyed will throw an error (caused by the esprima parser) if the code has invalid javascript\ntry {\n  result = redeyed(code, config);\n  console.log(result);\n} catch(err) {\n  console.error(err);\n}\n```\n\n## redeyed in the wild\n\n- [cardinal](https://github.com/thlorenz/cardinal): Syntax highlights JavaScript code with ANSI colors to be printed to\n  the terminal\n","_id":"redeyed@0.2.0","dist":{"shasum":"fb53f292b77cd47b1af830688b4801520cb5005c","tarball":"http://registry.npmjs.org/redeyed/-/redeyed-0.2.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.3.0":{"name":"redeyed","version":"0.3.0","description":"Takes JavaScript code, along with a config and returns the original code with tokens wrapped as configured.","author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"main":"redeyed.js","scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/redeyed.git"},"keywords":["ast","syntax","tree","source","wrap","metadata"],"license":"MIT","devDependencies":{"tap":"~0.3.1","readdirp":"~0.2.1"},"dependencies":{"esprima":"~1.0.0"},"readme":"# redeyed [![Build Status](https://secure.travis-ci.org/thlorenz/redeyed.png)](http://travis-ci.org/thlorenz/redeyed)\n\n*Add color to your JavaScript!*\n\n![frog](http://allaboutfrogs.org/gallery/photos/redeyes/red1.gif)\n\n[Red Eyed Tree Frog](http://allaboutfrogs.org/info/species/redeye.html) (*Agalychnis callidryas*)\n\n## What?\n\nTakes JavaScript code, along with a config and returns the original code with tokens wrapped and/or replaced as configured.\n\n## What for?\n\nOne usecase is adding metadata to your code that can then be used to apply syntax highlighting.\n\n## How?\n\n- copy the [config.js](https://github.com/thlorenz/redeyed/blob/master/config.js) and edit it in order to specify how\n  certain tokens are to be surrounded/replaced\n- replace the `undefined` of each token you want to configure with one of the following\n\n### {String} config\n\n`'before:after'`\n\nwraps the token inside before/after \n\n### {Object} config\n\n`{ _before: 'before', _after: 'after' }`\n\nwraps token inside before/after\n\n### Missing before and after resolution\n\nFor the `{String}` and `{Object}` configurations, 'before' or 'after' may be omitted:\n\n- `{String}`: \n  - `'before:'` (omitting 'after')\n  - `':after'` (omitting 'before')\n- `{Object}`: \n  - `{ _before: 'before' }` (omitting '_after')\n  - `{ _after: 'after' }` (omitting '_before')\n\nIn these cases the missing half is resolved as follows:\n\n- from the `parent._default` (i.e., `Keyword._default`) if found\n- otherwise from the `config._default` if found\n- otherwise `''` (empty string)\n\n### {Function} config\n\n`function (tokenString, tokenIndex, tokens) { return 'replacement for tokenString'; }`\n\nreplaces the tokenString with whatever is returned by the provided function\n\n- tokenString: the content of the token that is currently being processed\n- tokenIndex: the index of the token being processed inside tokens\n- tokens: all tokens that are being processed **including comments** (i.e. the result of merging esprima tokens and\n  comments)\n\nIn most cases the `tokenString` is all you need. The extra parameters are passed in case you need to gather more\ninformation about the `token`'s surroundings in order to decide how to transform it.\n\n### Transforming JavaScript code\n\n***redeyed(code, config[, opts])***\n\nInvoke redeyed with your **config**uration, a **code** snippet and maybe **opts** as in the below example:\n\n```javascript\nvar redeyed = require('redeyed')\n  , config = require('./path/to/config')\n  , code = 'var a = 3;'\n  , result;\n\n// redeyed will throw an error (caused by the esprima parser) if the code has invalid javascript\ntry {\n  result = redeyed(code, config);\n  console.log(result.code);\n} catch(err) {\n  console.error(err);\n}\n```\n\n***opts***:\n```js\n{ // {Boolean}\n  // if true `result.code` is not assigned and therefore `undefined`\n  // if false (default) `result.code` property contains the result of `split.join`\n  nojoin: true|false\n}\n```\n\n***return value***:\n\n```js\n{   ast      \n  , tokens   \n  , comments \n  , splits   \n  , code     \n}\n```\n\n- ast `{Array}`: [abstract syntax tree](http://en.wikipedia.org/wiki/Abstract_syntax_tree) as returned by [esprima\n  parse](http://en.wikipedia.org/wiki/Abstract_syntax_tree)\n- tokens `{Array}`: [tokens](http://en.wikipedia.org/wiki/Token_(parser)#Token) provided by esprima (excluding\n  comments)\n- comments `{Array}`: block and line comments as provided by esprima\n- splits `{Array}`: code pieces split up, some of which where transformed as configured\n- code `{String}`: transformed code, same as `splits.join('')` unless this step has been skipped (see opts)\n\n## redeyed in the wild\n\n- [cardinal](https://github.com/thlorenz/cardinal): Syntax highlights JavaScript code with ANSI colors to be printed to\n  the terminal\n\n## Changelog\n\n### 0.3\n- passing more information into {Function} config\n- API change: returning {Object} with code, ast, comments and tokens attached instead of just a code {String}\n- comments support\n\n### 0.2 \n- upgrade to Esprima 1.0.0\n\n### 0.1\n- first working version\n","_id":"redeyed@0.3.0","dist":{"shasum":"603595c78acf973f34e3aa9c675231cd0581a653","tarball":"http://registry.npmjs.org/redeyed/-/redeyed-0.3.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.4.0":{"name":"redeyed","version":"0.4.0","description":"Takes JavaScript code, along with a config and returns the original code with tokens wrapped as configured.","author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"main":"redeyed.js","scripts":{"test":"tap test/*.js","demo":"cd examples/browser; open index.html"},"repository":{"type":"git","url":"git://github.com/thlorenz/redeyed.git"},"keywords":["ast","syntax","tree","source","wrap","metadata"],"license":"MIT","devDependencies":{"tap":"~0.3.1","readdirp":"~0.2.1"},"dependencies":{"esprima":"~1.0.0"},"readme":"# redeyed [![Build Status](https://secure.travis-ci.org/thlorenz/redeyed.png)](http://travis-ci.org/thlorenz/redeyed)\n\n*Add color to your JavaScript!*\n\n![frog](http://allaboutfrogs.org/gallery/photos/redeyes/red1.gif)\n\n[Red Eyed Tree Frog](http://allaboutfrogs.org/info/species/redeye.html) *(Agalychnis callidryas)*\n\n## What?\n\nTakes JavaScript code, along with a config and returns the original code with tokens wrapped and/or replaced as configured.\n\n## Where?\n\n- server side using nodejs\n- in the [browser](#browser-support)\n\n## What for?\n\nOne usecase is adding metadata to your code that can then be used to apply syntax highlighting.\n\n## How?\n\n- copy the [config.js](https://github.com/thlorenz/redeyed/blob/master/config.js) and edit it in order to specify how\n  certain tokens are to be surrounded/replaced\n- replace the `undefined` of each token you want to configure with one of the following\n\n### {String} config\n\n`'before:after'`\n\nwraps the token inside before/after \n\n### {Object} config\n\n`{ _before: 'before', _after: 'after' }`\n\nwraps token inside before/after\n\n### Missing before and after resolution\n\nFor the `{String}` and `{Object}` configurations, 'before' or 'after' may be omitted:\n\n- `{String}`: \n  - `'before:'` (omitting 'after')\n  - `':after'` (omitting 'before')\n- `{Object}`: \n  - `{ _before: 'before' }` (omitting '_after')\n  - `{ _after: 'after' }` (omitting '_before')\n\nIn these cases the missing half is resolved as follows:\n\n- from the `parent._default` (i.e., `Keyword._default`) if found\n- otherwise from the `config._default` if found\n- otherwise `''` (empty string)\n\n### {Function} config\n\n`function (tokenString, tokenIndex, tokens) { return 'replacement for tokenString'; }`\n\nreplaces the tokenString with whatever is returned by the provided function\n\n- tokenString: the content of the token that is currently being processed\n- tokenIndex: the index of the token being processed inside tokens\n- tokens: all tokens that are being processed **including comments** (i.e. the result of merging esprima tokens and\n  comments)\n\nIn most cases the `tokenString` is all you need. The extra parameters are passed in case you need to gather more\ninformation about the `token`'s surroundings in order to decide how to transform it.\n\n### Transforming JavaScript code\n\n***redeyed(code, config[, opts])***\n\nInvoke redeyed with your **config**uration, a **code** snippet and maybe **opts** as in the below example:\n\n```javascript\nvar redeyed = require('redeyed')\n  , config = require('./path/to/config')\n  , code = 'var a = 3;'\n  , result;\n\n// redeyed will throw an error (caused by the esprima parser) if the code has invalid javascript\ntry {\n  result = redeyed(code, config);\n  console.log(result.code);\n} catch(err) {\n  console.error(err);\n}\n```\n\n***opts***:\n```js\n{ // {Boolean}\n  // if true `result.code` is not assigned and therefore `undefined`\n  // if false (default) `result.code` property contains the result of `split.join`\n  nojoin: true|false\n}\n```\n\n***return value***:\n\n```js\n{   ast      \n  , tokens   \n  , comments \n  , splits   \n  , code     \n}\n```\n\n- ast `{Array}`: [abstract syntax tree](http://en.wikipedia.org/wiki/Abstract_syntax_tree) as returned by [esprima\n  parse](http://en.wikipedia.org/wiki/Abstract_syntax_tree)\n- tokens `{Array}`: [tokens](http://en.wikipedia.org/wiki/Token_(parser)#Token) provided by esprima (excluding\n  comments)\n- comments `{Array}`: block and line comments as provided by esprima\n- splits `{Array}`: code pieces split up, some of which where transformed as configured\n- code `{String}`: transformed code, same as `splits.join('')` unless this step has been skipped (see opts)\n\n## Browser Support\n\n### AMD\n\nEnsure to include [esprima](https://github.com/ariya/esprima) as one of your dependencies\n\n```js\ndefine(['redeyed'], function (redeyed) {\n [ .. ]\n});\n```\n\n### Attached to global window object\n\nThe `redeyed {Function}` will be exposed globally as `window.redeyed` - big surprise!\n\n```html\n<script type=\"text/javascript\" src=\"https://raw.github.com/ariya/esprima/master/esprima.js\"></script>\n<script type=\"text/javascript\" src=\"path/to/redeyed.js\"></script>\n```\n\n## redeyed in the wild\n\n- [cardinal](https://github.com/thlorenz/cardinal): Syntax highlights JavaScript code with ANSI colors to be printed to\n  the terminal\n- [peacock](http://thlorenz.github.com/peacock/): JavaScript syntax highlighter that generates html that is compatible\n  with pygments styles.\n\n## Examples\n\n- `npm explore redeyed; npm demo` will let you try the [browser example](https://github.com/thlorenz/redeyed/tree/master/examples/browser)\n\n","_id":"redeyed@0.4.0","dist":{"shasum":"bb73bc609314151b2a1303bc5c9330678397edbf","tarball":"http://registry.npmjs.org/redeyed/-/redeyed-0.4.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.4.1":{"name":"redeyed","version":"0.4.1","description":"Takes JavaScript code, along with a config and returns the original code with tokens wrapped as configured.","author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"main":"redeyed.js","scripts":{"test":"tap test/*.js","demo-log":"node examples/replace-log","demo":"cd examples/browser; open index.html"},"repository":{"type":"git","url":"git://github.com/thlorenz/redeyed.git"},"keywords":["ast","syntax","tree","source","wrap","metadata"],"license":"MIT","devDependencies":{"tap":"~0.3.1","readdirp":"~0.2.1","cardinal":"~0.2.0"},"dependencies":{"esprima":"~1.0.0"},"readme":"# redeyed [![Build Status](https://secure.travis-ci.org/thlorenz/redeyed.png)](http://travis-ci.org/thlorenz/redeyed)\n\n*Add color to your JavaScript!*\n\n![frog](http://allaboutfrogs.org/gallery/photos/redeyes/red1.gif)\n\n[Red Eyed Tree Frog](http://allaboutfrogs.org/info/species/redeye.html) *(Agalychnis callidryas)*\n\n## What?\n\nTakes JavaScript code, along with a config and returns the original code with tokens wrapped and/or replaced as configured.\n\n## Where?\n\n- server side using nodejs\n- in the [browser](#browser-support)\n\n## What for?\n\nOne usecase is adding metadata to your code that can then be used to apply syntax highlighting.\n\n## How?\n\n- copy the [config.js](https://github.com/thlorenz/redeyed/blob/master/config.js) and edit it in order to specify how\n  certain tokens are to be surrounded/replaced\n- replace the `undefined` of each token you want to configure with one of the following\n\n### {String} config\n\n`'before:after'`\n\nwraps the token inside before/after \n\n### {Object} config\n\n`{ _before: 'before', _after: 'after' }`\n\nwraps token inside before/after\n\n#### Missing before and after resolution for {String} and {Object} config\n\nFor the `{String}` and `{Object}` configurations, 'before' or 'after' may be omitted:\n\n- `{String}`: \n  - `'before:'` (omitting 'after')\n  - `':after'` (omitting 'before')\n- `{Object}`: \n  - `{ _before: 'before' }` (omitting '_after')\n  - `{ _after: 'after' }` (omitting '_before')\n\nIn these cases the missing half is resolved as follows:\n\n- from the `parent._default` (i.e., `Keyword._default`) if found\n- otherwise from the `config._default` if found\n- otherwise `''` (empty string)\n\n### {Function} config\n\n`function (tokenString, info) { return {String}|{Object}; }`\n\n#### Inputs\n\n- tokenString: the content of the token that is currently being processed\n- info: an object with the following structure\n\n```js\n{\n    // {Int}\n    // the index of the token being processed inside tokens\n    tokenIndex\n\n    // {Array}\n    // all tokens that are being processed including comments \n    // (i.e. the result of merging esprima tokens and comments)\n  , tokens  \n\n    // {Object} \n    // the abstract syntax tree of the parsed code\n  , ast  \n\n    // {String}\n    // the code that was parsed (same string as the one passed to redeyed(code ..)\n  , code\n}\n```\n\nIn most cases the `tokenString` is all you need. The extra info object is passed in case you need to gather more\ninformation about the `token`'s surroundings in order to decide how to transform it. \nSee: [replace-log-example](https://github.com/thlorenz/redeyed/blob/master/examples/replace-log.js)\n\n#### Output\n\nYou can return a {String} or an {Object} from a {Function} config.\n\n- when returning a {String}, the token value will be replaced with it\n- when returning an {Object}, it should be of the following form:\n\n```js\n{\n    // {String}\n    // the string that should be substituted for the value of the current and all skipped tokens\n    replacement\n\n    // {Object} (Token)\n    // the token after which processing should continue\n    // all tokens in between the current one and this one inclusive will be ignored\n  , skipPastToken\n}\n```\n\n### Transforming JavaScript code\n\n***redeyed(code, config[, opts])***\n\nInvoke redeyed with your **config**uration, a **code** snippet and maybe **opts** as in the below example:\n\n```javascript\nvar redeyed = require('redeyed')\n  , config = require('./path/to/config')\n  , code = 'var a = 3;'\n  , result;\n\n// redeyed will throw an error (caused by the esprima parser) if the code has invalid javascript\ntry {\n  result = redeyed(code, config);\n  console.log(result.code);\n} catch(err) {\n  console.error(err);\n}\n```\n\n***opts***:\n```js\n{ // {Boolean}\n  // if true `result.code` is not assigned and therefore `undefined`\n  // if false (default) `result.code` property contains the result of `split.join`\n  nojoin: true|false\n}\n```\n\n***return value***:\n\n```js\n{   ast      \n  , tokens   \n  , comments \n  , splits   \n  , code     \n}\n```\n\n- ast `{Array}`: [abstract syntax tree](http://en.wikipedia.org/wiki/Abstract_syntax_tree) as returned by [esprima\n  parse](http://en.wikipedia.org/wiki/Abstract_syntax_tree)\n- tokens `{Array}`: [tokens](http://en.wikipedia.org/wiki/Token_(parser)) provided by esprima (excluding\n  comments)\n- comments `{Array}`: block and line comments as provided by esprima\n- splits `{Array}`: code pieces split up, some of which where transformed as configured\n- code `{String}`: transformed code, same as `splits.join('')` unless this step has been skipped (see opts)\n\n## Browser Support\n\n### AMD\n\nEnsure to include [esprima](https://github.com/ariya/esprima) as one of your dependencies\n\n```js\ndefine(['redeyed'], function (redeyed) {\n [ .. ]\n});\n```\n\n### Attached to global window object\n\nThe `redeyed {Function}` will be exposed globally as `window.redeyed` - big surprise!\n\n```html\n<script type=\"text/javascript\" src=\"https://raw.github.com/ariya/esprima/master/esprima.js\"></script>\n<script type=\"text/javascript\" src=\"path/to/redeyed.js\"></script>\n```\n\n## redeyed in the wild\n\n- [cardinal](https://github.com/thlorenz/cardinal): Syntax highlights JavaScript code with ANSI colors to be printed to\n  the terminal\n- [peacock](http://thlorenz.github.com/peacock/): JavaScript syntax highlighter that generates html that is compatible\n  with pygments styles.\n\n## Examples\n\n- `npm explore redeyed; npm demo` will let you try the [browser example](https://github.com/thlorenz/redeyed/tree/master/examples/browser)\n- `npm explore redeyed; npm demo-log` will let you try the [replace log example](https://github.com/thlorenz/redeyed/blob/master/examples/replace-log.js)\n\n","readmeFilename":"README.md","_id":"redeyed@0.4.1","dist":{"shasum":"b66f9167ee07e677ce3fcc76d40f7df39bea1e48","tarball":"http://registry.npmjs.org/redeyed/-/redeyed-0.4.1.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.4.2":{"name":"redeyed","version":"0.4.2","description":"Takes JavaScript code, along with a config and returns the original code with tokens wrapped as configured.","author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"main":"redeyed.js","scripts":{"test":"tap test/*.js","demo-log":"node examples/replace-log","demo":"cd examples/browser; open index.html"},"repository":{"type":"git","url":"git://github.com/thlorenz/redeyed.git"},"keywords":["ast","syntax","tree","source","wrap","metadata"],"license":"MIT","devDependencies":{"tap":"git://github.com/thlorenz/node-tap.git","readdirp":"~0.2.1","cardinal":"~0.2.0"},"dependencies":{"esprima":"~1.0.0"},"readme":"# redeyed [![Build Status](https://secure.travis-ci.org/thlorenz/redeyed.png)](http://travis-ci.org/thlorenz/redeyed)\n\n*Add color to your JavaScript!*\n\n![frog](http://allaboutfrogs.org/gallery/photos/redeyes/red1.gif)\n\n[Red Eyed Tree Frog](http://allaboutfrogs.org/info/species/redeye.html) *(Agalychnis callidryas)*\n\n## What?\n\nTakes JavaScript code, along with a config and returns the original code with tokens wrapped and/or replaced as configured.\n\n## Where?\n\n- server side using nodejs\n- in the [browser](#browser-support)\n\n## What for?\n\nOne usecase is adding metadata to your code that can then be used to apply syntax highlighting.\n\n## How?\n\n- copy the [config.js](https://github.com/thlorenz/redeyed/blob/master/config.js) and edit it in order to specify how\n  certain tokens are to be surrounded/replaced\n- replace the `undefined` of each token you want to configure with one of the following\n\n### {String} config\n\n`'before:after'`\n\nwraps the token inside before/after \n\n### {Object} config\n\n`{ _before: 'before', _after: 'after' }`\n\nwraps token inside before/after\n\n#### Missing before and after resolution for {String} and {Object} config\n\nFor the `{String}` and `{Object}` configurations, 'before' or 'after' may be omitted:\n\n- `{String}`: \n  - `'before:'` (omitting 'after')\n  - `':after'` (omitting 'before')\n- `{Object}`: \n  - `{ _before: 'before' }` (omitting '_after')\n  - `{ _after: 'after' }` (omitting '_before')\n\nIn these cases the missing half is resolved as follows:\n\n- from the `parent._default` (i.e., `Keyword._default`) if found\n- otherwise from the `config._default` if found\n- otherwise `''` (empty string)\n\n### {Function} config\n\n`function (tokenString, info) { return {String}|{Object}; }`\n\n#### Inputs\n\n- tokenString: the content of the token that is currently being processed\n- info: an object with the following structure\n\n```js\n{\n    // {Int}\n    // the index of the token being processed inside tokens\n    tokenIndex\n\n    // {Array}\n    // all tokens that are being processed including comments \n    // (i.e. the result of merging esprima tokens and comments)\n  , tokens  \n\n    // {Object} \n    // the abstract syntax tree of the parsed code\n  , ast  \n\n    // {String}\n    // the code that was parsed (same string as the one passed to redeyed(code ..)\n  , code\n}\n```\n\nIn most cases the `tokenString` is all you need. The extra info object is passed in case you need to gather more\ninformation about the `token`'s surroundings in order to decide how to transform it. \nSee: [replace-log-example](https://github.com/thlorenz/redeyed/blob/master/examples/replace-log.js)\n\n#### Output\n\nYou can return a {String} or an {Object} from a {Function} config.\n\n- when returning a {String}, the token value will be replaced with it\n- when returning an {Object}, it should be of the following form:\n\n```js\n{\n    // {String}\n    // the string that should be substituted for the value of the current and all skipped tokens\n    replacement\n\n    // {Object} (Token)\n    // the token after which processing should continue\n    // all tokens in between the current one and this one inclusive will be ignored\n  , skipPastToken\n}\n```\n\n### Transforming JavaScript code\n\n***redeyed(code, config[, opts])***\n\nInvoke redeyed with your **config**uration, a **code** snippet and maybe **opts** as in the below example:\n\n```javascript\nvar redeyed = require('redeyed')\n  , config = require('./path/to/config')\n  , code = 'var a = 3;'\n  , result;\n\n// redeyed will throw an error (caused by the esprima parser) if the code has invalid javascript\ntry {\n  result = redeyed(code, config);\n  console.log(result.code);\n} catch(err) {\n  console.error(err);\n}\n```\n\n***opts***:\n```js\n{ // {Boolean}\n  // if true `result.code` is not assigned and therefore `undefined`\n  // if false (default) `result.code` property contains the result of `split.join`\n  nojoin: true|false\n}\n```\n\n***return value***:\n\n```js\n{   ast      \n  , tokens   \n  , comments \n  , splits   \n  , code     \n}\n```\n\n- ast `{Array}`: [abstract syntax tree](http://en.wikipedia.org/wiki/Abstract_syntax_tree) as returned by [esprima\n  parse](http://en.wikipedia.org/wiki/Abstract_syntax_tree)\n- tokens `{Array}`: [tokens](http://en.wikipedia.org/wiki/Token_(parser)) provided by esprima (excluding\n  comments)\n- comments `{Array}`: block and line comments as provided by esprima\n- splits `{Array}`: code pieces split up, some of which where transformed as configured\n- code `{String}`: transformed code, same as `splits.join('')` unless this step has been skipped (see opts)\n\n## Browser Support\n\n### AMD\n\nEnsure to include [esprima](https://github.com/ariya/esprima) as one of your dependencies\n\n```js\ndefine(['redeyed'], function (redeyed) {\n [ .. ]\n});\n```\n\n### Attached to global window object\n\nThe `redeyed {Function}` will be exposed globally as `window.redeyed` - big surprise!\n\n```html\n<script type=\"text/javascript\" src=\"https://raw.github.com/ariya/esprima/master/esprima.js\"></script>\n<script type=\"text/javascript\" src=\"path/to/redeyed.js\"></script>\n```\n\n## redeyed in the wild\n\n- [cardinal](https://github.com/thlorenz/cardinal): Syntax highlights JavaScript code with ANSI colors to be printed to\n  the terminal\n- [peacock](http://thlorenz.github.com/peacock/): JavaScript syntax highlighter that generates html that is compatible\n  with pygments styles.\n\n## Examples\n\n- `npm explore redeyed; npm demo` will let you try the [browser example](https://github.com/thlorenz/redeyed/tree/master/examples/browser)\n- `npm explore redeyed; npm demo-log` will let you try the [replace log example](https://github.com/thlorenz/redeyed/blob/master/examples/replace-log.js)\n\n","readmeFilename":"README.md","_id":"redeyed@0.4.2","dist":{"shasum":"f0133b990cb972bdbcf2d2dce0aec36595f419bc","tarball":"http://registry.npmjs.org/redeyed/-/redeyed-0.4.2.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}}},"readme":"# redeyed [![Build Status](https://secure.travis-ci.org/thlorenz/redeyed.png)](http://travis-ci.org/thlorenz/redeyed)\n\n*Add color to your syntax tree!*\n\n![frog](http://allaboutfrogs.org/gallery/photos/redeyes/red1.gif)\n\n[Red Eyed Tree Frog](http://allaboutfrogs.org/info/species/redeye.html) (*Agalychnis callidryas*)\n\n## Status\n\nNothing useful here yet, so proceed as follows:\n\n```javascript\nif (youLikeTheIdea) star(); // this will encourage me to focus more effort on this project\nmoveOn();\n```\n\n## What?\n\nTakes a JavaScript abstract syntax tree, along with a config and returns the original code with words wrapped as configured.\n\n## What for?\n\nOne usecase is adding metadata to your code that can then be used to apply syntax highlighting.\n\n\n\n","maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"time":{"0.1.0":"2012-10-20T02:20:18.066Z","0.1.1":"2012-10-20T23:40:38.172Z","0.1.2":"2012-10-21T18:52:40.576Z","0.1.3":"2012-10-21T20:47:33.928Z","0.1.4":"2012-10-21T21:21:53.461Z","0.1.5":"2012-10-22T15:10:04.194Z","0.2.0":"2012-10-22T17:35:21.637Z","0.3.0":"2012-10-24T02:56:45.361Z","0.4.0":"2012-10-29T03:00:31.824Z","0.4.1":"2012-11-01T01:55:40.063Z","0.4.2":"2013-04-06T16:46:25.595Z"},"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"repository":{"type":"git","url":"git://github.com/thlorenz/redeyed.git"},"_attachments":{"redeyed-0.4.2.tgz":{"content_type":"application/octet-stream","revpos":54,"digest":"md5-uMvCLBuhjJkFzdYnUyki6Q==","length":13228,"stub":true},"redeyed-0.4.1.tgz":{"content_type":"application/octet-stream","revpos":53,"digest":"md5-501jJxaXD5M7tknh5ap+Pg==","length":13159,"stub":true},"redeyed-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":51,"digest":"md5-2vz9F1iuGgCm/jEILezWBA==","length":11042,"stub":true},"redeyed-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":41,"digest":"md5-nVDy2JpReXQieCClKL6MtA==","length":9078,"stub":true},"redeyed-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":35,"digest":"md5-wfz75KDcpgho0iTn/SPgNA==","length":7294,"stub":true},"redeyed-0.1.5.tgz":{"content_type":"application/octet-stream","revpos":33,"digest":"md5-moFMcQngk84OG+fe9nSClA==","length":7302,"stub":true},"redeyed-0.1.4.tgz":{"content_type":"application/octet-stream","revpos":31,"digest":"md5-uqYqGm/KW7J3nxFF7D019Q==","length":7244,"stub":true},"redeyed-0.1.3.tgz":{"content_type":"application/octet-stream","revpos":29,"digest":"md5-vT6Ph67vaVXjNz8/mn5qIQ==","length":7181,"stub":true},"redeyed-0.1.2.tgz":{"content_type":"application/octet-stream","revpos":27,"digest":"md5-H4CzD6R9koCQhJWgr6niGQ==","length":6745,"stub":true},"redeyed-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-P9NcIa/AUkkjWgbMKmQcog==","length":6585,"stub":true},"redeyed-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-x7Vbp7o5DuIpflsQ8yOMhQ==","length":6061,"stub":true}},"_etag":"\"DD90VK7GDEYIB4W6MTKZ4X1BO\""}