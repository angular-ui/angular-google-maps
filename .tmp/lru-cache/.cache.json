{"_id":"lru-cache","_rev":"52-5a3dd6fde6d10b18f3086bba9eb17778","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","dist-tags":{"latest":"2.5.0"},"versions":{"1.0.1":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"1.0.1","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"node lib/lru-cache.js"},"main":"lib/lru-cache","_id":"lru-cache@1.0.1","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-1.0.1.tgz","shasum":"fbfcd2d6e2d8f4519be9826bca3cb70900ffcd4b"},"directories":{}},"1.0.2":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"1.0.2","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"node lib/lru-cache.js"},"main":"lib/lru-cache","_id":"lru-cache@1.0.2","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-3","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-1.0.2.tgz","shasum":"04deae53134b6583567c849d868a2d10d5991bfd"},"directories":{}},"1.0.3":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"1.0.3","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"node lib/lru-cache.js"},"main":"lib/lru-cache","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"_npmJsonOpts":{"file":"/Users/isaacs/.npm/lru-cache/1.0.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"lru-cache@1.0.3","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.5.2-pre","_defaultsLoaded":true,"dist":{"shasum":"ef2ba05194250bd4781dbe57b6064d7320e58b73","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-1.0.3.tgz"},"directories":{}},"1.0.4":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"1.0.4","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"node lib/lru-cache.js"},"main":"lib/lru-cache","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"licenses":[{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"}],"_npmJsonOpts":{"file":"/Users/isaacs/.npm/lru-cache/1.0.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"lru-cache@1.0.4","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.22","_nodeVersion":"v0.4.10-pre","_defaultsLoaded":true,"dist":{"shasum":"dc2af9b3022fb7e17630ed7bdf6a1839b7b70291","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-1.0.4.tgz"},"directories":{}},"1.0.5":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"1.0.5","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"tap test"},"main":"lib/lru-cache.js","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"devDependencies":{"tap":"0.1"},"license":{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"lru-cache@1.0.5","dependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.6-pre","_defaultsLoaded":true,"dist":{"shasum":"62815a3bcb609c1c086e78e4c6a1c4c025267551","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-1.0.5.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"1.0.6":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"1.0.6","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"tap test"},"main":"lib/lru-cache.js","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"devDependencies":{"tap":"0"},"license":{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"lru-cache@1.0.6","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.7.7-pre","_defaultsLoaded":true,"dist":{"shasum":"aa50f97047422ac72543bda177a9c9d018d98452","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-1.0.6.tgz"},"readme":"# lru cache\n\nA cache object that deletes the least-recently-used items.\n\nUsage:\n\n    var LRU = require(\"lru-cache\")\n      , cache = LRU(10) // max 10 items. default = Infinity\n    cache.set(\"key\", \"value\")\n    cache.get(\"key\") // \"value\"\n\n    cache.reset()    // empty the cache\n\nRTFS for more info.\n","maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"1.1.0":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"1.1.0","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"tap test"},"main":"lib/lru-cache.js","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"devDependencies":{"tap":""},"license":{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_id":"lru-cache@1.1.0","contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"}],"dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.7.8-pre","_defaultsLoaded":true,"dist":{"shasum":"8d4a68dc0ab1cd5a2f39352478c495e9dd33cb61","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-1.1.0.tgz"},"readme":"# lru cache\n\nA cache object that deletes the least-recently-used items.\n\nUsage:\n\n    var LRU = require(\"lru-cache\")\n      , cache = LRU(10, // max length. default = Infinity\n                    // calculate how \"big\" each item is\n                    //\n                    // defaults to function(){return 1}, ie, just limit\n                    // the item count, without any knowledge as to their\n                    // relative size.\n                    function (item) { return item.length })\n\n    cache.set(\"key\", \"value\")\n    cache.get(\"key\") // \"value\"\n\n    cache.reset()    // empty the cache\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it'll fall out right\naway.\n\nRTFS for more info.\n","maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"1.1.1":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"1.1.1","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"tap test"},"main":"lib/lru-cache.js","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"devDependencies":{"tap":""},"license":{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"}],"readme":"# lru cache\n\nA cache object that deletes the least-recently-used items.\n\nUsage:\n\n    var LRU = require(\"lru-cache\")\n      , cache = LRU(10, // max length. default = Infinity\n\n                    // calculate how \"big\" each item is\n                    //\n                    // defaults to function(){return 1}, ie, just limit\n                    // the item count, without any knowledge as to their\n                    // relative size.\n                    function (item) { return item.length },\n\n                    // maxAge in ms\n                    // defaults to infinite\n                    // items are not pre-emptively pruned, but they\n                    // are deleted when fetched if they're too old.\n                    1000 * 60)\n\n    cache.set(\"key\", \"value\")\n    cache.get(\"key\") // \"value\"\n\n    cache.reset()    // empty the cache\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it'll fall out right\naway.\n\nRTFS for more info.\n","_id":"lru-cache@1.1.1","dist":{"shasum":"d6f24f75c28c9ec1239ca206952689696ec11e62","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-1.1.1.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"2.0.0":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.0.0","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"tap test"},"main":"lib/lru-cache.js","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"devDependencies":{"tap":""},"license":{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"}],"readme":"# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require(\"lru-cache\")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it'll fall out right\naway.\n\n## Options\n\n* `max` The maximum number of items.  Not setting this is kind of\n  silly, since that's the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it'll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you're storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It's called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you'll have to do that in a\n  `nextTick` or `setTimeout` callback or it won't do anything.\n","_id":"lru-cache@2.0.0","dist":{"shasum":"0fc80ed1e8276dcce18a865bce8a56ba30b81ecf","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-2.0.0.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"2.0.1":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.0.1","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"tap test"},"main":"lib/lru-cache.js","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"devDependencies":{"tap":""},"license":{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"}],"readme":"# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require(\"lru-cache\")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it'll fall out right\naway.\n\n## Options\n\n* `max` The maximum number of items.  Not setting this is kind of\n  silly, since that's the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it'll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you're storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It's called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you'll have to do that in a\n  `nextTick` or `setTimeout` callback or it won't do anything.\n","_id":"lru-cache@2.0.1","dist":{"shasum":"6feae28419f7fc358a063a5b188d52d15538006a","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-2.0.1.tgz"},"_npmVersion":"1.1.48","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"2.0.2":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.0.2","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"tap test"},"main":"lib/lru-cache.js","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"devDependencies":{"tap":""},"license":{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"readme":"# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require(\"lru-cache\")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it'll fall out right\naway.\n\n## Options\n\n* `max` The maximum number of items.  Not setting this is kind of\n  silly, since that's the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it'll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you're storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It's called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you'll have to do that in a\n  `nextTick` or `setTimeout` callback or it won't do anything.\n","_id":"lru-cache@2.0.2","dist":{"shasum":"c7e26bb69eabb8f6ee8242b3a569f5af7ee2fd3b","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-2.0.2.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"2.0.3":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.0.3","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"tap test"},"main":"lib/lru-cache.js","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"devDependencies":{"tap":""},"license":{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"readme":"# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require(\"lru-cache\")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it'll fall out right\naway.\n\n## Options\n\n* `max` The maximum number of items.  Not setting this is kind of\n  silly, since that's the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it'll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you're storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It's called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you'll have to do that in a\n  `nextTick` or `setTimeout` callback or it won't do anything.\n","_id":"lru-cache@2.0.3","dist":{"shasum":"dc18834f4a2e2b45faab6170b69b74741ef3871a","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-2.0.3.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"2.0.4":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.0.4","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"tap test"},"main":"lib/lru-cache.js","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"devDependencies":{"tap":""},"license":{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"readme":"# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require(\"lru-cache\")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it'll fall out right\naway.\n\n## Options\n\n* `max` The maximum number of items.  Not setting this is kind of\n  silly, since that's the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it'll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you're storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It's called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you'll have to do that in a\n  `nextTick` or `setTimeout` callback or it won't do anything.\n","_id":"lru-cache@2.0.4","dist":{"shasum":"b8b61ae09848385ec6768760e39c123e7e39568a","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-2.0.4.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"2.1.0":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.1.0","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"tap test"},"main":"lib/lru-cache.js","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"devDependencies":{"tap":""},"license":{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"readme":"# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require(\"lru-cache\")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it'll fall out right\naway.\n\n## Options\n\n* `max` The maximum number of items.  Not setting this is kind of\n  silly, since that's the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it'll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you're storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It's called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you'll have to do that in a\n  `nextTick` or `setTimeout` callback or it won't do anything.\n","readmeFilename":"README.md","_id":"lru-cache@2.1.0","dist":{"shasum":"ea1baa0fc9146c586aee06bd2fc547ab480e2e3c","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-2.1.0.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"2.2.0":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.2.0","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"tap test --gc"},"main":"lib/lru-cache.js","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"devDependencies":{"tap":""},"license":{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"readme":"# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require(\"lru-cache\")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it'll fall out right\naway.\n\n## Options\n\n* `max` The maximum number of items.  Not setting this is kind of\n  silly, since that's the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it'll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you're storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It's called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you'll have to do that in a\n  `nextTick` or `setTimeout` callback or it won't do anything.\n* `stale` By default, if you set a `maxAge`, it'll only actually pull\n  stale items out of the cache when you `get(key)`.  (That is, it's\n  not pre-emptively doing a `setTimeout` or anything.)  If you set\n  `stale:true`, it'll return the stale value before deleting it.  If\n  you don't set this, then it'll return `undefined` when you try to\n  get a stale entry, as if it had already been deleted.\n\n## API\n\n* `set(key, value)`\n* `get(key) => value`\n\n    Both of these will update the \"recently used\"-ness of the key.\n    They do what you think.\n\n* `del(key)`\n\n    Deletes a key out of the cache.\n\n* `reset()`\n\n    Clear the cache entirely, throwing away all values.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recent-ness\n    or deleting it for being stale.\n\n* `forEach(function(value,key,cache), [thisp])`\n\n    Just like `Array.prototype.forEach`.  Iterates over all the keys\n    in the cache, in order of recent-ness.  (Ie, more recently used\n    items are iterated over first.)\n\n* `keys()`\n\n    Return an array of the keys in the cache.\n\n* `values()`\n\n    Return an array of the values in the cache.\n","readmeFilename":"README.md","_id":"lru-cache@2.2.0","dist":{"shasum":"ec2bba603f4c5bb3e7a1bf62ce1c1dbc1d474e08","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-2.2.0.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"2.2.1":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.2.1","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"tap test --gc"},"main":"lib/lru-cache.js","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"devDependencies":{"tap":""},"license":{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"readme":"# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require(\"lru-cache\")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it'll fall out right\naway.\n\n## Options\n\n* `max` The maximum number of items.  Not setting this is kind of\n  silly, since that's the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it'll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you're storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It's called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you'll have to do that in a\n  `nextTick` or `setTimeout` callback or it won't do anything.\n* `stale` By default, if you set a `maxAge`, it'll only actually pull\n  stale items out of the cache when you `get(key)`.  (That is, it's\n  not pre-emptively doing a `setTimeout` or anything.)  If you set\n  `stale:true`, it'll return the stale value before deleting it.  If\n  you don't set this, then it'll return `undefined` when you try to\n  get a stale entry, as if it had already been deleted.\n\n## API\n\n* `set(key, value)`\n* `get(key) => value`\n\n    Both of these will update the \"recently used\"-ness of the key.\n    They do what you think.\n\n* `del(key)`\n\n    Deletes a key out of the cache.\n\n* `reset()`\n\n    Clear the cache entirely, throwing away all values.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recent-ness\n    or deleting it for being stale.\n\n* `forEach(function(value,key,cache), [thisp])`\n\n    Just like `Array.prototype.forEach`.  Iterates over all the keys\n    in the cache, in order of recent-ness.  (Ie, more recently used\n    items are iterated over first.)\n\n* `keys()`\n\n    Return an array of the keys in the cache.\n\n* `values()`\n\n    Return an array of the values in the cache.\n","readmeFilename":"README.md","_id":"lru-cache@2.2.1","dist":{"shasum":"dcc1de19e79242874a0e883d09bb1ce5c2bb58f4","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-2.2.1.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"2.2.2":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.2.2","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"tap test --gc"},"main":"lib/lru-cache.js","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"devDependencies":{"tap":""},"license":{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"readme":"# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require(\"lru-cache\")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it'll fall out right\naway.\n\n## Options\n\n* `max` The maximum number of items.  Not setting this is kind of\n  silly, since that's the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it'll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you're storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It's called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you'll have to do that in a\n  `nextTick` or `setTimeout` callback or it won't do anything.\n* `stale` By default, if you set a `maxAge`, it'll only actually pull\n  stale items out of the cache when you `get(key)`.  (That is, it's\n  not pre-emptively doing a `setTimeout` or anything.)  If you set\n  `stale:true`, it'll return the stale value before deleting it.  If\n  you don't set this, then it'll return `undefined` when you try to\n  get a stale entry, as if it had already been deleted.\n\n## API\n\n* `set(key, value)`\n* `get(key) => value`\n\n    Both of these will update the \"recently used\"-ness of the key.\n    They do what you think.\n\n* `del(key)`\n\n    Deletes a key out of the cache.\n\n* `reset()`\n\n    Clear the cache entirely, throwing away all values.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recent-ness\n    or deleting it for being stale.\n\n* `forEach(function(value,key,cache), [thisp])`\n\n    Just like `Array.prototype.forEach`.  Iterates over all the keys\n    in the cache, in order of recent-ness.  (Ie, more recently used\n    items are iterated over first.)\n\n* `keys()`\n\n    Return an array of the keys in the cache.\n\n* `values()`\n\n    Return an array of the values in the cache.\n","readmeFilename":"README.md","_id":"lru-cache@2.2.2","dist":{"shasum":"62b95a10cc7f8d85f3737506fe82cdcf3fa04d4b","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-2.2.2.tgz"},"_from":".","_npmVersion":"1.2.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"2.2.4":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.2.4","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"tap test --gc"},"main":"lib/lru-cache.js","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"devDependencies":{"tap":"","weak":""},"license":{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"readme":"# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require(\"lru-cache\")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it'll fall out right\naway.\n\n## Options\n\n* `max` The maximum size of the cache, checked by applying the length\n  function to all values in the cache.  Not setting this is kind of\n  silly, since that's the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it'll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you're storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It's called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you'll have to do that in a\n  `nextTick` or `setTimeout` callback or it won't do anything.\n* `stale` By default, if you set a `maxAge`, it'll only actually pull\n  stale items out of the cache when you `get(key)`.  (That is, it's\n  not pre-emptively doing a `setTimeout` or anything.)  If you set\n  `stale:true`, it'll return the stale value before deleting it.  If\n  you don't set this, then it'll return `undefined` when you try to\n  get a stale entry, as if it had already been deleted.\n\n## API\n\n* `set(key, value)`\n* `get(key) => value`\n\n    Both of these will update the \"recently used\"-ness of the key.\n    They do what you think.\n\n* `del(key)`\n\n    Deletes a key out of the cache.\n\n* `reset()`\n\n    Clear the cache entirely, throwing away all values.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recent-ness\n    or deleting it for being stale.\n\n* `forEach(function(value,key,cache), [thisp])`\n\n    Just like `Array.prototype.forEach`.  Iterates over all the keys\n    in the cache, in order of recent-ness.  (Ie, more recently used\n    items are iterated over first.)\n\n* `keys()`\n\n    Return an array of the keys in the cache.\n\n* `values()`\n\n    Return an array of the values in the cache.\n","readmeFilename":"README.md","_id":"lru-cache@2.2.4","dist":{"shasum":"6c658619becf14031d0d0b594b16042ce4dc063d","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-2.2.4.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"2.3.0":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.3.0","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"tap test --gc"},"main":"lib/lru-cache.js","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"devDependencies":{"tap":"","weak":""},"license":{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"readme":"# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require(\"lru-cache\")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it'll fall out right\naway.\n\n## Options\n\n* `max` The maximum size of the cache, checked by applying the length\n  function to all values in the cache.  Not setting this is kind of\n  silly, since that's the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it'll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you're storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It's called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you'll have to do that in a\n  `nextTick` or `setTimeout` callback or it won't do anything.\n* `stale` By default, if you set a `maxAge`, it'll only actually pull\n  stale items out of the cache when you `get(key)`.  (That is, it's\n  not pre-emptively doing a `setTimeout` or anything.)  If you set\n  `stale:true`, it'll return the stale value before deleting it.  If\n  you don't set this, then it'll return `undefined` when you try to\n  get a stale entry, as if it had already been deleted.\n\n## API\n\n* `set(key, value)`\n* `get(key) => value`\n\n    Both of these will update the \"recently used\"-ness of the key.\n    They do what you think.\n\n* `peek(key)`\n\n    Returns the key value (or `undefined` if not found) without\n    updating the \"recently used\"-ness of the key.\n\n    (If you find yourself using this a lot, you *might* be using the\n    wrong sort of data structure, but there are some use cases where\n    it's handy.)\n\n* `del(key)`\n\n    Deletes a key out of the cache.\n\n* `reset()`\n\n    Clear the cache entirely, throwing away all values.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recent-ness\n    or deleting it for being stale.\n\n* `forEach(function(value,key,cache), [thisp])`\n\n    Just like `Array.prototype.forEach`.  Iterates over all the keys\n    in the cache, in order of recent-ness.  (Ie, more recently used\n    items are iterated over first.)\n\n* `keys()`\n\n    Return an array of the keys in the cache.\n\n* `values()`\n\n    Return an array of the values in the cache.\n","readmeFilename":"README.md","_id":"lru-cache@2.3.0","dist":{"shasum":"1cee12d5a9f28ed1ee37e9c332b8888e6b85412a","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-2.3.0.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"2.3.1":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.3.1","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"tap test --gc"},"main":"lib/lru-cache.js","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"devDependencies":{"tap":"","weak":""},"license":{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"readme":"# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require(\"lru-cache\")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it'll fall out right\naway.\n\n## Options\n\n* `max` The maximum size of the cache, checked by applying the length\n  function to all values in the cache.  Not setting this is kind of\n  silly, since that's the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it'll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you're storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It's called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you'll have to do that in a\n  `nextTick` or `setTimeout` callback or it won't do anything.\n* `stale` By default, if you set a `maxAge`, it'll only actually pull\n  stale items out of the cache when you `get(key)`.  (That is, it's\n  not pre-emptively doing a `setTimeout` or anything.)  If you set\n  `stale:true`, it'll return the stale value before deleting it.  If\n  you don't set this, then it'll return `undefined` when you try to\n  get a stale entry, as if it had already been deleted.\n\n## API\n\n* `set(key, value)`\n* `get(key) => value`\n\n    Both of these will update the \"recently used\"-ness of the key.\n    They do what you think.\n\n* `peek(key)`\n\n    Returns the key value (or `undefined` if not found) without\n    updating the \"recently used\"-ness of the key.\n\n    (If you find yourself using this a lot, you *might* be using the\n    wrong sort of data structure, but there are some use cases where\n    it's handy.)\n\n* `del(key)`\n\n    Deletes a key out of the cache.\n\n* `reset()`\n\n    Clear the cache entirely, throwing away all values.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recent-ness\n    or deleting it for being stale.\n\n* `forEach(function(value,key,cache), [thisp])`\n\n    Just like `Array.prototype.forEach`.  Iterates over all the keys\n    in the cache, in order of recent-ness.  (Ie, more recently used\n    items are iterated over first.)\n\n* `keys()`\n\n    Return an array of the keys in the cache.\n\n* `values()`\n\n    Return an array of the values in the cache.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"_id":"lru-cache@2.3.1","dist":{"shasum":"b3adf6b3d856e954e2c390e6cef22081245a53d6","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-2.3.1.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}},"2.5.0":{"name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.5.0","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"tap test --gc"},"main":"lib/lru-cache.js","repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"devDependencies":{"tap":"","weak":""},"license":{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"},"readme":"# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require(\"lru-cache\")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it'll fall out right\naway.\n\n## Options\n\n* `max` The maximum size of the cache, checked by applying the length\n  function to all values in the cache.  Not setting this is kind of\n  silly, since that's the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it'll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you're storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It's called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you'll have to do that in a\n  `nextTick` or `setTimeout` callback or it won't do anything.\n* `stale` By default, if you set a `maxAge`, it'll only actually pull\n  stale items out of the cache when you `get(key)`.  (That is, it's\n  not pre-emptively doing a `setTimeout` or anything.)  If you set\n  `stale:true`, it'll return the stale value before deleting it.  If\n  you don't set this, then it'll return `undefined` when you try to\n  get a stale entry, as if it had already been deleted.\n\n## API\n\n* `set(key, value)`\n* `get(key) => value`\n\n    Both of these will update the \"recently used\"-ness of the key.\n    They do what you think.\n\n* `peek(key)`\n\n    Returns the key value (or `undefined` if not found) without\n    updating the \"recently used\"-ness of the key.\n\n    (If you find yourself using this a lot, you *might* be using the\n    wrong sort of data structure, but there are some use cases where\n    it's handy.)\n\n* `del(key)`\n\n    Deletes a key out of the cache.\n\n* `reset()`\n\n    Clear the cache entirely, throwing away all values.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recent-ness\n    or deleting it for being stale.\n\n* `forEach(function(value,key,cache), [thisp])`\n\n    Just like `Array.prototype.forEach`.  Iterates over all the keys\n    in the cache, in order of recent-ness.  (Ie, more recently used\n    items are iterated over first.)\n\n* `keys()`\n\n    Return an array of the keys in the cache.\n\n* `values()`\n\n    Return an array of the values in the cache.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"homepage":"https://github.com/isaacs/node-lru-cache","_id":"lru-cache@2.5.0","dist":{"shasum":"d82388ae9c960becbea0c73bb9eb79b6c6ce9aeb","tarball":"http://registry.npmjs.org/lru-cache/-/lru-cache-2.5.0.tgz"},"_from":".","_npmVersion":"1.3.15","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"directories":{}}},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"time":{"1.0.1":"2011-07-16T09:09:00.041Z","1.0.2":"2011-07-16T09:09:00.041Z","1.0.3":"2011-07-16T09:09:00.041Z","1.0.4":"2011-07-29T19:12:01.745Z","1.0.5":"2011-12-09T01:12:43.326Z","1.0.6":"2012-03-27T20:58:02.558Z","1.1.0":"2012-04-10T23:40:12.876Z","1.1.1":"2012-08-01T09:36:45.601Z","2.0.0":"2012-08-09T22:21:20.057Z","2.0.1":"2012-08-14T01:07:53.273Z","2.0.2":"2012-08-27T16:37:06.609Z","2.0.3":"2012-09-13T05:19:49.029Z","2.0.4":"2012-09-17T15:57:27.674Z","2.1.0":"2012-10-19T12:23:46.276Z","2.2.0":"2012-11-29T18:39:13.480Z","2.2.1":"2012-11-29T19:35:00.176Z","2.2.2":"2013-01-15T16:07:29.189Z","2.2.4":"2013-03-26T00:15:52.058Z","2.3.0":"2013-03-26T00:28:31.542Z","2.3.1":"2013-08-19T21:27:14.453Z","2.5.0":"2013-11-21T17:38:28.040Z"},"users":{"fgribreau":true,"romac":true,"zaphod1984":true,"brianloveswords":true},"_attachments":{"lru-cache-2.5.0.tgz":{"content_type":"application/octet-stream","revpos":50,"digest":"md5-dPpLFJJhrNY7HP2j1Wf/Nw==","length":6642,"stub":true},"lru-cache-2.3.1.tgz":{"content_type":"application/octet-stream","revpos":48,"digest":"md5-OWKmHsT4cUJ5iVHJw5+wkg==","length":6626,"stub":true},"lru-cache-2.3.0.tgz":{"content_type":"application/octet-stream","revpos":44,"digest":"md5-wf6eNdW4FZh5ZvAt+lxGoQ==","length":6617,"stub":true},"lru-cache-2.2.4.tgz":{"content_type":"application/octet-stream","revpos":42,"digest":"md5-wrOWADPj1Dr98gyADmMCVA==","length":6411,"stub":true},"lru-cache-2.2.2.tgz":{"content_type":"application/octet-stream","revpos":40,"digest":"md5-SUs1WUiuMoCfIAeoaZVROw==","length":6058,"stub":true},"lru-cache-2.2.1.tgz":{"content_type":"application/octet-stream","revpos":38,"digest":"md5-O+WaK5Vesa1iCCemIjw9DA==","length":6055,"stub":true},"lru-cache-2.2.0.tgz":{"content_type":"application/octet-stream","revpos":36,"digest":"md5-7MkvhJdRQnt2jzT0bdAQSw==","length":6039,"stub":true},"lru-cache-2.1.0.tgz":{"content_type":"application/octet-stream","revpos":34,"digest":"md5-QDh+d9wl0Ot2FrDDcz2UXA==","length":4840,"stub":true},"lru-cache-2.0.4.tgz":{"content_type":"application/octet-stream","revpos":32,"digest":"md5-apwKymiOVOW/AYVnAKKS4g==","length":4690,"stub":true},"lru-cache-2.0.3.tgz":{"content_type":"application/octet-stream","revpos":30,"digest":"md5-9s/kGa/6K1GIG7r06eM3ig==","length":5415,"stub":true},"lru-cache-2.0.2.tgz":{"content_type":"application/octet-stream","revpos":27,"digest":"md5-YZqwKJw21TR8J/h5czbOrw==","length":4591,"stub":true},"lru-cache-2.0.1.tgz":{"content_type":"application/octet-stream","revpos":25,"digest":"md5-CpmeXdYDn8KnL+3jLtAGHQ==","length":4564,"stub":true},"lru-cache-2.0.0.tgz":{"content_type":"application/octet-stream","revpos":23,"digest":"md5-c8j9FEKnAZmCHnPh6pFtyA==","length":4558,"stub":true},"lru-cache-1.1.1.tgz":{"content_type":"application/octet-stream","revpos":18,"digest":"md5-Gd6C83Cb5Gm7hV2VyfBJ/A==","length":3927,"stub":true},"lru-cache-1.1.0.tgz":{"content_type":"application/octet-stream","revpos":16,"digest":"md5-ZsCP59D9RJAFPwTN/LSFag==","length":3564,"stub":true},"lru-cache-1.0.6.tgz":{"content_type":"application/octet-stream","revpos":14,"digest":"md5-32h4vd5Xga26cRep9LIeSw==","length":2850,"stub":true},"lru-cache-1.0.5.tgz":{"content_type":"application/octet-stream","revpos":12,"digest":"md5-/SGno2pegXNRxftzsfwvWQ==","length":2610,"stub":true},"lru-cache-1.0.4.tgz":{"content_type":"application/octet-stream","revpos":10,"digest":"md5-KYIY+cVQB+59ghcCwAY1lQ==","length":2368,"stub":true},"lru-cache-1.0.3.tgz":{"content_type":"application/octet-stream","revpos":8,"digest":"md5-o95AX45SBdBOVrqsCR6Dfg==","length":1660,"stub":true},"lru-cache-1.0.2.tgz":{"content_type":"application/octet-stream","revpos":6,"digest":"md5-Km3spK3UQmghL6rmb3Pblw==","length":1690,"stub":true},"lru-cache-1.0.1.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-tAsnaZUDEIAlkQfjgu8v9Q==","length":2042,"stub":true}},"_etag":"\"5AMWY642ZZR1SIVSH1G2YWWP5\""}