{"_id":"grunt-template-jasmine-requirejs","_rev":"20-470765817d43c9f0d0768702acc86064","name":"grunt-template-jasmine-requirejs","description":"Requirejs template for grunt-contrib-jasmine","dist-tags":{"latest":"0.1.8"},"versions":{"0.1.0":{"name":"grunt-template-jasmine-requirejs","version":"0.1.0","description":"Requirejs template for grunt-contrib-jasmine","main":"src/template-jasmine-requirejs.js","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/jsoverson/grunt-template-jasmine-requirejs"},"keywords":["grunt","template","requirejs","jasmine","test"],"author":{"name":"Jarrod Overson"},"license":"BSD","devDependencies":{"grunt-contrib-jshint":"~0.1.1rc5","grunt-contrib-watch":"~0.1.4","grunt":"~0.4.0rc5","grunt-contrib-jasmine":"~0.3.0rc5","grunt-contrib-connect":"~0.1.0"},"readme":"RequireJS template for Jasmine unit tests\n-----------------------------------------\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-requirejs --save-dev\n```\n\n## Template Options\n\n### templateOptions.version\nType: `String`\nOptions: `2.1.1` `2.1.2`\nDefault: latest requirejs version included\n\nThe version of requirejs to use. Since this template is relatively recent, only versions 2.1.1 and 2.1.2 are\n\n### templateOptions.requireConfig\nType: `Object`\n\nThis object is `JSON.stringify()`-ed into the template and passed into `require.config()`\n\n\n\n## Sample usage\n\n```js\n// Example configuration\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  }\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfig: {\n            baseUrl: 'src/'\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n*Note* the usage of the 'connect' task configuration. You will need to use a task like\n[grunt-contrib-connect][] if you need to test your tasks on a running server.\n\n[grunt-contrib-connect]: https://github.com/gruntjs/grunt-contrib-connect\n\n## RequireJS notes\n\nIf you end up using this template, it's worth looking at the\n[source]() in order to familiarize yourself with how it loads your files. The load process\nconsists of a series of nested `require` blocks, incrementally loading your source and specs:\n\n```js\nrequire([*YOUR SOURCE*], function() {\n  require([*YOUR SPECS*], function() {\n    require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n      // at this point your tests are already running.\n    }\n  }\n}\n```\n","readmeFilename":"README.md","_id":"grunt-template-jasmine-requirejs@0.1.0","dist":{"shasum":"1965e4030a48820155a7b76fadc9d88df3f291c5","tarball":"http://registry.npmjs.org/grunt-template-jasmine-requirejs/-/grunt-template-jasmine-requirejs-0.1.0.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"jsoverson","email":"jsoverson@gmail.com"},"maintainers":[{"name":"jsoverson","email":"jsoverson@gmail.com"}],"directories":{}},"0.1.1":{"name":"grunt-template-jasmine-requirejs","version":"0.1.1","description":"Requirejs template for grunt-contrib-jasmine","main":"src/template-jasmine-requirejs.js","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/jsoverson/grunt-template-jasmine-requirejs"},"keywords":["grunt","template","requirejs","jasmine","test"],"author":{"name":"Jarrod Overson"},"license":"BSD","devDependencies":{"grunt-contrib-jshint":"~0.1.1rc5","grunt-contrib-watch":"~0.1.4","grunt":"~0.4.0rc5","grunt-contrib-jasmine":"~0.3.0rc5","grunt-contrib-connect":"~0.1.0"},"readme":"RequireJS template for Jasmine unit tests\n-----------------------------------------\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-requirejs --save-dev\n```\n\n## Template Options\n\n### templateOptions.version\nType: `String`\nOptions: `2.0.0` to `2.1.5`\nDefault: latest requirejs version included\n\nThe version of requirejs to use.\n\n### templateOptions.requireConfig\nType: `Object`\n\nThis object is `JSON.stringify()`-ed ( **support serialize Function object** ) into the template and passed into `var require` variable\n\n\n\n## Sample usage\n\n```js\n// Example configuration\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfig: {\n            baseUrl: 'src/',\n            paths: {\n              \"jquery\": \"path/to/jquery\"\n            }\n            shim: {\n              'foo': {\n                deps: ['bar'],\n                exports: 'Foo',\n                init: function (bar) {\n                  return this.Foo.noConflict();\n                }\n              }\n            },\n            deps: ['jquery']\n            callback: function($) {\n              // do initialization stuff\n              /*\n              \n              */\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n*Note* the usage of the 'connect' task configuration. You will need to use a task like\n[grunt-contrib-connect][] if you need to test your tasks on a running server.\n\n[grunt-contrib-connect]: https://github.com/gruntjs/grunt-contrib-connect\n\n## RequireJS notes\n\nIf you end up using this template, it's worth looking at the\n[source]() in order to familiarize yourself with how it loads your files. The load process\nconsists of a series of nested `require` blocks, incrementally loading your source and specs:\n\n```js\nrequire([*YOUR SOURCE*], function() {\n  require([*YOUR SPECS*], function() {\n    require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n      // at this point your tests are already running.\n    }\n  }\n}\n```\n\nIf \"callback\" function is defined in requireConfig, above code will be injected to the end of body of \"callback\" definition\n```js\ntemplateOptions: {\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n  }\n}\n```\nGenerated runner page with require configuration looks like:\n```js\nvar require = {\n  ...\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n    \n    require([*YOUR SOURCE*], function() {\n      require([*YOUR SPECS*], function() {\n        require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n          // at this point your tests are already running.\n        }\n      }\n    }\n  }\n  ...\n}\n```\nThis automation can help to avoid unexpected dependency order issue \n\n### Authors / Maintainers\n\n- Jarrod Overson (@jsoverson)\n- Cloud Chen (@cloudchen)\n","readmeFilename":"README.md","_id":"grunt-template-jasmine-requirejs@0.1.1","dist":{"shasum":"eb861715d427162aacc28765eaf111ba2116359e","tarball":"http://registry.npmjs.org/grunt-template-jasmine-requirejs/-/grunt-template-jasmine-requirejs-0.1.1.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"cloudchen","email":"cloudcmh@gmail.com"},"maintainers":[{"name":"jsoverson","email":"jsoverson@gmail.com"},{"name":"cloudchen","email":"cloudcmh@gmail.com"}],"directories":{}},"0.1.2":{"name":"grunt-template-jasmine-requirejs","version":"0.1.2","description":"Requirejs template for grunt-contrib-jasmine","main":"src/template-jasmine-requirejs.js","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/jsoverson/grunt-template-jasmine-requirejs"},"keywords":["grunt","template","requirejs","jasmine","test"],"author":{"name":"Jarrod Overson"},"license":"BSD","devDependencies":{"grunt-contrib-jshint":"~0.1.1rc5","grunt-contrib-watch":"~0.1.4","grunt":"~0.4.1","grunt-contrib-jasmine":"~0.4.1","grunt-contrib-connect":"~0.2.0"},"readme":"RequireJS template for Jasmine unit tests\n-----------------------------------------\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-requirejs --save-dev\n```\n\n## Template Options\n\n### templateOptions.version\nType: `String`\nOptions: `2.0.0` to `2.1.5`\nDefault: latest requirejs version included\n\nThe version of requirejs to use.\n\n### templateOptions.requireConfigFile\nType `String`\n\nPath to a require config file. The configuration is extracted from the require.config({}) call in\nthe file, and is passed into the require.config({}) call in the template.\n\n### templateOptions.requireConfig\nType: `Object`\n\nThis object is `JSON.stringify()`-ed ( **support serialize Function object** ) into the template and passed into `var require` variable\n\n\n\n## Sample usage\n\n```js\n// Example configuration\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: 'src/main.js',\n          requireConfig: {\n            baseUrl: 'src/',\n            paths: {\n              \"jquery\": \"path/to/jquery\"\n            }\n            shim: {\n              'foo': {\n                deps: ['bar'],\n                exports: 'Foo',\n                init: function (bar) {\n                  return this.Foo.noConflict();\n                }\n              }\n            },\n            deps: ['jquery']\n            callback: function($) {\n              // do initialization stuff\n              /*\n              \n              */\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n*Note* the usage of the 'connect' task configuration. You will need to use a task like\n[grunt-contrib-connect][] if you need to test your tasks on a running server.\n\n[grunt-contrib-connect]: https://github.com/gruntjs/grunt-contrib-connect\n\n## RequireJS notes\n\nIf you end up using this template, it's worth looking at the\n[source]() in order to familiarize yourself with how it loads your files. The load process\nconsists of a series of nested `require` blocks, incrementally loading your source and specs:\n\n```js\nrequire([*YOUR SOURCE*], function() {\n  require([*YOUR SPECS*], function() {\n    require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n      // at this point your tests are already running.\n    }\n  }\n}\n```\n\nIf \"callback\" function is defined in requireConfig, above code will be injected to the end of body of \"callback\" definition\n```js\ntemplateOptions: {\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n  }\n}\n```\nGenerated runner page with require configuration looks like:\n```js\nvar require = {\n  ...\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n    \n    require([*YOUR SOURCE*], function() {\n      require([*YOUR SPECS*], function() {\n        require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n          // at this point your tests are already running.\n        }\n      }\n    }\n  }\n  ...\n}\n```\nThis automation can help to avoid unexpected dependency order issue \n\n### Authors / Maintainers\n\n- Jarrod Overson (@jsoverson)\n- Cloud Chen (@cloudchen)\n","readmeFilename":"README.md","_id":"grunt-template-jasmine-requirejs@0.1.2","dist":{"shasum":"a1aba68071662fd07a68f45a52b30e60cb12cd66","tarball":"http://registry.npmjs.org/grunt-template-jasmine-requirejs/-/grunt-template-jasmine-requirejs-0.1.2.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"cloudchen","email":"cloudcmh@gmail.com"},"maintainers":[{"name":"jsoverson","email":"jsoverson@gmail.com"},{"name":"cloudchen","email":"cloudcmh@gmail.com"}],"directories":{}},"0.1.3":{"name":"grunt-template-jasmine-requirejs","version":"0.1.3","description":"Requirejs template for grunt-contrib-jasmine","main":"src/template-jasmine-requirejs.js","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/jsoverson/grunt-template-jasmine-requirejs"},"keywords":["grunt","template","requirejs","jasmine","test"],"author":{"name":"Jarrod Overson"},"license":"BSD","devDependencies":{"grunt-contrib-jshint":"~0.1.1rc5","grunt-contrib-watch":"~0.1.4","grunt":"~0.4.1","grunt-contrib-jasmine":"~0.4.1","grunt-contrib-connect":"~0.2.0"},"readme":"RequireJS template for Jasmine unit tests\n-----------------------------------------\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-requirejs --save-dev\n```\n\n## Template Options\n\n### templateOptions.version\nType: `String`\nOptions: `2.0.0` to `2.1.5`\nDefault: latest requirejs version included\n\nThe version of requirejs to use.\n\n### templateOptions.requireConfigFile\nType `String` or `Array`\n\nThis can be a single path to a require config file or an array of paths to multiple require config files. The configuration is extracted from the require.config({}) call(s) in the file, and is passed into the require.config({}) call in the template.\n\nFiles are loaded from left to right (using a deep merge). This is so you can have a main config and then override specific settings in additional config files (like a test config) without having to duplicate entire requireJS configs.\n\nIf `requireConfig` is also specified then it will be deep-merged onto the settings specified by this directive.\n\n### templateOptions.requireConfig\nType: `Object`\n\nThis object is `JSON.stringify()`-ed ( **support serialize Function object** ) into the template and passed into `var require` variable\n\nIf `requireConfigFile` is specified then it will be loaded first and the settings specified by this directive will be deep-merged onto those.\n\n\n## Sample usage\n\n```js\n// Example configuration using a single requireJS config file\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: 'src/main.js'\n        }\n      }\n    }\n  }\n});\n```\n\n```js\n// Example configuration using an inline requireJS config\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfig: {\n            baseUrl: 'src/',\n            paths: {\n              \"jquery\": \"path/to/jquery\"\n            },\n            shim: {\n              'foo': {\n                deps: ['bar'],\n                exports: 'Foo',\n                init: function (bar) {\n                  return this.Foo.noConflict();\n                }\n              }\n            },\n            deps: ['jquery'],\n            callback: function($) {\n              // do initialization stuff\n              /*\n\n              */\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n\n\n```js\n// Example using a base requireJS config file and specifying\n// overrides with an inline requireConfig file.\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: 'src/main.js',\n          requireConfig: {\n            baseUrl: 'overridden/baseUrl',\n            shim: {\n              // foo will override the 'foo' shim in main.js\n              'foo': {\n                deps: ['bar'],\n                exports: 'Foo'\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n```js\n// Example using a multiple requireJS config files. Useful for\n// testing.\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: ['src/config.js', 'spec/config.js']\n          requireConfig: {\n            baseUrl: 'overridden/baseUrl'\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n\n*Note* the usage of the 'connect' task configuration. You will need to use a task like\n[grunt-contrib-connect][] if you need to test your tasks on a running server.\n\n[grunt-contrib-connect]: https://github.com/gruntjs/grunt-contrib-connect\n\n## RequireJS notes\n\nIf you end up using this template, it's worth looking at the\n[source]() in order to familiarize yourself with how it loads your files. The load process\nconsists of a series of nested `require` blocks, incrementally loading your source and specs:\n\n```js\nrequire([*YOUR SOURCE*], function() {\n  require([*YOUR SPECS*], function() {\n    require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n      // at this point your tests are already running.\n    }\n  }\n}\n```\n\nIf \"callback\" function is defined in requireConfig, above code will be injected to the end of body of \"callback\" definition\n```js\ntemplateOptions: {\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n  }\n}\n```\nGenerated runner page with require configuration looks like:\n```js\nvar require = {\n  ...\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n\n    require([*YOUR SOURCE*], function() {\n      require([*YOUR SPECS*], function() {\n        require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n          // at this point your tests are already running.\n        }\n      }\n    }\n  }\n  ...\n}\n```\nThis automation can help to avoid unexpected dependency order issue\n\n### Authors / Maintainers\n\n- Jarrod Overson (@jsoverson)\n- Cloud Chen (@cloudchen)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jsoverson/grunt-template-jasmine-requirejs/issues"},"_id":"grunt-template-jasmine-requirejs@0.1.3","dist":{"shasum":"aad4e924073b1afc4d3771e4ea31ce5dc6d3ecdd","tarball":"http://registry.npmjs.org/grunt-template-jasmine-requirejs/-/grunt-template-jasmine-requirejs-0.1.3.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"cloudchen","email":"cloudcmh@gmail.com"},"maintainers":[{"name":"jsoverson","email":"jsoverson@gmail.com"},{"name":"cloudchen","email":"cloudcmh@gmail.com"}],"directories":{}},"0.1.4":{"name":"grunt-template-jasmine-requirejs","version":"0.1.4","description":"Requirejs template for grunt-contrib-jasmine","main":"src/template-jasmine-requirejs.js","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/jsoverson/grunt-template-jasmine-requirejs"},"keywords":["grunt","template","requirejs","jasmine","test"],"author":{"name":"Jarrod Overson"},"license":"BSD","devDependencies":{"grunt-contrib-jshint":"~0.1.1rc5","grunt-contrib-watch":"~0.1.4","grunt":"~0.4.1","grunt-contrib-jasmine":"~0.4.1","grunt-contrib-connect":"~0.2.0"},"readme":"RequireJS template for Jasmine unit tests\n-----------------------------------------\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-requirejs --save-dev\n```\n\n## Template Options\n\n### templateOptions.version\nType: `String`\nOptions: `2.0.0` to `2.1.8`\nDefault: latest requirejs version included\n\nThe version of requirejs to use.\n\n### templateOptions.requireConfigFile\nType `String` or `Array`\n\nThis can be a single path to a require config file or an array of paths to multiple require config files. The configuration is extracted from the require.config({}) call(s) in the file, and is passed into the require.config({}) call in the template.\n\nFiles are loaded from left to right (using a deep merge). This is so you can have a main config and then override specific settings in additional config files (like a test config) without having to duplicate entire requireJS configs.\n\nIf `requireConfig` is also specified then it will be deep-merged onto the settings specified by this directive.\n\n### templateOptions.requireConfig\nType: `Object`\n\nThis object is `JSON.stringify()`-ed ( **support serialize Function object** ) into the template and passed into `var require` variable\n\nIf `requireConfigFile` is specified then it will be loaded first and the settings specified by this directive will be deep-merged onto those.\n\n\n## Sample usage\n\n```js\n// Example configuration using a single requireJS config file\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: 'src/main.js'\n        }\n      }\n    }\n  }\n});\n```\n\n```js\n// Example configuration using an inline requireJS config\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfig: {\n            baseUrl: 'src/',\n            paths: {\n              \"jquery\": \"path/to/jquery\"\n            },\n            shim: {\n              'foo': {\n                deps: ['bar'],\n                exports: 'Foo',\n                init: function (bar) {\n                  return this.Foo.noConflict();\n                }\n              }\n            },\n            deps: ['jquery'],\n            callback: function($) {\n              // do initialization stuff\n              /*\n\n              */\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n\n\n```js\n// Example using a base requireJS config file and specifying\n// overrides with an inline requireConfig file.\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: 'src/main.js',\n          requireConfig: {\n            baseUrl: 'overridden/baseUrl',\n            shim: {\n              // foo will override the 'foo' shim in main.js\n              'foo': {\n                deps: ['bar'],\n                exports: 'Foo'\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n```js\n// Example using a multiple requireJS config files. Useful for\n// testing.\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: ['src/config.js', 'spec/config.js']\n          requireConfig: {\n            baseUrl: 'overridden/baseUrl'\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n\n*Note* the usage of the 'connect' task configuration. You will need to use a task like\n[grunt-contrib-connect][] if you need to test your tasks on a running server.\n\n[grunt-contrib-connect]: https://github.com/gruntjs/grunt-contrib-connect\n\n## RequireJS notes\n\nIf you end up using this template, it's worth looking at the\n[source]() in order to familiarize yourself with how it loads your files. The load process\nconsists of a series of nested `require` blocks, incrementally loading your source and specs:\n\n```js\nrequire([*YOUR SOURCE*], function() {\n  require([*YOUR SPECS*], function() {\n    require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n      // at this point your tests are already running.\n    }\n  }\n}\n```\n\nIf \"callback\" function is defined in requireConfig, above code will be injected to the end of body of \"callback\" definition\n```js\ntemplateOptions: {\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n  }\n}\n```\nGenerated runner page with require configuration looks like:\n```js\nvar require = {\n  ...\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n\n    require([*YOUR SOURCE*], function() {\n      require([*YOUR SPECS*], function() {\n        require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n          // at this point your tests are already running.\n        }\n      }\n    }\n  }\n  ...\n}\n```\nThis automation can help to avoid unexpected dependency order issue\n\n### Authors / Maintainers\n\n- Jarrod Overson (@jsoverson)\n- Cloud Chen (@cloudchen)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jsoverson/grunt-template-jasmine-requirejs/issues"},"_id":"grunt-template-jasmine-requirejs@0.1.4","dist":{"shasum":"223c8f6fa55f6f85be14c0eb08f31fb7d3a1377b","tarball":"http://registry.npmjs.org/grunt-template-jasmine-requirejs/-/grunt-template-jasmine-requirejs-0.1.4.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"cloudchen","email":"cloudcmh@gmail.com"},"maintainers":[{"name":"jsoverson","email":"jsoverson@gmail.com"},{"name":"cloudchen","email":"cloudcmh@gmail.com"}],"directories":{}},"0.1.5":{"name":"grunt-template-jasmine-requirejs","version":"0.1.5","description":"Requirejs template for grunt-contrib-jasmine","main":"src/template-jasmine-requirejs.js","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/jsoverson/grunt-template-jasmine-requirejs"},"keywords":["grunt","template","requirejs","jasmine","test"],"author":{"name":"Jarrod Overson"},"license":"BSD","devDependencies":{"grunt-contrib-jshint":"~0.1.1rc5","grunt-contrib-watch":"~0.1.4","grunt":"~0.4.1","grunt-contrib-jasmine":"~0.4.1","grunt-contrib-connect":"~0.2.0"},"readme":"RequireJS template for Jasmine unit tests\n-----------------------------------------\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-requirejs --save-dev\n```\n\n## Template Options\n\n### templateOptions.version\nType: `String`\nOptions: `2.0.0` to `2.1.8`\nDefault: latest requirejs version included\n\nThe version of requirejs to use.\n\n### templateOptions.requireConfigFile\nType `String` or `Array`\n\nThis can be a single path to a require config file or an array of paths to multiple require config files. The configuration is extracted from the require.config({}) call(s) in the file, and is passed into the require.config({}) call in the template.\n\nFiles are loaded from left to right (using a deep merge). This is so you can have a main config and then override specific settings in additional config files (like a test config) without having to duplicate entire requireJS configs.\n\nIf `requireConfig` is also specified then it will be deep-merged onto the settings specified by this directive.\n\n### templateOptions.requireConfig\nType: `Object`\n\nThis object is `JSON.stringify()`-ed ( **support serialize Function object** ) into the template and passed into `var require` variable\n\nIf `requireConfigFile` is specified then it will be loaded first and the settings specified by this directive will be deep-merged onto those.\n\n\n## Sample usage\n\n```js\n// Example configuration using a single requireJS config file\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: 'src/main.js'\n        }\n      }\n    }\n  }\n});\n```\n\n```js\n// Example configuration using an inline requireJS config\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfig: {\n            baseUrl: 'src/',\n            paths: {\n              \"jquery\": \"path/to/jquery\"\n            },\n            shim: {\n              'foo': {\n                deps: ['bar'],\n                exports: 'Foo',\n                init: function (bar) {\n                  return this.Foo.noConflict();\n                }\n              }\n            },\n            deps: ['jquery'],\n            callback: function($) {\n              // do initialization stuff\n              /*\n\n              */\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n\n\n```js\n// Example using a base requireJS config file and specifying\n// overrides with an inline requireConfig file.\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: 'src/main.js',\n          requireConfig: {\n            baseUrl: 'overridden/baseUrl',\n            shim: {\n              // foo will override the 'foo' shim in main.js\n              'foo': {\n                deps: ['bar'],\n                exports: 'Foo'\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n```js\n// Example using a multiple requireJS config files. Useful for\n// testing.\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: ['src/config.js', 'spec/config.js']\n          requireConfig: {\n            baseUrl: 'overridden/baseUrl'\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n\n*Note* the usage of the 'connect' task configuration. You will need to use a task like\n[grunt-contrib-connect][] if you need to test your tasks on a running server.\n\n[grunt-contrib-connect]: https://github.com/gruntjs/grunt-contrib-connect\n\n## RequireJS notes\n\nIf you end up using this template, it's worth looking at the\n[source]() in order to familiarize yourself with how it loads your files. The load process\nconsists of a series of nested `require` blocks, incrementally loading your source and specs:\n\n```js\nrequire([*YOUR SOURCE*], function() {\n  require([*YOUR SPECS*], function() {\n    require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n      // at this point your tests are already running.\n    }\n  }\n}\n```\n\nIf \"callback\" function is defined in requireConfig, above code will be injected to the end of body of \"callback\" definition\n```js\ntemplateOptions: {\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n  }\n}\n```\nGenerated runner page with require configuration looks like:\n```js\nvar require = {\n  ...\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n\n    require([*YOUR SOURCE*], function() {\n      require([*YOUR SPECS*], function() {\n        require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n          // at this point your tests are already running.\n        }\n      }\n    }\n  }\n  ...\n}\n```\nThis automation can help to avoid unexpected dependency order issue\n\n### Authors / Maintainers\n\n- Jarrod Overson (@jsoverson)\n- Cloud Chen (@cloudchen)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jsoverson/grunt-template-jasmine-requirejs/issues"},"_id":"grunt-template-jasmine-requirejs@0.1.5","dist":{"shasum":"50fa987cc594f00a06bd1b471caead68fb9fb10b","tarball":"http://registry.npmjs.org/grunt-template-jasmine-requirejs/-/grunt-template-jasmine-requirejs-0.1.5.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"cloudchen","email":"cloudcmh@gmail.com"},"maintainers":[{"name":"jsoverson","email":"jsoverson@gmail.com"},{"name":"cloudchen","email":"cloudcmh@gmail.com"}],"directories":{}},"0.1.6":{"name":"grunt-template-jasmine-requirejs","version":"0.1.6","description":"Requirejs template for grunt-contrib-jasmine","main":"src/template-jasmine-requirejs.js","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/jsoverson/grunt-template-jasmine-requirejs"},"keywords":["grunt","template","requirejs","jasmine","test"],"author":{"name":"Jarrod Overson"},"license":"BSD","devDependencies":{"grunt-contrib-jshint":"~0.1.1rc5","grunt-contrib-watch":"~0.1.4","grunt":"~0.4.1","grunt-contrib-jasmine":"~0.4.1","grunt-contrib-connect":"~0.2.0"},"readme":"RequireJS template for Jasmine unit tests\n-----------------------------------------\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-requirejs --save-dev\n```\n\n## Template Options\n\n### templateOptions.version\nType: `String`\nOptions: `2.0.0` to `2.1.8` or path to a local file system version(relative to Gruntfile.js). Absolute path is allowed as well. Default: latest requirejs version included\n\nThe version of requirejs to use.\n\n### templateOptions.requireConfigFile\nType `String` or `Array`\n\nThis can be a single path to a require config file or an array of paths to multiple require config files. The configuration is extracted from the require.config({}) call(s) in the file, and is passed into the require.config({}) call in the template.\n\nFiles are loaded from left to right (using a deep merge). This is so you can have a main config and then override specific settings in additional config files (like a test config) without having to duplicate entire requireJS configs.\n\nIf `requireConfig` is also specified then it will be deep-merged onto the settings specified by this directive.\n\n### templateOptions.requireConfig\nType: `Object`\n\nThis object is `JSON.stringify()`-ed ( **support serialize Function object** ) into the template and passed into `var require` variable\n\nIf `requireConfigFile` is specified then it will be loaded first and the settings specified by this directive will be deep-merged onto those.\n\n\n## Sample usage\n\n```js\n// Example configuration using a single requireJS config file\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: 'src/main.js'\n        }\n      }\n    }\n  }\n});\n```\n\n```js\n// Example configuration using an inline requireJS config\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfig: {\n            baseUrl: 'src/',\n            paths: {\n              \"jquery\": \"path/to/jquery\"\n            },\n            shim: {\n              'foo': {\n                deps: ['bar'],\n                exports: 'Foo',\n                init: function (bar) {\n                  return this.Foo.noConflict();\n                }\n              }\n            },\n            deps: ['jquery'],\n            callback: function($) {\n              // do initialization stuff\n              /*\n\n              */\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n\n\n```js\n// Example using a base requireJS config file and specifying\n// overrides with an inline requireConfig file.\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: 'src/main.js',\n          requireConfig: {\n            baseUrl: 'overridden/baseUrl',\n            shim: {\n              // foo will override the 'foo' shim in main.js\n              'foo': {\n                deps: ['bar'],\n                exports: 'Foo'\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n```js\n// Example using a multiple requireJS config files. Useful for\n// testing.\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: ['src/config.js', 'spec/config.js']\n          requireConfig: {\n            baseUrl: 'overridden/baseUrl'\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n\n*Note* the usage of the 'connect' task configuration. You will need to use a task like\n[grunt-contrib-connect][] if you need to test your tasks on a running server.\n\n[grunt-contrib-connect]: https://github.com/gruntjs/grunt-contrib-connect\n\n## RequireJS notes\n\nIf you end up using this template, it's worth looking at the\n[source]() in order to familiarize yourself with how it loads your files. The load process\nconsists of a series of nested `require` blocks, incrementally loading your source and specs:\n\n```js\nrequire([*YOUR SOURCE*], function() {\n  require([*YOUR SPECS*], function() {\n    require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n      // at this point your tests are already running.\n    }\n  }\n}\n```\n\nIf \"callback\" function is defined in requireConfig, above code will be injected to the end of body of \"callback\" definition\n```js\ntemplateOptions: {\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n  }\n}\n```\nGenerated runner page with require configuration looks like:\n```js\nvar require = {\n  ...\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n\n    require([*YOUR SOURCE*], function() {\n      require([*YOUR SPECS*], function() {\n        require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n          // at this point your tests are already running.\n        }\n      }\n    }\n  }\n  ...\n}\n```\nThis automation can help to avoid unexpected dependency order issue\n\n### Authors / Maintainers\n\n- Jarrod Overson (@jsoverson)\n- Cloud Chen (@cloudchen)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jsoverson/grunt-template-jasmine-requirejs/issues"},"_id":"grunt-template-jasmine-requirejs@0.1.6","dist":{"shasum":"606997926ca696a683fd70065c3b5ce29c8b670e","tarball":"http://registry.npmjs.org/grunt-template-jasmine-requirejs/-/grunt-template-jasmine-requirejs-0.1.6.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"cloudchen","email":"cloudcmh@gmail.com"},"maintainers":[{"name":"jsoverson","email":"jsoverson@gmail.com"},{"name":"cloudchen","email":"cloudcmh@gmail.com"}],"directories":{}},"0.1.7":{"name":"grunt-template-jasmine-requirejs","version":"0.1.7","description":"Requirejs template for grunt-contrib-jasmine","main":"src/template-jasmine-requirejs.js","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/jsoverson/grunt-template-jasmine-requirejs"},"keywords":["grunt","template","requirejs","jasmine","test"],"author":{"name":"Jarrod Overson"},"license":"BSD","devDependencies":{"grunt-contrib-jshint":"~0.6.4","grunt-contrib-watch":"~0.1.4","grunt":"~0.4.1","grunt-contrib-jasmine":"~0.5.2","grunt-contrib-connect":"~0.2.0"},"readme":"RequireJS template for Jasmine unit tests\n-----------------------------------------\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-requirejs --save-dev\n```\n\n## Template Options\n\n### templateOptions.version\nType: `String`\nOptions: `2.0.0` to `2.1.8` or path to a local file system version(relative to Gruntfile.js). Absolute path is allowed as well. Default: latest requirejs version included\n\nThe version of requirejs to use.\n\n### templateOptions.requireConfigFile\nType `String` or `Array`\n\nThis can be a single path to a require config file or an array of paths to multiple require config files. The configuration is extracted from the require.config({}) call(s) in the file, and is passed into the require.config({}) call in the template.\n\nFiles are loaded from left to right (using a deep merge). This is so you can have a main config and then override specific settings in additional config files (like a test config) without having to duplicate entire requireJS configs.\n\nIf `requireConfig` is also specified then it will be deep-merged onto the settings specified by this directive.\n\n### templateOptions.requireConfig\nType: `Object`\n\nThis object is `JSON.stringify()`-ed ( **support serialize Function object** ) into the template and passed into `var require` variable\n\nIf `requireConfigFile` is specified then it will be loaded first and the settings specified by this directive will be deep-merged onto those.\n\n\n## Sample usage\n\n```js\n// Example configuration using a single requireJS config file\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: 'src/main.js'\n        }\n      }\n    }\n  }\n});\n```\n\n```js\n// Example configuration using an inline requireJS config\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfig: {\n            baseUrl: 'src/',\n            paths: {\n              \"jquery\": \"path/to/jquery\"\n            },\n            shim: {\n              'foo': {\n                deps: ['bar'],\n                exports: 'Foo',\n                init: function (bar) {\n                  return this.Foo.noConflict();\n                }\n              }\n            },\n            deps: ['jquery'],\n            callback: function($) {\n              // do initialization stuff\n              /*\n\n              */\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n\n\n```js\n// Example using a base requireJS config file and specifying\n// overrides with an inline requireConfig file.\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: 'src/main.js',\n          requireConfig: {\n            baseUrl: 'overridden/baseUrl',\n            shim: {\n              // foo will override the 'foo' shim in main.js\n              'foo': {\n                deps: ['bar'],\n                exports: 'Foo'\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n```js\n// Example using a multiple requireJS config files. Useful for\n// testing.\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: ['src/config.js', 'spec/config.js']\n          requireConfig: {\n            baseUrl: 'overridden/baseUrl'\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n\n*Note* the usage of the 'connect' task configuration. You will need to use a task like\n[grunt-contrib-connect][] if you need to test your tasks on a running server.\n\n[grunt-contrib-connect]: https://github.com/gruntjs/grunt-contrib-connect\n\n## RequireJS notes\n\nIf you end up using this template, it's worth looking at the\n[source]() in order to familiarize yourself with how it loads your files. The load process\nconsists of a series of nested `require` blocks, incrementally loading your source and specs:\n\n```js\nrequire([*YOUR SOURCE*], function() {\n  require([*YOUR SPECS*], function() {\n    require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n      // at this point your tests are already running.\n    }\n  }\n}\n```\n\nIf \"callback\" function is defined in requireConfig, above code will be injected to the end of body of \"callback\" definition\n```js\ntemplateOptions: {\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n  }\n}\n```\nGenerated runner page with require configuration looks like:\n```js\nvar require = {\n  ...\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n\n    require([*YOUR SOURCE*], function() {\n      require([*YOUR SPECS*], function() {\n        require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n          // at this point your tests are already running.\n        }\n      }\n    }\n  }\n  ...\n}\n```\nThis automation can help to avoid unexpected dependency order issue\n\n### Authors / Maintainers\n\n- Jarrod Overson (@jsoverson)\n- Cloud Chen (@cloudchen)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jsoverson/grunt-template-jasmine-requirejs/issues"},"_id":"grunt-template-jasmine-requirejs@0.1.7","dist":{"shasum":"9b2ab4a701b8bf98d0bc301dae25204e000c4e8f","tarball":"http://registry.npmjs.org/grunt-template-jasmine-requirejs/-/grunt-template-jasmine-requirejs-0.1.7.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"cloudchen","email":"cloudcmh@gmail.com"},"maintainers":[{"name":"jsoverson","email":"jsoverson@gmail.com"},{"name":"cloudchen","email":"cloudcmh@gmail.com"}],"directories":{}},"0.1.8":{"name":"grunt-template-jasmine-requirejs","version":"0.1.8","description":"Requirejs template for grunt-contrib-jasmine","main":"src/template-jasmine-requirejs.js","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/cloudchen/grunt-template-jasmine-requirejs"},"keywords":["grunt","template","requirejs","jasmine","test"],"author":{"name":"Jarrod Overson"},"contributors":[{"name":"Cloud Chen","email":"cloudcmh@gmail.com","url":"https://github.com/cloudchen"}],"license":"BSD","devDependencies":{"grunt-contrib-jshint":"~0.6.4","grunt-contrib-watch":"~0.1.4","grunt":"~0.4.1","grunt-contrib-jasmine":"~0.5.2","grunt-contrib-connect":"~0.2.0"},"readme":"RequireJS template for Jasmine unit tests\n-----------------------------------------\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-requirejs --save-dev\n```\n\n## Template Options\n\n### templateOptions.version\nType: `String`\nOptions: `2.0.0` to `2.1.8` or path to a local file system version(relative to Gruntfile.js). Absolute path is allowed as well. Default: latest requirejs version included\n\nThe version of requirejs to use.\n\n### templateOptions.requireConfigFile\nType `String` or `Array`\n\nThis can be a single path to a require config file or an array of paths to multiple require config files. The configuration is extracted from the require.config({}) call(s) in the file, and is passed into the require.config({}) call in the template.\n\nFiles are loaded from left to right (using a deep merge). This is so you can have a main config and then override specific settings in additional config files (like a test config) without having to duplicate entire requireJS configs.\n\nIf `requireConfig` is also specified then it will be deep-merged onto the settings specified by this directive.\n\n### templateOptions.requireConfig\nType: `Object`\n\nThis object is `JSON.stringify()`-ed ( **support serialize Function object** ) into the template and passed into `var require` variable\n\nIf `requireConfigFile` is specified then it will be loaded first and the settings specified by this directive will be deep-merged onto those.\n\n\n## Sample usage\n\n```js\n// Example configuration using a single requireJS config file\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: 'src/main.js'\n        }\n      }\n    }\n  }\n});\n```\n\n```js\n// Example configuration using an inline requireJS config\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfig: {\n            baseUrl: 'src/',\n            paths: {\n              \"jquery\": \"path/to/jquery\"\n            },\n            shim: {\n              'foo': {\n                deps: ['bar'],\n                exports: 'Foo',\n                init: function (bar) {\n                  return this.Foo.noConflict();\n                }\n              }\n            },\n            deps: ['jquery'],\n            callback: function($) {\n              // do initialization stuff\n              /*\n\n              */\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n\n\n```js\n// Example using a base requireJS config file and specifying\n// overrides with an inline requireConfig file.\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: 'src/main.js',\n          requireConfig: {\n            baseUrl: 'overridden/baseUrl',\n            shim: {\n              // foo will override the 'foo' shim in main.js\n              'foo': {\n                deps: ['bar'],\n                exports: 'Foo'\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n```js\n// Example using a multiple requireJS config files. Useful for\n// testing.\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: ['src/config.js', 'spec/config.js']\n          requireConfig: {\n            baseUrl: 'overridden/baseUrl'\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n\n*Note* the usage of the 'connect' task configuration. You will need to use a task like\n[grunt-contrib-connect][] if you need to test your tasks on a running server.\n\n[grunt-contrib-connect]: https://github.com/gruntjs/grunt-contrib-connect\n\n## RequireJS notes\n\nIf you end up using this template, it's worth looking at the\n[source]() in order to familiarize yourself with how it loads your files. The load process\nconsists of a series of nested `require` blocks, incrementally loading your source and specs:\n\n```js\nrequire([*YOUR SOURCE*], function() {\n  require([*YOUR SPECS*], function() {\n    require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n      // at this point your tests are already running.\n    }\n  }\n}\n```\n\nIf \"callback\" function is defined in requireConfig, above code will be injected to the end of body of \"callback\" definition\n```js\ntemplateOptions: {\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n  }\n}\n```\nGenerated runner page with require configuration looks like:\n```js\nvar require = {\n  ...\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n\n    require([*YOUR SOURCE*], function() {\n      require([*YOUR SPECS*], function() {\n        require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n          // at this point your tests are already running.\n        }\n      }\n    }\n  }\n  ...\n}\n```\nThis automation can help to avoid unexpected dependency order issue\n\n### Authors / Maintainers\n\n- Jarrod Overson (@jsoverson)\n- Cloud Chen (@cloudchen)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/cloudchen/grunt-template-jasmine-requirejs/issues"},"_id":"grunt-template-jasmine-requirejs@0.1.8","dist":{"shasum":"ffdf4e6ee4ead9778f4c9900bb262088403f1b36","tarball":"http://registry.npmjs.org/grunt-template-jasmine-requirejs/-/grunt-template-jasmine-requirejs-0.1.8.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"cloudchen","email":"cloudcmh@gmail.com"},"maintainers":[{"name":"jsoverson","email":"jsoverson@gmail.com"},{"name":"cloudchen","email":"cloudcmh@gmail.com"}],"directories":{}}},"readme":"RequireJS template for Jasmine unit tests\n-----------------------------------------\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-requirejs --save-dev\n```\n\n## Template Options\n\n### templateOptions.version\nType: `String`\nOptions: `2.1.1` `2.1.2`\nDefault: latest requirejs version included\n\nThe version of requirejs to use. Since this template is relatively recent, only versions 2.1.1 and 2.1.2 are\n\n### templateOptions.requireConfig\nType: `Object`\n\nThis object is `JSON.stringify()`-ed into the template and passed into `require.config()`\n\n\n\n## Sample usage\n\n```js\n// Example configuration\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  }\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfig: {\n            baseUrl: 'src/'\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n*Note* the usage of the 'connect' task configuration. You will need to use a task like\n[grunt-contrib-connect][] if you need to test your tasks on a running server.\n\n[grunt-contrib-connect]: https://github.com/gruntjs/grunt-contrib-connect\n\n## RequireJS notes\n\nIf you end up using this template, it's worth looking at the\n[source]() in order to familiarize yourself with how it loads your files. The load process\nconsists of a series of nested `require` blocks, incrementally loading your source and specs:\n\n```js\nrequire([*YOUR SOURCE*], function() {\n  require([*YOUR SPECS*], function() {\n    require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n      // at this point your tests are already running.\n    }\n  }\n}\n```\n","maintainers":[{"name":"jsoverson","email":"jsoverson@gmail.com"},{"name":"cloudchen","email":"cloudcmh@gmail.com"}],"time":{"0.1.0":"2013-01-10T05:40:36.603Z","0.1.1":"2013-04-16T02:17:52.274Z","0.1.2":"2013-05-16T02:45:29.296Z","0.1.3":"2013-07-10T02:17:57.013Z","0.1.4":"2013-07-30T08:40:07.209Z","0.1.5":"2013-08-07T06:24:49.237Z","0.1.6":"2013-09-09T08:44:28.660Z","0.1.7":"2013-10-04T16:43:52.835Z","0.1.8":"2013-11-19T07:20:10.784Z"},"author":{"name":"Jarrod Overson"},"repository":{"type":"git","url":"https://github.com/cloudchen/grunt-template-jasmine-requirejs"},"_attachments":{"grunt-template-jasmine-requirejs-0.1.8.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-MDWx7uhuge0Z0upBG1EliA==","length":91540,"stub":true},"grunt-template-jasmine-requirejs-0.1.7.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-F1mA/bT8P3Uw9WRqxMZTWw==","length":91297,"stub":true},"grunt-template-jasmine-requirejs-0.1.6.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-EcJ8H/HMDUA5HQWt7O+qMA==","length":90831,"stub":true},"grunt-template-jasmine-requirejs-0.1.5.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-VjUMIjIPtwJ7soX186Mk/A==","length":90547,"stub":true},"grunt-template-jasmine-requirejs-0.1.4.tgz":{"content_type":"application/octet-stream","revpos":11,"digest":"md5-/eP1wLiW1jXE4PPyBo427w==","length":90298,"stub":true},"grunt-template-jasmine-requirejs-0.1.3.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-YqXPRj7IfAnciaMJRFZdQA==","length":89551,"stub":true},"grunt-template-jasmine-requirejs-0.1.2.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-xpgZ0mKWPlqZ7w9lqC5NYw==","length":86777,"stub":true},"grunt-template-jasmine-requirejs-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-Fpl8YSCowVR542evmbhkVg==","length":59055,"stub":true},"grunt-template-jasmine-requirejs-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-ROY12JlXYx8pcvKwtlLlNA==","length":17074,"stub":true}},"_etag":"\"1W5LFOUBDPGM32LHMKIOI03IH\""}