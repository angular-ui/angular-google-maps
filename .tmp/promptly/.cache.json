{"_id":"promptly","_rev":"19-ea518662121844fd9a77891b62e8008e","name":"promptly","description":"Simple command line prompting utility","dist-tags":{"latest":"0.2.0"},"versions":{"0.0.0":{"name":"promptly","version":"0.0.0","description":"Simple command line prompting utility","main":"index.js","devDependencies":{"mocha":"~1.8.1","async":"~0.1.22","expect.js":"~0.2.0"},"scripts":{"test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/IndigoUnited/node-promptly"},"keywords":["prompt","choose","choice","cli","command","line"],"author":{"name":"IndigoUnited","email":"hello@indigounited.com","url":"http://indigounited.com"},"license":"MIT","readme":"# promptly #\n---\n\nSimple command line prompting utilify.\n\n\n\n## API ##\n\nIn all the commands, the options argument is not mandatory.\n\n\n### .prompt(message, opts, fn) ###\n\nPrompts for a value, printing the `message` and waiting for the input.   \nWhen done, calls `fn` with an `error` and `value`.\n\nDefault options:\n```js\n{\n    // The default value to assume. If not supplied, the input is mandatory\n    'default': 'default value',\n    // Automatically trim the input\n    'trim': true,\n    // A validator or an array of validators.\n    'validator': null,\n    // Automatically retry on error\n    'retry': false\n}\n```\n\nThe validators have two purposes:\n```js\nfunction (value) {\n    // Validation example, throwing an error when invalid\n    if (value.length !== 2) {\n        throw new Error('Length must be 2');\n    }\n\n    // Parse the value, modifying it\n    return value.replace('aa', 'bb');\n}\n```\n\nExample usages:\n\nAsk for a name.\n```js\npromptly.prompt('name: ', function (err, value) {\n    if (err) {\n        console.log('invalid name');\n        // Manually call retry\n        // The passed errors have a retry method to easily prompt again.\n        return err.retry();\n    }\n\n    console.log(value);\n});\n```\n\nAsk for a name until it validates (non-empty value).\n```js\npromptly.prompt('name: ', { retry: true }, function (err, value) {\n    console.log(value);\n});\n```\n\nAsk for a name until it validates (non-empty value and length > 2).\n```js\nvar validator = function (value) {\n    if (value.length < 2) {\n        throw new Error('Min length of 2');\n    }\n\n    return value;\n}\n\npromptly.prompt('name: ', { retry: true, validator: validator }, function (err, value) {\n    console.log(value);\n});\n```\n\n\n\n### .confirm(message, opts, fn) ###\n\nAsk the user to confirm something.   \nCalls `fn` with an `error` and `value` (true or false).\n\nThe available options are the same, except that `retry` defauls to `true`.   \nTruthy values are: `y`, `yes`, `1` and `true`.\nFalsy values are `n`, `no`, `0` and `false`.\nComparison is made in case insensitive way.\n\nExample usage:\n\n```js\npromply.confirm('Are you sure? ', function (err, value) {\n    console.log('Answer: ', value);\n});\n```\n\n\n### .choose(message, choices, opts, fn) ###\n\nAsk the user to choose between multiple `choices` (array of choices).   \nCalls `fn` with an `error` and `value` (true or false).   \n\nThe available options are the same, except that `retry` defauls to `true`.\n\n\n```js\npromply.choose('Do you want an apple or an orange? ', ['apple', 'orange'], function (err, value) {\n    console.log('Answer: ', value);\n});\n```\n\n\n### .password(message, opts, fn) ###\n\nPrompts for a password, printing the `message` and waiting for the input.   \nWhen available, calls `fn` with an `error` and `value`.   \n\nThe available options are the same, except that `trim` defauls to `false`.\n\n\n```js\npromply.password('password: ', function (err, value) {\n    console.log('password is ' + value);\n});\n```\n\n\n## License ##\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","_id":"promptly@0.0.0","dist":{"shasum":"a039ebe1bf28de54d8455e30c954e36c5bea2699","tarball":"http://registry.npmjs.org/promptly/-/promptly-0.0.0.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"indigounited","email":"hello@indigounited.com"},"maintainers":[{"name":"indigounited","email":"hello@indigounited.com"}],"directories":{}},"0.0.1":{"name":"promptly","version":"0.0.1","description":"Simple command line prompting utility","main":"index.js","devDependencies":{"mocha":"~1.8.1","async":"~0.1.22","expect.js":"~0.2.0"},"scripts":{"test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/IndigoUnited/node-promptly"},"bugs":{"url":"http://github.com/IndigoUnited/node-promptly/issues"},"keywords":["prompt","choose","choice","cli","command","line"],"author":{"name":"IndigoUnited","email":"hello@indigounited.com","url":"http://indigounited.com"},"license":"MIT","dependencies":{"read":"~1.0.4"},"readme":"# promptly #\n---\n\nSimple command line prompting utility.\n\n## Installation ##\n\n`$ npm install promptly`\n\n\n## API ##\n\nIn all the commands, the options argument is not mandatory.\n\n\n### .prompt(message, opts, fn) ###\n\nPrompts for a value, printing the `message` and waiting for the input.   \nWhen done, calls `fn` with `error` and `value`.\n\nDefault options:\n```js\n{\n    // The default value to assume. If not supplied, the input is mandatory\n    'default': 'default value',\n    // Automatically trim the input\n    'trim': true,\n    // A validator or an array of validators.\n    'validator': null,\n    // Automatically retry if a validator fails\n    'retry': false,\n    // Do not print what the user types\n    'silent': false,\n    // Input and output streams to read and write to\n    'input': process.stdin,\n    'output': process.stdout\n}\n```\n\nThe validators have two purposes:\n```js\nfunction (value) {\n    // Validation example, throwing an error when invalid\n    if (value.length !== 2) {\n        throw new Error('Length must be 2');\n    }\n\n    // Parse the value, modifying it\n    return value.replace('aa', 'bb');\n}\n```\n\nExample usages\n\nAsk for a name:\n```js\npromptly.prompt('Name: ', function (err, value) {\n    // err is always null in this case, because no validators are set\n    console.log(value);\n});\n```\n\nAsk for a name with a constraint (non-empty value and length > 2):\n```js\nvar validator = function (value) {\n    if (value.length < 2) {\n        throw new Error('Min length of 2');\n    }\n\n    return value;\n};\n\npromptly.prompt('Name: ', { validator: validator }, function (err, value) {\n    if (err) {\n        console.error('Invalid name');\n        // Manually call retry\n        // The passed error have a retry method to easily prompt again.\n        err.retry();\n    }\n\n    console.log('Name is: ', value);\n});\n```\n\nSame as above but retry automatically:\n\n```js\nvar validator = function (value) {\n    if (value.length < 2) {\n        throw new Error('Min length of 2');\n    }\n\n    return value;\n};\n\npromptly.prompt('Name: ', { validator: validator , retry: true}, function (err, value) {\n    // err is always null because promptly will be prompting for a name until it validates\n    console.log('Name is: ', value);\n});\n```\n\n\n### .confirm(message, opts, fn) ###\n\nAsk the user to confirm something.   \nCalls `fn` with `error` and `value` (true or false).\n\nThe available options are the same, except that `retry` defaults to `true`.   \nTruthy values are: `y`, `yes` and `1`.\nFalsy values are `n`, `no`, and `0`.\nComparison is made in case insensitive way.\n\nExample usage:\n\n```js\npromptly.confirm('Are you sure? ', function (err, value) {\n    console.log('Answer: ', value);\n});\n```\n\n\n### .choose(message, choices, opts, fn) ###\n\nAsk the user to choose between multiple `choices` (array of choices).   \nCalls `fn` with `error` and `value` (true or false).   \n\nThe available options are the same, except that `retry` defaults to `true`.\n\nExample usage:\n\n```js\npromptly.choose('Do you want an apple or an orange? ', ['apple', 'orange'], function (err, value) {\n    console.log('Answer: ', value);\n});\n```\n\n\n### .password(message, opts, fn) ###\n\nPrompts for a password, printing the `message` and waiting for the input.   \nWhen available, calls `fn` with `error` and `value`.   \n\nThe available options are the same, except that `trim` and `silent` defaults to `false`.\n\nExample usage:\n\n```js\npromptly.password('Type a password: ', function (err, value) {\n    console.log('Password is', value);\n});\n```\n\n\n## License ##\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","_id":"promptly@0.0.1","dist":{"shasum":"a400d343f026efa17a75266572acbf0c5638e4b5","tarball":"http://registry.npmjs.org/promptly/-/promptly-0.0.1.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"indigounited","email":"hello@indigounited.com"},"maintainers":[{"name":"indigounited","email":"hello@indigounited.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.1.0":{"name":"promptly","version":"0.1.0","description":"Simple command line prompting utility","main":"index.js","dependencies":{"read":"~1.0.4"},"devDependencies":{"mocha":"~1.8.1","async":"~0.1.22","expect.js":"~0.2.0"},"scripts":{"test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/IndigoUnited/node-promptly"},"bugs":{"url":"http://github.com/IndigoUnited/node-promptly/issues"},"keywords":["prompt","choose","choice","cli","command","line"],"author":{"name":"IndigoUnited","email":"hello@indigounited.com","url":"http://indigounited.com"},"license":"MIT","readme":"# promptly #\n---\n\n[![Build Status](https://secure.travis-ci.org/IndigoUnited/node-promptly.png)](http://travis-ci.org/IndigoUnited/node-promptly.png)\n\nSimple command line prompting utility.\n\n## Installation ##\n\n`$ npm install promptly`\n\n\n## API ##\n\n\nNote that the `options` argument is optional for all the commands.\n\n\n### .prompt(message, opts, fn) ###\n\nPrompts for a value, printing the `message` and waiting for the input.   \nWhen done, calls `fn` with `error` and `value`.\n\nDefault options:\n```js\n{\n    // The default value. If not supplied, the input is mandatory\n    'default': null,\n    // Automatically trim the input\n    'trim': true,\n    // A validator or an array of validators.\n    'validator': null,\n    // Automatically retry if a validator fails\n    'retry': true,\n    // Do not print what the user types\n    'silent': false,\n    // Input and output streams to read and write to\n    'input': process.stdin,\n    'output': process.stdout\n}\n```\n\nThe validators have two purposes:\n```js\nfunction (value) {\n    // Validation example, throwing an error when invalid\n    if (value.length !== 2) {\n        throw new Error('Length must be 2');\n    }\n\n    // Parse the value, modifying it\n    return value.replace('aa', 'bb');\n}\n```\n\nExample usages\n\nAsk for a name:\n```js\npromptly.prompt('Name: ', function (err, value) {\n    // err is always null in this case, because no validators are set\n    console.log(value);\n});\n```\n\nAsk for a name with a constraint (non-empty value and length > 2):\n\n```js\nvar validator = function (value) {\n    if (value.length < 2) {\n        throw new Error('Min length of 2');\n    }\n\n    return value;\n};\n\npromptly.prompt('Name: ', { validator: validator }, function (err, value) {\n    // Since retry is true by default, err is always null\n    // because promptly will be prompting for a name until it validates\n    // Between each prompt, the error message from the validator will be printed\n    console.log('Name is:', value);\n});\n```\n\nSame as above but do not retry automatically:\n\n```js\nvar validator = function (value) {\n    if (value.length < 2) {\n        throw new Error('Min length of 2');\n    }\n\n    return value;\n};\n\npromptly.prompt('Name: ', { validator: validator, retry: false }, function (err, value) {\n    if (err) {\n        console.error('Invalid name:', e.message);\n        // Manually call retry\n        // The passed error has a retry method to easily prompt again.\n        return err.retry();\n    }\n\n    console.log('Name is:', value);\n});\n```\n\n### .confirm(message, opts, fn) ###\n\nAsk the user to confirm something.   \nCalls `fn` with `error` and `value` (true or false).\n\nTruthy values are: `y`, `yes` and `1`.   \nFalsy values are `n`, `no`, and `0`.   \nComparison is made in a case insensitive way.\n\nExample usage:\n\n```js\npromptly.confirm('Are you sure? ', function (err, value) {\n    console.log('Answer:', value);\n});\n```\n\n\n### .choose(message, choices, opts, fn) ###\n\nAsk the user to choose between multiple `choices` (array of choices).   \nCalls `fn` with `error` and `value`.\n\nExample usage:\n\n```js\npromptly.choose('Do you want an apple or an orange? ', ['apple', 'orange'], function (err, value) {\n    console.log('Answer:', value);\n});\n```\n\n\n### .password(message, opts, fn) ###\n\nPrompts for a password, printing the `message` and waiting for the input.   \nWhen available, calls `fn` with `error` and `value`.\n\nThe available options are the same, except that `trim` and `silent` default to `false` and `default` is an empty string (to allow empty passwords).\n\nExample usage:\n\n```js\npromptly.password('Type a password: ', function (err, value) {\n    console.log('Password is:', value);\n});\n```\n\n\n## License ##\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","_id":"promptly@0.1.0","dist":{"shasum":"a444bcd4e6d8464590981cc03045f9040dc4e58b","tarball":"http://registry.npmjs.org/promptly/-/promptly-0.1.0.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"indigounited","email":"hello@indigounited.com"},"maintainers":[{"name":"indigounited","email":"hello@indigounited.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}},"0.2.0":{"name":"promptly","version":"0.2.0","description":"Simple command line prompting utility","main":"index.js","dependencies":{"read":"~1.0.4"},"devDependencies":{"mocha":"~1.8.1","async":"~0.1.22","expect.js":"~0.2.0"},"scripts":{"test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/IndigoUnited/node-promptly"},"bugs":{"url":"http://github.com/IndigoUnited/node-promptly/issues"},"keywords":["prompt","choose","choice","cli","command","line"],"author":{"name":"IndigoUnited","email":"hello@indigounited.com","url":"http://indigounited.com"},"license":"MIT","readme":"# promptly\n\n[![Build Status](https://secure.travis-ci.org/IndigoUnited/node-promptly.png)](http://travis-ci.org/IndigoUnited/node-promptly.png)\n\nSimple command line prompting utility.\n\n## Installation\n\n`$ npm install promptly`\n\n\n## API\n\n\nNote that the `options` argument is optional for all the commands.\n\n\n### .prompt(message, opts, fn)\n\nPrompts for a value, printing the `message` and waiting for the input.   \nWhen done, calls `fn` with `error` and `value`.\n\nDefault options:\n```js\n{\n    // The default value. If not supplied, the input is mandatory\n    'default': null,\n    // Automatically trim the input\n    'trim': true,\n    // A validator or an array of validators.\n    'validator': null,\n    // Automatically retry if a validator fails\n    'retry': true,\n    // Do not print what the user types\n    'silent': false,\n    // Input and output streams to read and write to\n    'input': process.stdin,\n    'output': process.stdout\n}\n```\n\nThe validators have two purposes:\n```js\nfunction (value) {\n    // Validation example, throwing an error when invalid\n    if (value.length !== 2) {\n        throw new Error('Length must be 2');\n    }\n\n    // Parse the value, modifying it\n    return value.replace('aa', 'bb');\n}\n```\n\nExample usages\n\nAsk for a name:\n```js\npromptly.prompt('Name: ', function (err, value) {\n    // err is always null in this case, because no validators are set\n    console.log(value);\n});\n```\n\nAsk for a name with a constraint (non-empty value and length > 2):\n\n```js\nvar validator = function (value) {\n    if (value.length < 2) {\n        throw new Error('Min length of 2');\n    }\n\n    return value;\n};\n\npromptly.prompt('Name: ', { validator: validator }, function (err, value) {\n    // Since retry is true by default, err is always null\n    // because promptly will be prompting for a name until it validates\n    // Between each prompt, the error message from the validator will be printed\n    console.log('Name is:', value);\n});\n```\n\nSame as above but do not retry automatically:\n\n```js\nvar validator = function (value) {\n    if (value.length < 2) {\n        throw new Error('Min length of 2');\n    }\n\n    return value;\n};\n\npromptly.prompt('Name: ', { validator: validator, retry: false }, function (err, value) {\n    if (err) {\n        console.error('Invalid name:', e.message);\n        // Manually call retry\n        // The passed error has a retry method to easily prompt again.\n        return err.retry();\n    }\n\n    console.log('Name is:', value);\n});\n```\n\n### .confirm(message, opts, fn)\n\nAsk the user to confirm something.   \nCalls `fn` with `error` and `value` (true or false).\n\nTruthy values are: `y`, `yes` and `1`.   \nFalsy values are `n`, `no`, and `0`.   \nComparison is made in a case insensitive way.\n\nExample usage:\n\n```js\npromptly.confirm('Are you sure? ', function (err, value) {\n    console.log('Answer:', value);\n});\n```\n\n\n### .choose(message, choices, opts, fn)\n\nAsk the user to choose between multiple `choices` (array of choices).   \nCalls `fn` with `error` and `value`.\n\nExample usage:\n\n```js\npromptly.choose('Do you want an apple or an orange? ', ['apple', 'orange'], function (err, value) {\n    console.log('Answer:', value);\n});\n```\n\n\n### .password(message, opts, fn)\n\nPrompts for a password, printing the `message` and waiting for the input.   \nWhen available, calls `fn` with `error` and `value`.\n\nThe available options are the same, except that `trim` and `silent` default to `false` and `default` is an empty string (to allow empty passwords).\n\nExample usage:\n\n```js\npromptly.password('Type a password: ', function (err, value) {\n    console.log('Password is:', value);\n});\n```\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","readmeFilename":"README.md","_id":"promptly@0.2.0","dist":{"shasum":"73ef200fa8329d5d3a8df41798950b8646ca46d9","tarball":"http://registry.npmjs.org/promptly/-/promptly-0.2.0.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"satazor","email":"andremiguelcruz@msn.com"},"maintainers":[{"name":"indigounited","email":"hello@indigounited.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"directories":{}}},"readme":"# promptly #\n---\n\nSimple command line prompting utilify.\n\n\n\n## API ##\n\nIn all the commands, the options argument is not mandatory.\n\n\n### .prompt(message, opts, fn) ###\n\nPrompts for a value, printing the `message` and waiting for the input.   \nWhen done, calls `fn` with an `error` and `value`.\n\nDefault options:\n```js\n{\n    // The default value to assume. If not supplied, the input is mandatory\n    'default': 'default value',\n    // Automatically trim the input\n    'trim': true,\n    // A validator or an array of validators.\n    'validator': null,\n    // Automatically retry on error\n    'retry': false\n}\n```\n\nThe validators have two purposes:\n```js\nfunction (value) {\n    // Validation example, throwing an error when invalid\n    if (value.length !== 2) {\n        throw new Error('Length must be 2');\n    }\n\n    // Parse the value, modifying it\n    return value.replace('aa', 'bb');\n}\n```\n\nExample usages:\n\nAsk for a name.\n```js\npromptly.prompt('name: ', function (err, value) {\n    if (err) {\n        console.log('invalid name');\n        // Manually call retry\n        // The passed errors have a retry method to easily prompt again.\n        return err.retry();\n    }\n\n    console.log(value);\n});\n```\n\nAsk for a name until it validates (non-empty value).\n```js\npromptly.prompt('name: ', { retry: true }, function (err, value) {\n    console.log(value);\n});\n```\n\nAsk for a name until it validates (non-empty value and length > 2).\n```js\nvar validator = function (value) {\n    if (value.length < 2) {\n        throw new Error('Min length of 2');\n    }\n\n    return value;\n}\n\npromptly.prompt('name: ', { retry: true, validator: validator }, function (err, value) {\n    console.log(value);\n});\n```\n\n\n\n### .confirm(message, opts, fn) ###\n\nAsk the user to confirm something.   \nCalls `fn` with an `error` and `value` (true or false).\n\nThe available options are the same, except that `retry` defauls to `true`.   \nTruthy values are: `y`, `yes`, `1` and `true`.\nFalsy values are `n`, `no`, `0` and `false`.\nComparison is made in case insensitive way.\n\nExample usage:\n\n```js\npromply.confirm('Are you sure? ', function (err, value) {\n    console.log('Answer: ', value);\n});\n```\n\n\n### .choose(message, choices, opts, fn) ###\n\nAsk the user to choose between multiple `choices` (array of choices).   \nCalls `fn` with an `error` and `value` (true or false).   \n\nThe available options are the same, except that `retry` defauls to `true`.\n\n\n```js\npromply.choose('Do you want an apple or an orange? ', ['apple', 'orange'], function (err, value) {\n    console.log('Answer: ', value);\n});\n```\n\n\n### .password(message, opts, fn) ###\n\nPrompts for a password, printing the `message` and waiting for the input.   \nWhen available, calls `fn` with an `error` and `value`.   \n\nThe available options are the same, except that `trim` defauls to `false`.\n\n\n```js\npromply.password('password: ', function (err, value) {\n    console.log('password is ' + value);\n});\n```\n\n\n## License ##\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n","maintainers":[{"name":"indigounited","email":"hello@indigounited.com"},{"name":"satazor","email":"andremiguelcruz@msn.com"}],"time":{"0.0.0":"2013-01-26T18:49:47.876Z","0.0.1":"2013-01-27T16:42:20.951Z","0.1.0":"2013-01-28T22:53:42.399Z","0.2.0":"2013-06-04T20:28:44.607Z"},"author":{"name":"IndigoUnited","email":"hello@indigounited.com","url":"http://indigounited.com"},"repository":{"type":"git","url":"git://github.com/IndigoUnited/node-promptly"},"users":{"pid":true},"_attachments":{"promptly-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-34SSYz5NbfuWT1XsXSnUFA==","length":5340,"stub":true},"promptly-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":16,"digest":"md5-LhoPccyeqPxdVk/xNlRm8g==","length":5218,"stub":true},"promptly-0.0.1.tgz":{"content_type":"application/octet-stream","revpos":6,"digest":"md5-kL8b4TFmDGVA52000s+1RQ==","length":5012,"stub":true},"promptly-0.0.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-pni0JNBGhFYuPUNSaU2Acw==","length":4679,"stub":true}},"_etag":"\"338EECSEIEZ323PXM2PTBSIHZ\""}