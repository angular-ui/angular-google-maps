{"_id":"faye-websocket","_rev":"46-3a41d701ded7269359e3f7ece54d698e","name":"faye-websocket","description":"Standards-compliant WebSocket server and client","dist-tags":{"latest":"0.7.2"},"versions":{"0.1.0":{"name":"faye-websocket","description":"Robust general-purpose WebSocket server and client","homepage":"http://github.com/jcoglan/faye-websocket-node","author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"keywords":["websocket"],"version":"0.1.0","engines":{"node":">=0.4.0"},"main":"./lib/faye/websocket","devDependencies":{"jsclass":">=3.0.4"},"bugs":{"name":"http://github.com/jcoglan/faye-websocket-node/issues"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"git://github.com/jcoglan/faye-websocket-node.git"}],"_npmUser":{"name":"jcoglan","email":"jcoglan@gmail.com"},"_id":"faye-websocket@0.1.0","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.6.2","_defaultsLoaded":true,"dist":{"shasum":"696de95fac9ac2bc818f7d4f9f4f39b3bf1dad43","tarball":"http://registry.npmjs.org/faye-websocket/-/faye-websocket-0.1.0.tgz"},"maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"directories":{}},"0.1.1":{"name":"faye-websocket","description":"Robust general-purpose WebSocket server and client","homepage":"http://github.com/jcoglan/faye-websocket-node","author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"keywords":["websocket"],"version":"0.1.1","engines":{"node":">=0.4.0"},"main":"./lib/faye/websocket","devDependencies":{"jsclass":">=3.0.4"},"bugs":{"name":"http://github.com/jcoglan/faye-websocket-node/issues"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"git://github.com/jcoglan/faye-websocket-node.git"}],"_npmUser":{"name":"jcoglan","email":"jcoglan@gmail.com"},"_id":"faye-websocket@0.1.1","dependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-2","_nodeVersion":"v0.6.3","_defaultsLoaded":true,"dist":{"shasum":"aa35191903be46f35a83417f83659f2ab6c23f47","tarball":"http://registry.npmjs.org/faye-websocket/-/faye-websocket-0.1.1.tgz"},"maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"directories":{}},"0.1.2":{"name":"faye-websocket","description":"Robust general-purpose WebSocket server and client","homepage":"http://github.com/jcoglan/faye-websocket-node","author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"keywords":["websocket"],"version":"0.1.2","engines":{"node":">=0.4.0"},"main":"./lib/faye/websocket","devDependencies":{"jsclass":">=3.0.4"},"bugs":{"name":"http://github.com/jcoglan/faye-websocket-node/issues"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"git://github.com/jcoglan/faye-websocket-node.git"}],"_npmUser":{"name":"jcoglan","email":"jcoglan@gmail.com"},"_id":"faye-websocket@0.1.2","dependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"763e4e7432b5f23b235d879c1a49a7bc91892797","tarball":"http://registry.npmjs.org/faye-websocket/-/faye-websocket-0.1.2.tgz"},"maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"directories":{}},"0.2.0":{"name":"faye-websocket","description":"Standards-compliant WebSocket server and client","homepage":"http://github.com/jcoglan/faye-websocket-node","author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"keywords":["websocket"],"version":"0.2.0","engines":{"node":">=0.4.0"},"main":"./lib/faye/websocket","devDependencies":{"jsclass":""},"bugs":{"name":"http://github.com/jcoglan/faye-websocket-node/issues"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"git://github.com/jcoglan/faye-websocket-node.git"}],"_npmUser":{"name":"jcoglan","email":"jcoglan@gmail.com"},"_id":"faye-websocket@0.2.0","dependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-beta-4","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"05a3f9c21b41fde1facb43a556d906707d6548c9","tarball":"http://registry.npmjs.org/faye-websocket/-/faye-websocket-0.2.0.tgz"},"readme":"","maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"directories":{}},"0.3.0":{"name":"faye-websocket","description":"Standards-compliant WebSocket server and client","homepage":"http://github.com/faye/faye-websocket-node","author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"keywords":["websocket","eventsource"],"version":"0.3.0","engines":{"node":">=0.4.0"},"main":"./lib/faye/websocket","devDependencies":{"jsclass":""},"bugs":{"name":"http://github.com/faye/faye-websocket-node/issues"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"git://github.com/faye/faye-websocket-node.git"}],"_npmUser":{"name":"jcoglan","email":"jcoglan@gmail.com"},"_id":"faye-websocket@0.3.0","dependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-beta-4","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"cfd147e54da489a372f9a8af591b8f3037f4edcd","tarball":"http://registry.npmjs.org/faye-websocket/-/faye-websocket-0.3.0.tgz"},"readme":"","maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"directories":{}},"0.3.1":{"name":"faye-websocket","description":"Standards-compliant WebSocket server and client","homepage":"http://github.com/faye/faye-websocket-node","author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"keywords":["websocket","eventsource"],"version":"0.3.1","engines":{"node":">=0.4.0"},"main":"./lib/faye/websocket","devDependencies":{"jsclass":""},"bugs":{"name":"http://github.com/faye/faye-websocket-node/issues"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"git://github.com/faye/faye-websocket-node.git"}],"_npmUser":{"name":"jcoglan","email":"jcoglan@gmail.com"},"_id":"faye-websocket@0.3.1","dependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-beta-4","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"ad3dd5a1674c21c52d7664194589a3abd1ec32f0","tarball":"http://registry.npmjs.org/faye-websocket/-/faye-websocket-0.3.1.tgz"},"readme":"","maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"directories":{}},"0.4.0":{"name":"faye-websocket","description":"Standards-compliant WebSocket server and client","homepage":"http://github.com/faye/faye-websocket-node","author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"keywords":["websocket","eventsource"],"version":"0.4.0","engines":{"node":">=0.4.0"},"main":"./lib/faye/websocket","devDependencies":{"jsclass":""},"scripts":{"test":"node spec/runner.js"},"bugs":{"name":"http://github.com/faye/faye-websocket-node/issues"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"git://github.com/faye/faye-websocket-node.git"}],"_npmUser":{"name":"jcoglan","email":"jcoglan@gmail.com"},"_id":"faye-websocket@0.4.0","dependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-beta-4","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"e9a8fc6b3e5a610f3308e8b9782876a01a745799","tarball":"http://registry.npmjs.org/faye-websocket/-/faye-websocket-0.4.0.tgz"},"readme":"","maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"directories":{}},"0.4.1":{"name":"faye-websocket","description":"Standards-compliant WebSocket server and client","homepage":"http://github.com/faye/faye-websocket-node","author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"keywords":["websocket","eventsource"],"version":"0.4.1","engines":{"node":">=0.4.0"},"main":"./lib/faye/websocket","devDependencies":{"jsclass":""},"scripts":{"test":"node spec/runner.js"},"bugs":{"name":"http://github.com/faye/faye-websocket-node/issues"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"git://github.com/faye/faye-websocket-node.git"}],"_npmUser":{"name":"jcoglan","email":"jcoglan@gmail.com"},"_id":"faye-websocket@0.4.1","dependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.7.3","_defaultsLoaded":true,"dist":{"shasum":"d234387dfa2117d0db98a5dc3ec456161494e333","tarball":"http://registry.npmjs.org/faye-websocket/-/faye-websocket-0.4.1.tgz"},"readme":"","maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"directories":{}},"0.4.2":{"name":"faye-websocket","description":"Standards-compliant WebSocket server and client","homepage":"http://github.com/faye/faye-websocket-node","author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"keywords":["websocket","eventsource"],"version":"0.4.2","engines":{"node":">=0.4.0"},"main":"./lib/faye/websocket","devDependencies":{"jsclass":""},"scripts":{"test":"node spec/runner.js"},"bugs":"http://github.com/faye/faye-websocket-node/issues","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"git://github.com/faye/faye-websocket-node.git"}],"readme":"# faye-websocket\n\n* Travis CI build: [<img src=\"https://secure.travis-ci.org/faye/faye-websocket-node.png\" />](http://travis-ci.org/faye/faye-websocket-node)\n* Autobahn tests: [server](http://faye.jcoglan.com/autobahn/servers/), [client](http://faye.jcoglan.com/autobahn/clients/)\n\nThis is a robust, general-purpose WebSocket implementation extracted from the\n[Faye](http://faye.jcoglan.com) project. It provides classes for easily building\nWebSocket servers and clients in Node. It does not provide a server itself, but\nrather makes it easy to handle WebSocket connections within an existing\n[Node](http://nodejs.org/) application. It does not provide any abstraction\nother than the standard [WebSocket API](http://dev.w3.org/html5/websockets/).\n\nIt also provides an abstraction for handling [EventSource](http://dev.w3.org/html5/eventsource/)\nconnections, which are one-way connections that allow the server to push data to\nthe client. They are based on streaming HTTP responses and can be easier to\naccess via proxies than WebSockets.\n\nThe server-side socket can process [draft-75](http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75),\n[draft-76](http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76),\n[hybi-07](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-07)\nand later versions of the protocol. It selects protocol versions automatically,\nsupports both `text` and `binary` messages, and transparently handles `ping`,\n`pong`, `close` and fragmented messages.\n\n\n## Handling WebSocket connections in Node\n\nYou can handle WebSockets on the server side by listening for HTTP Upgrade\nrequests, and creating a new socket for the request. This socket object exposes\nthe usual WebSocket methods for receiving and sending messages. For example this\nis how you'd implement an echo server:\n\n```js\nvar WebSocket = require('faye-websocket'),\n    http      = require('http');\n\nvar server = http.createServer();\n\nserver.addListener('upgrade', function(request, socket, head) {\n  var ws = new WebSocket(request, socket, head);\n  \n  ws.onmessage = function(event) {\n    ws.send(event.data);\n  };\n  \n  ws.onclose = function(event) {\n    console.log('close', event.code, event.reason);\n    ws = null;\n  };\n});\n\nserver.listen(8000);\n```\n\nNote that under certain circumstances (notably a draft-76 client connecting\nthrough an HTTP proxy), the WebSocket handshake will not be complete after you\ncall `new WebSocket()` because the server will not have received the entire\nhandshake from the client yet. In this case, calls to `ws.send()` will buffer\nthe message in memory until the handshake is complete, at which point any\nbuffered messages will be sent to the client.\n\nIf you need to detect when the WebSocket handshake is complete, you can use the\n`onopen` event.\n\nIf the connection's protocol version supports it, you can call `ws.ping()` to\nsend a ping message and wait for the client's response. This method takes a\nmessage string, and an optional callback that fires when a matching pong message\nis received. It returns `true` iff a ping message was sent. If the client does\nnot support ping/pong, this method sends no data and returns `false`.\n\n```js\nws.ping('Mic check, one, two', function() {\n  // fires when pong is received\n});\n```\n\n\n## Using the WebSocket client\n\nThe client supports both the plain-text `ws` protocol and the encrypted `wss`\nprotocol, and has exactly the same interface as a socket you would use in a web\nbrowser. On the wire it identifies itself as hybi-13.\n\n```js\nvar WebSocket = require('faye-websocket'),\n    ws        = new WebSocket.Client('ws://www.example.com/');\n\nws.onopen = function(event) {\n  console.log('open');\n  ws.send('Hello, world!');\n};\n\nws.onmessage = function(event) {\n  console.log('message', event.data);\n};\n\nws.onclose = function(event) {\n  console.log('close', event.code, event.reason);\n  ws = null;\n};\n```\n\n\n## Subprotocol negotiation\n\nThe WebSocket protocol allows peers to select and identify the application\nprotocol to use over the connection. On the client side, you can set which\nprotocols the client accepts by passing a list of protocol names when you\nconstruct the socket:\n\n```js\nvar ws = new WebSocket.Client('ws://www.example.com/', ['irc', 'amqp']);\n```\n\nOn the server side, you can likewise pass in the list of protocols the server\nsupports after the other constructor arguments:\n\n```js\nvar ws = new WebSocket(request, socket, head, ['irc', 'amqp']);\n```\n\nIf the client and server agree on a protocol, both the client- and server-side\nsocket objects expose the selected protocol through the `ws.protocol` property.\nIf they cannot agree on a protocol to use, the client closes the connection.\n\n\n## WebSocket API\n\nThe WebSocket API consists of several event handlers and a method for sending\nmessages.\n\n* <b><tt>onopen</tt></b> fires when the socket connection is established. Event\n  has no attributes.\n* <b><tt>onerror</tt></b> fires when the connection attempt fails. Event has no\n  attributes.\n* <b><tt>onmessage</tt></b> fires when the socket receives a message. Event has\n  one attribute, <b><tt>data</tt></b>, which is either a `String` (for text\n  frames) or a `Buffer` (for binary frames).\n* <b><tt>onclose</tt></b> fires when either the client or the server closes the\n  connection. Event has two optional attributes, <b><tt>code</tt></b> and\n  <b><tt>reason</tt></b>, that expose the status code and message sent by the\n  peer that closed the connection.\n* <b><tt>send(message)</tt></b> accepts either a `String` or a `Buffer` and\n  sends a text or binary message over the connection to the other peer.\n* <b><tt>close(code, reason)</tt></b> closes the connection, sending the given\n  status code and reason text, both of which are optional.\n* <b><tt>protocol</tt></b> is a string (which may be empty) identifying the\n  subprotocol the socket is using.\n\n\n## Handling EventSource connections in Node\n\nEventSource connections provide a very similar interface, although because they\nonly allow the server to send data to the client, there is no `onmessage` API.\nEventSource allows the server to push text messages to the client, where each\nmessage has an optional event-type and ID.\n\n```js\nvar WebSocket   = require('faye-websocket'),\n    EventSource = WebSocket.EventSource,\n    http        = require('http');\n\nvar server = http.createServer();\n\nserver.addListener('request', function(request, response) {\n  if (EventSource.isEventSource(request)) {\n    var es = new EventSource(request, response);\n    console.log('open', es.url, es.lastEventId);\n    \n    // Periodically send messages\n    var loop = setInterval(function() { es.send('Hello') }, 1000);\n    \n    es.onclose = function() {\n      clearInterval(loop);\n      es = null;\n    };\n  \n  } else {\n    // Normal HTTP request\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n    response.write('Hello');\n    response.end();\n  }\n});\n\nserver.listen(8000);\n```\n\nThe `send` method takes two optional parameters, `event` and `id`. The default\nevent-type is `'message'` with no ID. For example, to send a `notification`\nevent with ID `99`:\n\n```js\nes.send('Breaking News!', {event: 'notification', id: '99'});\n```\n\nThe `EventSource` object exposes the following properties:\n\n* <b><tt>url</tt></b> is a string containing the URL the client used to create\n  the EventSource.\n* <b><tt>lastEventId</tt></b> is a string containing the last event ID\n  received by the client. You can use this when the client reconnects after a\n  dropped connection to determine which messages need resending.\n\nWhen you initialize an EventSource with ` new EventSource()`, you can pass\nconfiguration options after the `response` parameter. Available options are:\n\n* <b><tt>retry</tt></b> is a number that tells the client how long (in seconds)\n  it should wait after a dropped connection before attempting to reconnect.\n* <b><tt>ping</tt></b> is a number that tells the server how often (in seconds)\n  to send 'ping' packets to the client to keep the connection open, to defeat\n  timeouts set by proxies. The client will ignore these messages.\n\nFor example, this creates a connection that pings every 15 seconds and is\nretryable every 10 seconds if the connection is broken:\n\n```js\nvar es = new EventSource(request, response, {ping: 15, retry: 10});\n```\n\nYou can send a ping message at any time by calling `es.ping()`. Unlike WebSocket,\nthe client does not send a response to this; it is merely to send some data over\nthe wire to keep the connection alive.\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2009-2012 James Coglan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\nSoftware, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n","_id":"faye-websocket@0.4.2","dist":{"shasum":"fef4f9f2caadcfd92f3c4c8319c147c0b7dbbaeb","tarball":"http://registry.npmjs.org/faye-websocket/-/faye-websocket-0.4.2.tgz"},"maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"directories":{}},"0.4.3":{"name":"faye-websocket","description":"Standards-compliant WebSocket server and client","homepage":"http://github.com/faye/faye-websocket-node","author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"keywords":["websocket","eventsource"],"version":"0.4.3","engines":{"node":">=0.4.0"},"main":"./lib/faye/websocket","devDependencies":{"jsclass":""},"scripts":{"test":"node spec/runner.js"},"bugs":"http://github.com/faye/faye-websocket-node/issues","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"git://github.com/faye/faye-websocket-node.git"}],"readme":"# faye-websocket\n\n* Travis CI build: [<img src=\"https://secure.travis-ci.org/faye/faye-websocket-node.png\" />](http://travis-ci.org/faye/faye-websocket-node)\n* Autobahn tests: [server](http://faye.jcoglan.com/autobahn/servers/), [client](http://faye.jcoglan.com/autobahn/clients/)\n\nThis is a robust, general-purpose WebSocket implementation extracted from the\n[Faye](http://faye.jcoglan.com) project. It provides classes for easily building\nWebSocket servers and clients in Node. It does not provide a server itself, but\nrather makes it easy to handle WebSocket connections within an existing\n[Node](http://nodejs.org/) application. It does not provide any abstraction\nother than the standard [WebSocket API](http://dev.w3.org/html5/websockets/).\n\nIt also provides an abstraction for handling [EventSource](http://dev.w3.org/html5/eventsource/)\nconnections, which are one-way connections that allow the server to push data to\nthe client. They are based on streaming HTTP responses and can be easier to\naccess via proxies than WebSockets.\n\nThe server-side socket can process [draft-75](http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75),\n[draft-76](http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76),\n[hybi-07](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-07)\nand later versions of the protocol. It selects protocol versions automatically,\nsupports both `text` and `binary` messages, and transparently handles `ping`,\n`pong`, `close` and fragmented messages.\n\n\n## Handling WebSocket connections in Node\n\nYou can handle WebSockets on the server side by listening for HTTP Upgrade\nrequests, and creating a new socket for the request. This socket object exposes\nthe usual WebSocket methods for receiving and sending messages. For example this\nis how you'd implement an echo server:\n\n```js\nvar WebSocket = require('faye-websocket'),\n    http      = require('http');\n\nvar server = http.createServer();\n\nserver.addListener('upgrade', function(request, socket, head) {\n  var ws = new WebSocket(request, socket, head);\n  \n  ws.onmessage = function(event) {\n    ws.send(event.data);\n  };\n  \n  ws.onclose = function(event) {\n    console.log('close', event.code, event.reason);\n    ws = null;\n  };\n});\n\nserver.listen(8000);\n```\n\nNote that under certain circumstances (notably a draft-76 client connecting\nthrough an HTTP proxy), the WebSocket handshake will not be complete after you\ncall `new WebSocket()` because the server will not have received the entire\nhandshake from the client yet. In this case, calls to `ws.send()` will buffer\nthe message in memory until the handshake is complete, at which point any\nbuffered messages will be sent to the client.\n\nIf you need to detect when the WebSocket handshake is complete, you can use the\n`onopen` event.\n\nIf the connection's protocol version supports it, you can call `ws.ping()` to\nsend a ping message and wait for the client's response. This method takes a\nmessage string, and an optional callback that fires when a matching pong message\nis received. It returns `true` iff a ping message was sent. If the client does\nnot support ping/pong, this method sends no data and returns `false`.\n\n```js\nws.ping('Mic check, one, two', function() {\n  // fires when pong is received\n});\n```\n\n\n## Using the WebSocket client\n\nThe client supports both the plain-text `ws` protocol and the encrypted `wss`\nprotocol, and has exactly the same interface as a socket you would use in a web\nbrowser. On the wire it identifies itself as hybi-13.\n\n```js\nvar WebSocket = require('faye-websocket'),\n    ws        = new WebSocket.Client('ws://www.example.com/');\n\nws.onopen = function(event) {\n  console.log('open');\n  ws.send('Hello, world!');\n};\n\nws.onmessage = function(event) {\n  console.log('message', event.data);\n};\n\nws.onclose = function(event) {\n  console.log('close', event.code, event.reason);\n  ws = null;\n};\n```\n\n\n## Subprotocol negotiation\n\nThe WebSocket protocol allows peers to select and identify the application\nprotocol to use over the connection. On the client side, you can set which\nprotocols the client accepts by passing a list of protocol names when you\nconstruct the socket:\n\n```js\nvar ws = new WebSocket.Client('ws://www.example.com/', ['irc', 'amqp']);\n```\n\nOn the server side, you can likewise pass in the list of protocols the server\nsupports after the other constructor arguments:\n\n```js\nvar ws = new WebSocket(request, socket, head, ['irc', 'amqp']);\n```\n\nIf the client and server agree on a protocol, both the client- and server-side\nsocket objects expose the selected protocol through the `ws.protocol` property.\nIf they cannot agree on a protocol to use, the client closes the connection.\n\n\n## WebSocket API\n\nThe WebSocket API consists of several event handlers and a method for sending\nmessages.\n\n* <b><tt>onopen</tt></b> fires when the socket connection is established. Event\n  has no attributes.\n* <b><tt>onerror</tt></b> fires when the connection attempt fails. Event has no\n  attributes.\n* <b><tt>onmessage</tt></b> fires when the socket receives a message. Event has\n  one attribute, <b><tt>data</tt></b>, which is either a `String` (for text\n  frames) or a `Buffer` (for binary frames).\n* <b><tt>onclose</tt></b> fires when either the client or the server closes the\n  connection. Event has two optional attributes, <b><tt>code</tt></b> and\n  <b><tt>reason</tt></b>, that expose the status code and message sent by the\n  peer that closed the connection.\n* <b><tt>send(message)</tt></b> accepts either a `String` or a `Buffer` and\n  sends a text or binary message over the connection to the other peer.\n* <b><tt>close(code, reason)</tt></b> closes the connection, sending the given\n  status code and reason text, both of which are optional.\n* <b><tt>protocol</tt></b> is a string (which may be empty) identifying the\n  subprotocol the socket is using.\n\n\n## Handling EventSource connections in Node\n\nEventSource connections provide a very similar interface, although because they\nonly allow the server to send data to the client, there is no `onmessage` API.\nEventSource allows the server to push text messages to the client, where each\nmessage has an optional event-type and ID.\n\n```js\nvar WebSocket   = require('faye-websocket'),\n    EventSource = WebSocket.EventSource,\n    http        = require('http');\n\nvar server = http.createServer();\n\nserver.addListener('request', function(request, response) {\n  if (EventSource.isEventSource(request)) {\n    var es = new EventSource(request, response);\n    console.log('open', es.url, es.lastEventId);\n    \n    // Periodically send messages\n    var loop = setInterval(function() { es.send('Hello') }, 1000);\n    \n    es.onclose = function() {\n      clearInterval(loop);\n      es = null;\n    };\n  \n  } else {\n    // Normal HTTP request\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n    response.write('Hello');\n    response.end();\n  }\n});\n\nserver.listen(8000);\n```\n\nThe `send` method takes two optional parameters, `event` and `id`. The default\nevent-type is `'message'` with no ID. For example, to send a `notification`\nevent with ID `99`:\n\n```js\nes.send('Breaking News!', {event: 'notification', id: '99'});\n```\n\nThe `EventSource` object exposes the following properties:\n\n* <b><tt>url</tt></b> is a string containing the URL the client used to create\n  the EventSource.\n* <b><tt>lastEventId</tt></b> is a string containing the last event ID\n  received by the client. You can use this when the client reconnects after a\n  dropped connection to determine which messages need resending.\n\nWhen you initialize an EventSource with ` new EventSource()`, you can pass\nconfiguration options after the `response` parameter. Available options are:\n\n* <b><tt>retry</tt></b> is a number that tells the client how long (in seconds)\n  it should wait after a dropped connection before attempting to reconnect.\n* <b><tt>ping</tt></b> is a number that tells the server how often (in seconds)\n  to send 'ping' packets to the client to keep the connection open, to defeat\n  timeouts set by proxies. The client will ignore these messages.\n\nFor example, this creates a connection that pings every 15 seconds and is\nretryable every 10 seconds if the connection is broken:\n\n```js\nvar es = new EventSource(request, response, {ping: 15, retry: 10});\n```\n\nYou can send a ping message at any time by calling `es.ping()`. Unlike WebSocket,\nthe client does not send a response to this; it is merely to send some data over\nthe wire to keep the connection alive.\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2009-2012 James Coglan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\nSoftware, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n","_id":"faye-websocket@0.4.3","dist":{"shasum":"8a881b7976b3f19fcd0abff26377c610e95778de","tarball":"http://registry.npmjs.org/faye-websocket/-/faye-websocket-0.4.3.tgz"},"maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"directories":{}},"0.4.4":{"name":"faye-websocket","description":"Standards-compliant WebSocket server and client","homepage":"http://github.com/faye/faye-websocket-node","author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"keywords":["websocket","eventsource"],"version":"0.4.4","engines":{"node":">=0.4.0"},"main":"./lib/faye/websocket","devDependencies":{"jsclass":"","pace":""},"scripts":{"test":"node spec/runner.js"},"bugs":"http://github.com/faye/faye-websocket-node/issues","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"git://github.com/faye/faye-websocket-node.git"}],"readme":"# faye-websocket\n\n* Travis CI build: [<img src=\"https://secure.travis-ci.org/faye/faye-websocket-node.png\" />](http://travis-ci.org/faye/faye-websocket-node)\n* Autobahn tests: [server](http://faye.jcoglan.com/autobahn/servers/), [client](http://faye.jcoglan.com/autobahn/clients/)\n\nThis is a robust, general-purpose WebSocket implementation extracted from the\n[Faye](http://faye.jcoglan.com) project. It provides classes for easily building\nWebSocket servers and clients in Node. It does not provide a server itself, but\nrather makes it easy to handle WebSocket connections within an existing\n[Node](http://nodejs.org/) application. It does not provide any abstraction\nother than the standard [WebSocket API](http://dev.w3.org/html5/websockets/).\n\nIt also provides an abstraction for handling [EventSource](http://dev.w3.org/html5/eventsource/)\nconnections, which are one-way connections that allow the server to push data to\nthe client. They are based on streaming HTTP responses and can be easier to\naccess via proxies than WebSockets.\n\nThe server-side socket can process [draft-75](http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75),\n[draft-76](http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76),\n[hybi-07](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-07)\nand later versions of the protocol. It selects protocol versions automatically,\nsupports both `text` and `binary` messages, and transparently handles `ping`,\n`pong`, `close` and fragmented messages.\n\n\n## Handling WebSocket connections in Node\n\nYou can handle WebSockets on the server side by listening for HTTP Upgrade\nrequests, and creating a new socket for the request. This socket object exposes\nthe usual WebSocket methods for receiving and sending messages. For example this\nis how you'd implement an echo server:\n\n```js\nvar WebSocket = require('faye-websocket'),\n    http      = require('http');\n\nvar server = http.createServer();\n\nserver.addListener('upgrade', function(request, socket, head) {\n  var ws = new WebSocket(request, socket, head);\n  \n  ws.onmessage = function(event) {\n    ws.send(event.data);\n  };\n  \n  ws.onclose = function(event) {\n    console.log('close', event.code, event.reason);\n    ws = null;\n  };\n});\n\nserver.listen(8000);\n```\n\nNote that under certain circumstances (notably a draft-76 client connecting\nthrough an HTTP proxy), the WebSocket handshake will not be complete after you\ncall `new WebSocket()` because the server will not have received the entire\nhandshake from the client yet. In this case, calls to `ws.send()` will buffer\nthe message in memory until the handshake is complete, at which point any\nbuffered messages will be sent to the client.\n\nIf you need to detect when the WebSocket handshake is complete, you can use the\n`onopen` event.\n\nIf the connection's protocol version supports it, you can call `ws.ping()` to\nsend a ping message and wait for the client's response. This method takes a\nmessage string, and an optional callback that fires when a matching pong message\nis received. It returns `true` iff a ping message was sent. If the client does\nnot support ping/pong, this method sends no data and returns `false`.\n\n```js\nws.ping('Mic check, one, two', function() {\n  // fires when pong is received\n});\n```\n\n\n## Using the WebSocket client\n\nThe client supports both the plain-text `ws` protocol and the encrypted `wss`\nprotocol, and has exactly the same interface as a socket you would use in a web\nbrowser. On the wire it identifies itself as hybi-13.\n\n```js\nvar WebSocket = require('faye-websocket'),\n    ws        = new WebSocket.Client('ws://www.example.com/');\n\nws.onopen = function(event) {\n  console.log('open');\n  ws.send('Hello, world!');\n};\n\nws.onmessage = function(event) {\n  console.log('message', event.data);\n};\n\nws.onclose = function(event) {\n  console.log('close', event.code, event.reason);\n  ws = null;\n};\n```\n\n\n## Subprotocol negotiation\n\nThe WebSocket protocol allows peers to select and identify the application\nprotocol to use over the connection. On the client side, you can set which\nprotocols the client accepts by passing a list of protocol names when you\nconstruct the socket:\n\n```js\nvar ws = new WebSocket.Client('ws://www.example.com/', ['irc', 'amqp']);\n```\n\nOn the server side, you can likewise pass in the list of protocols the server\nsupports after the other constructor arguments:\n\n```js\nvar ws = new WebSocket(request, socket, head, ['irc', 'amqp']);\n```\n\nIf the client and server agree on a protocol, both the client- and server-side\nsocket objects expose the selected protocol through the `ws.protocol` property.\nIf they cannot agree on a protocol to use, the client closes the connection.\n\n\n## WebSocket API\n\nThe WebSocket API consists of several event handlers and a method for sending\nmessages.\n\n* <b><tt>onopen</tt></b> fires when the socket connection is established. Event\n  has no attributes.\n* <b><tt>onerror</tt></b> fires when the connection attempt fails. Event has no\n  attributes.\n* <b><tt>onmessage</tt></b> fires when the socket receives a message. Event has\n  one attribute, <b><tt>data</tt></b>, which is either a `String` (for text\n  frames) or a `Buffer` (for binary frames).\n* <b><tt>onclose</tt></b> fires when either the client or the server closes the\n  connection. Event has two optional attributes, <b><tt>code</tt></b> and\n  <b><tt>reason</tt></b>, that expose the status code and message sent by the\n  peer that closed the connection.\n* <b><tt>send(message)</tt></b> accepts either a `String` or a `Buffer` and\n  sends a text or binary message over the connection to the other peer.\n* <b><tt>close(code, reason)</tt></b> closes the connection, sending the given\n  status code and reason text, both of which are optional.\n* <b><tt>protocol</tt></b> is a string (which may be empty) identifying the\n  subprotocol the socket is using.\n\n\n## Handling EventSource connections in Node\n\nEventSource connections provide a very similar interface, although because they\nonly allow the server to send data to the client, there is no `onmessage` API.\nEventSource allows the server to push text messages to the client, where each\nmessage has an optional event-type and ID.\n\n```js\nvar WebSocket   = require('faye-websocket'),\n    EventSource = WebSocket.EventSource,\n    http        = require('http');\n\nvar server = http.createServer();\n\nserver.addListener('request', function(request, response) {\n  if (EventSource.isEventSource(request)) {\n    var es = new EventSource(request, response);\n    console.log('open', es.url, es.lastEventId);\n    \n    // Periodically send messages\n    var loop = setInterval(function() { es.send('Hello') }, 1000);\n    \n    es.onclose = function() {\n      clearInterval(loop);\n      es = null;\n    };\n  \n  } else {\n    // Normal HTTP request\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n    response.write('Hello');\n    response.end();\n  }\n});\n\nserver.listen(8000);\n```\n\nThe `send` method takes two optional parameters, `event` and `id`. The default\nevent-type is `'message'` with no ID. For example, to send a `notification`\nevent with ID `99`:\n\n```js\nes.send('Breaking News!', {event: 'notification', id: '99'});\n```\n\nThe `EventSource` object exposes the following properties:\n\n* <b><tt>url</tt></b> is a string containing the URL the client used to create\n  the EventSource.\n* <b><tt>lastEventId</tt></b> is a string containing the last event ID\n  received by the client. You can use this when the client reconnects after a\n  dropped connection to determine which messages need resending.\n\nWhen you initialize an EventSource with ` new EventSource()`, you can pass\nconfiguration options after the `response` parameter. Available options are:\n\n* <b><tt>retry</tt></b> is a number that tells the client how long (in seconds)\n  it should wait after a dropped connection before attempting to reconnect.\n* <b><tt>ping</tt></b> is a number that tells the server how often (in seconds)\n  to send 'ping' packets to the client to keep the connection open, to defeat\n  timeouts set by proxies. The client will ignore these messages.\n\nFor example, this creates a connection that pings every 15 seconds and is\nretryable every 10 seconds if the connection is broken:\n\n```js\nvar es = new EventSource(request, response, {ping: 15, retry: 10});\n```\n\nYou can send a ping message at any time by calling `es.ping()`. Unlike WebSocket,\nthe client does not send a response to this; it is merely to send some data over\nthe wire to keep the connection alive.\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2009-2013 James Coglan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\nSoftware, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n","readmeFilename":"README.markdown","_id":"faye-websocket@0.4.4","dist":{"shasum":"c14c5b3bf14d7417ffbfd990c0a7495cd9f337bc","tarball":"http://registry.npmjs.org/faye-websocket/-/faye-websocket-0.4.4.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"jcoglan","email":"jcoglan@gmail.com"},"maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"directories":{}},"0.5.0":{"name":"faye-websocket","description":"Standards-compliant WebSocket server and client","homepage":"http://github.com/faye/faye-websocket-node","author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"keywords":["websocket","eventsource"],"version":"0.5.0","engines":{"node":">=0.4.0"},"main":"./lib/faye/websocket","dependencies":{"websocket-driver":""},"devDependencies":{"jsclass":"","pace":""},"scripts":{"test":"node spec/runner.js"},"bugs":"http://github.com/faye/faye-websocket-node/issues","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"git://github.com/faye/faye-websocket-node.git"}],"readme":"# faye-websocket\n\n* Travis CI build: [![Build\n  status](https://secure.travis-ci.org/faye/faye-websocket-node.png)](http://travis-ci.org/faye/faye-websocket-node)\n* Autobahn tests: [server](http://faye.jcoglan.com/autobahn/servers/),\n  [client](http://faye.jcoglan.com/autobahn/clients/)\n\nThis is a general-purpose WebSocket implementation extracted from the\n[Faye](http://faye.jcoglan.com) project. It provides classes for easily\nbuilding WebSocket servers and clients in Node. It does not provide a server\nitself, but rather makes it easy to handle WebSocket connections within an\nexisting [Node](http://nodejs.org/) application. It does not provide any\nabstraction other than the standard [WebSocket\nAPI](http://dev.w3.org/html5/websockets/).\n\nIt also provides an abstraction for handling\n[EventSource](http://dev.w3.org/html5/eventsource/) connections, which are\none-way connections that allow the server to push data to the client. They are\nbased on streaming HTTP responses and can be easier to access via proxies than\nWebSockets.\n\n\n## Installation\n\n```\n$ npm install faye-websocket\n```\n\n\n## Handling WebSocket connections in Node\n\nYou can handle WebSockets on the server side by listening for HTTP Upgrade\nrequests, and creating a new socket for the request. This socket object exposes\nthe usual WebSocket methods for receiving and sending messages. For example this\nis how you'd implement an echo server:\n\n```js\nvar WebSocket = require('faye-websocket'),\n    http      = require('http');\n\nvar server = http.createServer();\n\nserver.on('upgrade', function(request, socket, body) {\n  if (WebSocket.isWebSocket(request)) {\n    var ws = new WebSocket(request, socket, body);\n    \n    ws.on('message', function(event) {\n      ws.send(event.data);\n    });\n    \n    ws.on('close', function(event) {\n      console.log('close', event.code, event.reason);\n      ws = null;\n    });\n\n  }\n});\n\nserver.listen(8000);\n```\n\nNote that under certain circumstances (notably a draft-76 client connecting\nthrough an HTTP proxy), the WebSocket handshake will not be complete after you\ncall `new WebSocket()` because the server will not have received the entire\nhandshake from the client yet. In this case, calls to `ws.send()` will buffer\nthe message in memory until the handshake is complete, at which point any\nbuffered messages will be sent to the client.\n\nIf you need to detect when the WebSocket handshake is complete, you can use the\n`onopen` event.\n\nIf the connection's protocol version supports it, you can call `ws.ping()` to\nsend a ping message and wait for the client's response. This method takes a\nmessage string, and an optional callback that fires when a matching pong\nmessage is received. It returns `true` iff a ping message was sent. If the\nclient does not support ping/pong, this method sends no data and returns\n`false`.\n\n```js\nws.ping('Mic check, one, two', function() {\n  // fires when pong is received\n});\n```\n\n\n## Using the WebSocket client\n\nThe client supports both the plain-text `ws` protocol and the encrypted `wss`\nprotocol, and has exactly the same interface as a socket you would use in a web\nbrowser. On the wire it identifies itself as `hybi-13`.\n\n```js\nvar WebSocket = require('faye-websocket'),\n    ws        = new WebSocket.Client('ws://www.example.com/');\n\nws.on('open', function(event) {\n  console.log('open');\n  ws.send('Hello, world!');\n});\n\nws.on('message', function(event) {\n  console.log('message', event.data);\n});\n\nws.on('close', function(event) {\n  console.log('close', event.code, event.reason);\n  ws = null;\n});\n```\n\n\n## Subprotocol negotiation\n\nThe WebSocket protocol allows peers to select and identify the application\nprotocol to use over the connection. On the client side, you can set which\nprotocols the client accepts by passing a list of protocol names when you\nconstruct the socket:\n\n```js\nvar ws = new WebSocket.Client('ws://www.example.com/', ['irc', 'amqp']);\n```\n\nOn the server side, you can likewise pass in the list of protocols the server\nsupports after the other constructor arguments:\n\n```js\nvar ws = new WebSocket(request, socket, body, ['irc', 'amqp']);\n```\n\nIf the client and server agree on a protocol, both the client- and server-side\nsocket objects expose the selected protocol through the `ws.protocol` property.\n\n\n## WebSocket API\n\nBoth server- and client-side `WebSocket` objects support the following API.\nThey are both readable and writable streams, so for example you can write an\necho server using `socket.pipe(socket)`.\n\n* <b>`on('open', function(event) {})`</b> fires when the socket connection is\n  established. Event has no attributes.\n* <b>`on('message', function(event) {})`</b> fires when the socket receives a\n  message. Event has one attribute, <b>`data`</b>, which is either a `String`\n  (for text frames) or a `Buffer` (for binary frames).\n* <b>`on('error', function(event) {})`</b> fires when there is a protocol error\n  due to bad data sent by the other peer. This event is purely informational,\n  you do not need to implement error recover.\n* <b>`on('close', function(event) {})`</b> fires when either the client or the\n  server closes the connection. Event has two optional attributes,\n  <b>`code`</b> and <b>`reason`</b>, that expose the status code and message\n  sent by the peer that closed the connection.\n* <b>`send(message)`</b> accepts either a `String` or a `Buffer` and sends a\n  text or binary message over the connection to the other peer.\n* <b>`ping(message = '', function() {})`</b> sends a ping frame with an\n  optional message and fires the callback when a matching pong is received.\n* <b>`close(code, reason)`</b> closes the connection, sending the given status\n  code and reason text, both of which are optional.\n* <b>`version`</b> is a string containing the version of the `WebSocket`\n  protocol the connection is using.\n* <b>`protocol`</b> is a string (which may be empty) identifying the\n  subprotocol the socket is using.\n\n\n## Handling EventSource connections in Node\n\nEventSource connections provide a very similar interface, although because they\nonly allow the server to send data to the client, there is no `onmessage` API.\nEventSource allows the server to push text messages to the client, where each\nmessage has an optional event-type and ID.\n\n```js\nvar WebSocket   = require('faye-websocket'),\n    EventSource = WebSocket.EventSource,\n    http        = require('http');\n\nvar server = http.createServer();\n\nserver.on('request', function(request, response) {\n  if (EventSource.isEventSource(request)) {\n    var es = new EventSource(request, response);\n    console.log('open', es.url, es.lastEventId);\n    \n    // Periodically send messages\n    var loop = setInterval(function() { es.send('Hello') }, 1000);\n    \n    es.on('close', function() {\n      clearInterval(loop);\n      es = null;\n    });\n  \n  } else {\n    // Normal HTTP request\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n    response.end('Hello');\n  }\n});\n\nserver.listen(8000);\n```\n\nThe `send` method takes two optional parameters, `event` and `id`. The default\nevent-type is `'message'` with no ID. For example, to send a `notification`\nevent with ID `99`:\n\n```js\nes.send('Breaking News!', {event: 'notification', id: '99'});\n```\n\nThe `EventSource` object exposes the following properties:\n\n* <b>`url`</b> is a string containing the URL the client used to create the\n  EventSource.\n* <b>`lastEventId`</b> is a string containing the last event ID received by the\n  client. You can use this when the client reconnects after a dropped\n  connection to determine which messages need resending.\n\nWhen you initialize an EventSource with ` new EventSource()`, you can pass\nconfiguration options after the `response` parameter. Available options are:\n\n* <b>`retry`</b> is a number that tells the client how long (in seconds) it\n  should wait after a dropped connection before attempting to reconnect.\n* <b>`ping`</b> is a number that tells the server how often (in seconds) to\n  send 'ping' packets to the client to keep the connection open, to defeat\n  timeouts set by proxies. The client will ignore these messages.\n\nFor example, this creates a connection that pings every 15 seconds and is\nretryable every 10 seconds if the connection is broken:\n\n```js\nvar es = new EventSource(request, response, {ping: 15, retry: 10});\n```\n\nYou can send a ping message at any time by calling `es.ping()`. Unlike\nWebSocket, the client does not send a response to this; it is merely to send\nsome data over the wire to keep the connection alive.\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2010-2013 James Coglan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n","readmeFilename":"README.md","_id":"faye-websocket@0.5.0","dist":{"shasum":"4fb370c03b806ffe6cde19063cf9f8c31cc37846","tarball":"http://registry.npmjs.org/faye-websocket/-/faye-websocket-0.5.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"jcoglan","email":"jcoglan@gmail.com"},"maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"directories":{}},"0.6.0":{"name":"faye-websocket","description":"Standards-compliant WebSocket server and client","homepage":"http://github.com/faye/faye-websocket-node","author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"keywords":["websocket","eventsource"],"version":"0.6.0","engines":{"node":">=0.4.0"},"main":"./lib/faye/websocket","dependencies":{"websocket-driver":">=0.2.0"},"devDependencies":{"jsclass":"","pace":""},"scripts":{"test":"node spec/runner.js"},"bugs":"http://github.com/faye/faye-websocket-node/issues","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/mit-license.php"}],"repositories":[{"type":"git","url":"git://github.com/faye/faye-websocket-node.git"}],"readme":"# faye-websocket\n\n* Travis CI build: [![Build\n  status](https://secure.travis-ci.org/faye/faye-websocket-node.png)](http://travis-ci.org/faye/faye-websocket-node)\n* Autobahn tests: [server](http://faye.jcoglan.com/autobahn/servers/),\n  [client](http://faye.jcoglan.com/autobahn/clients/)\n\nThis is a general-purpose WebSocket implementation extracted from the\n[Faye](http://faye.jcoglan.com) project. It provides classes for easily\nbuilding WebSocket servers and clients in Node. It does not provide a server\nitself, but rather makes it easy to handle WebSocket connections within an\nexisting [Node](http://nodejs.org/) application. It does not provide any\nabstraction other than the standard [WebSocket\nAPI](http://dev.w3.org/html5/websockets/).\n\nIt also provides an abstraction for handling\n[EventSource](http://dev.w3.org/html5/eventsource/) connections, which are\none-way connections that allow the server to push data to the client. They are\nbased on streaming HTTP responses and can be easier to access via proxies than\nWebSockets.\n\n\n## Installation\n\n```\n$ npm install faye-websocket\n```\n\n\n## Handling WebSocket connections in Node\n\nYou can handle WebSockets on the server side by listening for HTTP Upgrade\nrequests, and creating a new socket for the request. This socket object exposes\nthe usual WebSocket methods for receiving and sending messages. For example this\nis how you'd implement an echo server:\n\n```js\nvar WebSocket = require('faye-websocket'),\n    http      = require('http');\n\nvar server = http.createServer();\n\nserver.on('upgrade', function(request, socket, body) {\n  if (WebSocket.isWebSocket(request)) {\n    var ws = new WebSocket(request, socket, body);\n    \n    ws.on('message', function(event) {\n      ws.send(event.data);\n    });\n    \n    ws.on('close', function(event) {\n      console.log('close', event.code, event.reason);\n      ws = null;\n    });\n  }\n});\n\nserver.listen(8000);\n```\n\n`WebSocket` objects are also duplex streams, so you could replace the\n`ws.on('message', ...)` line with:\n\n```js\n    ws.pipe(ws);\n```\n\nNote that under certain circumstances (notably a draft-76 client connecting\nthrough an HTTP proxy), the WebSocket handshake will not be complete after you\ncall `new WebSocket()` because the server will not have received the entire\nhandshake from the client yet. In this case, calls to `ws.send()` will buffer\nthe message in memory until the handshake is complete, at which point any\nbuffered messages will be sent to the client.\n\nIf you need to detect when the WebSocket handshake is complete, you can use the\n`onopen` event.\n\nIf the connection's protocol version supports it, you can call `ws.ping()` to\nsend a ping message and wait for the client's response. This method takes a\nmessage string, and an optional callback that fires when a matching pong\nmessage is received. It returns `true` iff a ping message was sent. If the\nclient does not support ping/pong, this method sends no data and returns\n`false`.\n\n```js\nws.ping('Mic check, one, two', function() {\n  // fires when pong is received\n});\n```\n\n\n## Using the WebSocket client\n\nThe client supports both the plain-text `ws` protocol and the encrypted `wss`\nprotocol, and has exactly the same interface as a socket you would use in a web\nbrowser. On the wire it identifies itself as `hybi-13`.\n\n```js\nvar WebSocket = require('faye-websocket'),\n    ws        = new WebSocket.Client('ws://www.example.com/');\n\nws.on('open', function(event) {\n  console.log('open');\n  ws.send('Hello, world!');\n});\n\nws.on('message', function(event) {\n  console.log('message', event.data);\n});\n\nws.on('close', function(event) {\n  console.log('close', event.code, event.reason);\n  ws = null;\n});\n```\n\nThe WebSocket client also lets you inspect the status and headers of the\nhandshake response via its `statusCode` and `headers` properties.\n\n\n## Subprotocol negotiation\n\nThe WebSocket protocol allows peers to select and identify the application\nprotocol to use over the connection. On the client side, you can set which\nprotocols the client accepts by passing a list of protocol names when you\nconstruct the socket:\n\n```js\nvar ws = new WebSocket.Client('ws://www.example.com/', ['irc', 'amqp']);\n```\n\nOn the server side, you can likewise pass in the list of protocols the server\nsupports after the other constructor arguments:\n\n```js\nvar ws = new WebSocket(request, socket, body, ['irc', 'amqp']);\n```\n\nIf the client and server agree on a protocol, both the client- and server-side\nsocket objects expose the selected protocol through the `ws.protocol` property.\n\n\n## Initialization options\n\nBoth the server- and client-side classes allow an options object to be passed\nin at initialization time, for example:\n\n```js\nvar ws = new WebSocket(request, socket, body, protocols, options);\nvar ws = new WebSocket.Client(url, protocols, options);\n```\n\n`protocols` is an array of subprotocols as described above, or `null`.\n`options` is an optional object containing any of these fields:\n\n* `headers` - an object containing key-value pairs representing HTTP headers to\n  be sent during the handshake process\n* `ping` - an integer that sets how often the WebSocket should send ping\n  frames, measured in seconds\n\n\n## WebSocket API\n\nBoth server- and client-side `WebSocket` objects support the following API.\n\n* <b>`on('open', function(event) {})`</b> fires when the socket connection is\n  established. Event has no attributes.\n* <b>`on('message', function(event) {})`</b> fires when the socket receives a\n  message. Event has one attribute, <b>`data`</b>, which is either a `String`\n  (for text frames) or a `Buffer` (for binary frames).\n* <b>`on('error', function(event) {})`</b> fires when there is a protocol error\n  due to bad data sent by the other peer. This event is purely informational,\n  you do not need to implement error recover.\n* <b>`on('close', function(event) {})`</b> fires when either the client or the\n  server closes the connection. Event has two optional attributes,\n  <b>`code`</b> and <b>`reason`</b>, that expose the status code and message\n  sent by the peer that closed the connection.\n* <b>`send(message)`</b> accepts either a `String` or a `Buffer` and sends a\n  text or binary message over the connection to the other peer.\n* <b>`ping(message = '', function() {})`</b> sends a ping frame with an\n  optional message and fires the callback when a matching pong is received.\n* <b>`close(code, reason)`</b> closes the connection, sending the given status\n  code and reason text, both of which are optional.\n* <b>`version`</b> is a string containing the version of the `WebSocket`\n  protocol the connection is using.\n* <b>`protocol`</b> is a string (which may be empty) identifying the\n  subprotocol the socket is using.\n\n\n## Handling EventSource connections in Node\n\nEventSource connections provide a very similar interface, although because they\nonly allow the server to send data to the client, there is no `onmessage` API.\nEventSource allows the server to push text messages to the client, where each\nmessage has an optional event-type and ID.\n\n```js\nvar WebSocket   = require('faye-websocket'),\n    EventSource = WebSocket.EventSource,\n    http        = require('http');\n\nvar server = http.createServer();\n\nserver.on('request', function(request, response) {\n  if (EventSource.isEventSource(request)) {\n    var es = new EventSource(request, response);\n    console.log('open', es.url, es.lastEventId);\n    \n    // Periodically send messages\n    var loop = setInterval(function() { es.send('Hello') }, 1000);\n    \n    es.on('close', function() {\n      clearInterval(loop);\n      es = null;\n    });\n  \n  } else {\n    // Normal HTTP request\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n    response.end('Hello');\n  }\n});\n\nserver.listen(8000);\n```\n\nThe `send` method takes two optional parameters, `event` and `id`. The default\nevent-type is `'message'` with no ID. For example, to send a `notification`\nevent with ID `99`:\n\n```js\nes.send('Breaking News!', {event: 'notification', id: '99'});\n```\n\nThe `EventSource` object exposes the following properties:\n\n* <b>`url`</b> is a string containing the URL the client used to create the\n  EventSource.\n* <b>`lastEventId`</b> is a string containing the last event ID received by the\n  client. You can use this when the client reconnects after a dropped\n  connection to determine which messages need resending.\n\nWhen you initialize an EventSource with ` new EventSource()`, you can pass\nconfiguration options after the `response` parameter. Available options are:\n\n* <b>`retry`</b> is a number that tells the client how long (in seconds) it\n  should wait after a dropped connection before attempting to reconnect.\n* <b>`ping`</b> is a number that tells the server how often (in seconds) to\n  send 'ping' packets to the client to keep the connection open, to defeat\n  timeouts set by proxies. The client will ignore these messages.\n\nFor example, this creates a connection that pings every 15 seconds and is\nretryable every 10 seconds if the connection is broken:\n\n```js\nvar es = new EventSource(request, response, {ping: 15, retry: 10});\n```\n\nYou can send a ping message at any time by calling `es.ping()`. Unlike\nWebSocket, the client does not send a response to this; it is merely to send\nsome data over the wire to keep the connection alive.\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2010-2013 James Coglan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n","readmeFilename":"README.md","_id":"faye-websocket@0.6.0","dist":{"shasum":"4d0b0e8ed35880f6a81d2bd1eae643c5e48d5da7","tarball":"http://registry.npmjs.org/faye-websocket/-/faye-websocket-0.6.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"jcoglan","email":"jcoglan@gmail.com"},"maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"directories":{}},"0.6.1":{"name":"faye-websocket","description":"Standards-compliant WebSocket server and client","homepage":"http://github.com/faye/faye-websocket-node","author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"keywords":["websocket","eventsource"],"license":"MIT","version":"0.6.1","engines":{"node":">=0.4.0"},"main":"./lib/faye/websocket","dependencies":{"websocket-driver":">=0.2.0"},"devDependencies":{"jstest":"","pace":""},"scripts":{"test":"jstest spec/runner.js"},"repository":{"type":"git","url":"git://github.com/faye/faye-websocket-node.git"},"bugs":{"url":"http://github.com/faye/faye-websocket-node/issues"},"readme":"# faye-websocket\n\n* Travis CI build: [![Build\n  status](https://secure.travis-ci.org/faye/faye-websocket-node.png)](http://travis-ci.org/faye/faye-websocket-node)\n* Autobahn tests: [server](http://faye.jcoglan.com/autobahn/servers/),\n  [client](http://faye.jcoglan.com/autobahn/clients/)\n\nThis is a general-purpose WebSocket implementation extracted from the\n[Faye](http://faye.jcoglan.com) project. It provides classes for easily\nbuilding WebSocket servers and clients in Node. It does not provide a server\nitself, but rather makes it easy to handle WebSocket connections within an\nexisting [Node](http://nodejs.org/) application. It does not provide any\nabstraction other than the standard [WebSocket\nAPI](http://dev.w3.org/html5/websockets/).\n\nIt also provides an abstraction for handling\n[EventSource](http://dev.w3.org/html5/eventsource/) connections, which are\none-way connections that allow the server to push data to the client. They are\nbased on streaming HTTP responses and can be easier to access via proxies than\nWebSockets.\n\n\n## Installation\n\n```\n$ npm install faye-websocket\n```\n\n\n## Handling WebSocket connections in Node\n\nYou can handle WebSockets on the server side by listening for HTTP Upgrade\nrequests, and creating a new socket for the request. This socket object exposes\nthe usual WebSocket methods for receiving and sending messages. For example this\nis how you'd implement an echo server:\n\n```js\nvar WebSocket = require('faye-websocket'),\n    http      = require('http');\n\nvar server = http.createServer();\n\nserver.on('upgrade', function(request, socket, body) {\n  if (WebSocket.isWebSocket(request)) {\n    var ws = new WebSocket(request, socket, body);\n    \n    ws.on('message', function(event) {\n      ws.send(event.data);\n    });\n    \n    ws.on('close', function(event) {\n      console.log('close', event.code, event.reason);\n      ws = null;\n    });\n  }\n});\n\nserver.listen(8000);\n```\n\n`WebSocket` objects are also duplex streams, so you could replace the\n`ws.on('message', ...)` line with:\n\n```js\n    ws.pipe(ws);\n```\n\nNote that under certain circumstances (notably a draft-76 client connecting\nthrough an HTTP proxy), the WebSocket handshake will not be complete after you\ncall `new WebSocket()` because the server will not have received the entire\nhandshake from the client yet. In this case, calls to `ws.send()` will buffer\nthe message in memory until the handshake is complete, at which point any\nbuffered messages will be sent to the client.\n\nIf you need to detect when the WebSocket handshake is complete, you can use the\n`onopen` event.\n\nIf the connection's protocol version supports it, you can call `ws.ping()` to\nsend a ping message and wait for the client's response. This method takes a\nmessage string, and an optional callback that fires when a matching pong\nmessage is received. It returns `true` iff a ping message was sent. If the\nclient does not support ping/pong, this method sends no data and returns\n`false`.\n\n```js\nws.ping('Mic check, one, two', function() {\n  // fires when pong is received\n});\n```\n\n\n## Using the WebSocket client\n\nThe client supports both the plain-text `ws` protocol and the encrypted `wss`\nprotocol, and has exactly the same interface as a socket you would use in a web\nbrowser. On the wire it identifies itself as `hybi-13`.\n\n```js\nvar WebSocket = require('faye-websocket'),\n    ws        = new WebSocket.Client('ws://www.example.com/');\n\nws.on('open', function(event) {\n  console.log('open');\n  ws.send('Hello, world!');\n});\n\nws.on('message', function(event) {\n  console.log('message', event.data);\n});\n\nws.on('close', function(event) {\n  console.log('close', event.code, event.reason);\n  ws = null;\n});\n```\n\nThe WebSocket client also lets you inspect the status and headers of the\nhandshake response via its `statusCode` and `headers` properties.\n\n\n## Subprotocol negotiation\n\nThe WebSocket protocol allows peers to select and identify the application\nprotocol to use over the connection. On the client side, you can set which\nprotocols the client accepts by passing a list of protocol names when you\nconstruct the socket:\n\n```js\nvar ws = new WebSocket.Client('ws://www.example.com/', ['irc', 'amqp']);\n```\n\nOn the server side, you can likewise pass in the list of protocols the server\nsupports after the other constructor arguments:\n\n```js\nvar ws = new WebSocket(request, socket, body, ['irc', 'amqp']);\n```\n\nIf the client and server agree on a protocol, both the client- and server-side\nsocket objects expose the selected protocol through the `ws.protocol` property.\n\n\n## Initialization options\n\nBoth the server- and client-side classes allow an options object to be passed\nin at initialization time, for example:\n\n```js\nvar ws = new WebSocket(request, socket, body, protocols, options);\nvar ws = new WebSocket.Client(url, protocols, options);\n```\n\n`protocols` is an array of subprotocols as described above, or `null`.\n`options` is an optional object containing any of these fields:\n\n* `headers` - an object containing key-value pairs representing HTTP headers to\n  be sent during the handshake process\n* `ping` - an integer that sets how often the WebSocket should send ping\n  frames, measured in seconds\n\n\n## WebSocket API\n\nBoth server- and client-side `WebSocket` objects support the following API.\n\n* <b>`on('open', function(event) {})`</b> fires when the socket connection is\n  established. Event has no attributes.\n* <b>`on('message', function(event) {})`</b> fires when the socket receives a\n  message. Event has one attribute, <b>`data`</b>, which is either a `String`\n  (for text frames) or a `Buffer` (for binary frames).\n* <b>`on('error', function(event) {})`</b> fires when there is a protocol error\n  due to bad data sent by the other peer. This event is purely informational,\n  you do not need to implement error recover.\n* <b>`on('close', function(event) {})`</b> fires when either the client or the\n  server closes the connection. Event has two optional attributes,\n  <b>`code`</b> and <b>`reason`</b>, that expose the status code and message\n  sent by the peer that closed the connection.\n* <b>`send(message)`</b> accepts either a `String` or a `Buffer` and sends a\n  text or binary message over the connection to the other peer.\n* <b>`ping(message = '', function() {})`</b> sends a ping frame with an\n  optional message and fires the callback when a matching pong is received.\n* <b>`close(code, reason)`</b> closes the connection, sending the given status\n  code and reason text, both of which are optional.\n* <b>`version`</b> is a string containing the version of the `WebSocket`\n  protocol the connection is using.\n* <b>`protocol`</b> is a string (which may be empty) identifying the\n  subprotocol the socket is using.\n\n\n## Handling EventSource connections in Node\n\nEventSource connections provide a very similar interface, although because they\nonly allow the server to send data to the client, there is no `onmessage` API.\nEventSource allows the server to push text messages to the client, where each\nmessage has an optional event-type and ID.\n\n```js\nvar WebSocket   = require('faye-websocket'),\n    EventSource = WebSocket.EventSource,\n    http        = require('http');\n\nvar server = http.createServer();\n\nserver.on('request', function(request, response) {\n  if (EventSource.isEventSource(request)) {\n    var es = new EventSource(request, response);\n    console.log('open', es.url, es.lastEventId);\n    \n    // Periodically send messages\n    var loop = setInterval(function() { es.send('Hello') }, 1000);\n    \n    es.on('close', function() {\n      clearInterval(loop);\n      es = null;\n    });\n  \n  } else {\n    // Normal HTTP request\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n    response.end('Hello');\n  }\n});\n\nserver.listen(8000);\n```\n\nThe `send` method takes two optional parameters, `event` and `id`. The default\nevent-type is `'message'` with no ID. For example, to send a `notification`\nevent with ID `99`:\n\n```js\nes.send('Breaking News!', {event: 'notification', id: '99'});\n```\n\nThe `EventSource` object exposes the following properties:\n\n* <b>`url`</b> is a string containing the URL the client used to create the\n  EventSource.\n* <b>`lastEventId`</b> is a string containing the last event ID received by the\n  client. You can use this when the client reconnects after a dropped\n  connection to determine which messages need resending.\n\nWhen you initialize an EventSource with ` new EventSource()`, you can pass\nconfiguration options after the `response` parameter. Available options are:\n\n* <b>`retry`</b> is a number that tells the client how long (in seconds) it\n  should wait after a dropped connection before attempting to reconnect.\n* <b>`ping`</b> is a number that tells the server how often (in seconds) to\n  send 'ping' packets to the client to keep the connection open, to defeat\n  timeouts set by proxies. The client will ignore these messages.\n\nFor example, this creates a connection that pings every 15 seconds and is\nretryable every 10 seconds if the connection is broken:\n\n```js\nvar es = new EventSource(request, response, {ping: 15, retry: 10});\n```\n\nYou can send a ping message at any time by calling `es.ping()`. Unlike\nWebSocket, the client does not send a response to this; it is merely to send\nsome data over the wire to keep the connection alive.\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2010-2013 James Coglan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n","readmeFilename":"README.md","_id":"faye-websocket@0.6.1","dist":{"shasum":"43a54b2ab807761d7ec335d12f48eb69ec4ab61c","tarball":"http://registry.npmjs.org/faye-websocket/-/faye-websocket-0.6.1.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"jcoglan","email":"jcoglan@gmail.com"},"maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"directories":{}},"0.7.0":{"name":"faye-websocket","description":"Standards-compliant WebSocket server and client","homepage":"http://github.com/faye/faye-websocket-node","author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"keywords":["websocket","eventsource"],"license":"MIT","version":"0.7.0","engines":{"node":">=0.4.0"},"main":"./lib/faye/websocket","dependencies":{"websocket-driver":">=0.3.0"},"devDependencies":{"jstest":"","pace":""},"scripts":{"test":"jstest spec/runner.js"},"repository":{"type":"git","url":"git://github.com/faye/faye-websocket-node.git"},"bugs":{"url":"http://github.com/faye/faye-websocket-node/issues"},"readme":"# faye-websocket\n\n* Travis CI build: [![Build\n  status](https://secure.travis-ci.org/faye/faye-websocket-node.png)](http://travis-ci.org/faye/faye-websocket-node)\n* Autobahn tests: [server](http://faye.jcoglan.com/autobahn/servers/),\n  [client](http://faye.jcoglan.com/autobahn/clients/)\n\nThis is a general-purpose WebSocket implementation extracted from the\n[Faye](http://faye.jcoglan.com) project. It provides classes for easily\nbuilding WebSocket servers and clients in Node. It does not provide a server\nitself, but rather makes it easy to handle WebSocket connections within an\nexisting [Node](http://nodejs.org/) application. It does not provide any\nabstraction other than the standard [WebSocket\nAPI](http://dev.w3.org/html5/websockets/).\n\nIt also provides an abstraction for handling\n[EventSource](http://dev.w3.org/html5/eventsource/) connections, which are\none-way connections that allow the server to push data to the client. They are\nbased on streaming HTTP responses and can be easier to access via proxies than\nWebSockets.\n\n\n## Installation\n\n```\n$ npm install faye-websocket\n```\n\n\n## Handling WebSocket connections in Node\n\nYou can handle WebSockets on the server side by listening for HTTP Upgrade\nrequests, and creating a new socket for the request. This socket object exposes\nthe usual WebSocket methods for receiving and sending messages. For example this\nis how you'd implement an echo server:\n\n```js\nvar WebSocket = require('faye-websocket'),\n    http      = require('http');\n\nvar server = http.createServer();\n\nserver.on('upgrade', function(request, socket, body) {\n  if (WebSocket.isWebSocket(request)) {\n    var ws = new WebSocket(request, socket, body);\n    \n    ws.on('message', function(event) {\n      ws.send(event.data);\n    });\n    \n    ws.on('close', function(event) {\n      console.log('close', event.code, event.reason);\n      ws = null;\n    });\n  }\n});\n\nserver.listen(8000);\n```\n\n`WebSocket` objects are also duplex streams, so you could replace the\n`ws.on('message', ...)` line with:\n\n```js\n    ws.pipe(ws);\n```\n\nNote that under certain circumstances (notably a draft-76 client connecting\nthrough an HTTP proxy), the WebSocket handshake will not be complete after you\ncall `new WebSocket()` because the server will not have received the entire\nhandshake from the client yet. In this case, calls to `ws.send()` will buffer\nthe message in memory until the handshake is complete, at which point any\nbuffered messages will be sent to the client.\n\nIf you need to detect when the WebSocket handshake is complete, you can use the\n`onopen` event.\n\nIf the connection's protocol version supports it, you can call `ws.ping()` to\nsend a ping message and wait for the client's response. This method takes a\nmessage string, and an optional callback that fires when a matching pong\nmessage is received. It returns `true` iff a ping message was sent. If the\nclient does not support ping/pong, this method sends no data and returns\n`false`.\n\n```js\nws.ping('Mic check, one, two', function() {\n  // fires when pong is received\n});\n```\n\n\n## Using the WebSocket client\n\nThe client supports both the plain-text `ws` protocol and the encrypted `wss`\nprotocol, and has exactly the same interface as a socket you would use in a web\nbrowser. On the wire it identifies itself as `hybi-13`.\n\n```js\nvar WebSocket = require('faye-websocket'),\n    ws        = new WebSocket.Client('ws://www.example.com/');\n\nws.on('open', function(event) {\n  console.log('open');\n  ws.send('Hello, world!');\n});\n\nws.on('message', function(event) {\n  console.log('message', event.data);\n});\n\nws.on('close', function(event) {\n  console.log('close', event.code, event.reason);\n  ws = null;\n});\n```\n\nThe WebSocket client also lets you inspect the status and headers of the\nhandshake response via its `statusCode` and `headers` properties.\n\n\n## Subprotocol negotiation\n\nThe WebSocket protocol allows peers to select and identify the application\nprotocol to use over the connection. On the client side, you can set which\nprotocols the client accepts by passing a list of protocol names when you\nconstruct the socket:\n\n```js\nvar ws = new WebSocket.Client('ws://www.example.com/', ['irc', 'amqp']);\n```\n\nOn the server side, you can likewise pass in the list of protocols the server\nsupports after the other constructor arguments:\n\n```js\nvar ws = new WebSocket(request, socket, body, ['irc', 'amqp']);\n```\n\nIf the client and server agree on a protocol, both the client- and server-side\nsocket objects expose the selected protocol through the `ws.protocol` property.\n\n\n## Initialization options\n\nBoth the server- and client-side classes allow an options object to be passed\nin at initialization time, for example:\n\n```js\nvar ws = new WebSocket(request, socket, body, protocols, options);\nvar ws = new WebSocket.Client(url, protocols, options);\n```\n\n`protocols` is an array of subprotocols as described above, or `null`.\n`options` is an optional object containing any of these fields:\n\n* `headers` - an object containing key-value pairs representing HTTP headers to\n  be sent during the handshake process\n* `ping` - an integer that sets how often the WebSocket should send ping\n  frames, measured in seconds\n\n\n## WebSocket API\n\nBoth server- and client-side `WebSocket` objects support the following API.\n\n* <b>`on('open', function(event) {})`</b> fires when the socket connection is\n  established. Event has no attributes.\n* <b>`on('message', function(event) {})`</b> fires when the socket receives a\n  message. Event has one attribute, <b>`data`</b>, which is either a `String`\n  (for text frames) or a `Buffer` (for binary frames).\n* <b>`on('error', function(event) {})`</b> fires when there is a protocol error\n  due to bad data sent by the other peer. This event is purely informational,\n  you do not need to implement error recover.\n* <b>`on('close', function(event) {})`</b> fires when either the client or the\n  server closes the connection. Event has two optional attributes,\n  <b>`code`</b> and <b>`reason`</b>, that expose the status code and message\n  sent by the peer that closed the connection.\n* <b>`send(message)`</b> accepts either a `String` or a `Buffer` and sends a\n  text or binary message over the connection to the other peer.\n* <b>`ping(message = '', function() {})`</b> sends a ping frame with an\n  optional message and fires the callback when a matching pong is received.\n* <b>`close(code, reason)`</b> closes the connection, sending the given status\n  code and reason text, both of which are optional.\n* <b>`version`</b> is a string containing the version of the `WebSocket`\n  protocol the connection is using.\n* <b>`protocol`</b> is a string (which may be empty) identifying the\n  subprotocol the socket is using.\n\n\n## Handling EventSource connections in Node\n\nEventSource connections provide a very similar interface, although because they\nonly allow the server to send data to the client, there is no `onmessage` API.\nEventSource allows the server to push text messages to the client, where each\nmessage has an optional event-type and ID.\n\n```js\nvar WebSocket   = require('faye-websocket'),\n    EventSource = WebSocket.EventSource,\n    http        = require('http');\n\nvar server = http.createServer();\n\nserver.on('request', function(request, response) {\n  if (EventSource.isEventSource(request)) {\n    var es = new EventSource(request, response);\n    console.log('open', es.url, es.lastEventId);\n    \n    // Periodically send messages\n    var loop = setInterval(function() { es.send('Hello') }, 1000);\n    \n    es.on('close', function() {\n      clearInterval(loop);\n      es = null;\n    });\n  \n  } else {\n    // Normal HTTP request\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n    response.end('Hello');\n  }\n});\n\nserver.listen(8000);\n```\n\nThe `send` method takes two optional parameters, `event` and `id`. The default\nevent-type is `'message'` with no ID. For example, to send a `notification`\nevent with ID `99`:\n\n```js\nes.send('Breaking News!', {event: 'notification', id: '99'});\n```\n\nThe `EventSource` object exposes the following properties:\n\n* <b>`url`</b> is a string containing the URL the client used to create the\n  EventSource.\n* <b>`lastEventId`</b> is a string containing the last event ID received by the\n  client. You can use this when the client reconnects after a dropped\n  connection to determine which messages need resending.\n\nWhen you initialize an EventSource with ` new EventSource()`, you can pass\nconfiguration options after the `response` parameter. Available options are:\n\n* <b>`headers`</b> is an object containing custom headers to be set on the\n  EventSource response.\n* <b>`retry`</b> is a number that tells the client how long (in seconds) it\n  should wait after a dropped connection before attempting to reconnect.\n* <b>`ping`</b> is a number that tells the server how often (in seconds) to\n  send 'ping' packets to the client to keep the connection open, to defeat\n  timeouts set by proxies. The client will ignore these messages.\n\nFor example, this creates a connection that allows access from any origin, pings\nevery 15 seconds and is retryable every 10 seconds if the connection is broken:\n\n```js\nvar es = new EventSource(request, response, {\n  headers: {'Access-Control-Allow-Origin': '*'},\n  ping:    15,\n  retry:   10\n});\n```\n\nYou can send a ping message at any time by calling `es.ping()`. Unlike\nWebSocket, the client does not send a response to this; it is merely to send\nsome data over the wire to keep the connection alive.\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2010-2013 James Coglan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n","readmeFilename":"README.md","_id":"faye-websocket@0.7.0","dist":{"shasum":"c16c50ec0d483357a8eafd1ec6fcc313d027f5be","tarball":"http://registry.npmjs.org/faye-websocket/-/faye-websocket-0.7.0.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"jcoglan","email":"jcoglan@gmail.com"},"maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"directories":{}},"0.7.1":{"name":"faye-websocket","description":"Standards-compliant WebSocket server and client","homepage":"http://github.com/faye/faye-websocket-node","author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"keywords":["websocket","eventsource"],"license":"MIT","version":"0.7.1","engines":{"node":">=0.4.0"},"main":"./lib/faye/websocket","dependencies":{"websocket-driver":">=0.3.1"},"devDependencies":{"jstest":"","pace":""},"scripts":{"test":"jstest spec/runner.js"},"repository":{"type":"git","url":"git://github.com/faye/faye-websocket-node.git"},"bugs":{"url":"http://github.com/faye/faye-websocket-node/issues"},"readme":"# faye-websocket\n\n* Travis CI build: [![Build\n  status](https://secure.travis-ci.org/faye/faye-websocket-node.png)](http://travis-ci.org/faye/faye-websocket-node)\n* Autobahn tests: [server](http://faye.jcoglan.com/autobahn/servers/),\n  [client](http://faye.jcoglan.com/autobahn/clients/)\n\nThis is a general-purpose WebSocket implementation extracted from the\n[Faye](http://faye.jcoglan.com) project. It provides classes for easily\nbuilding WebSocket servers and clients in Node. It does not provide a server\nitself, but rather makes it easy to handle WebSocket connections within an\nexisting [Node](http://nodejs.org/) application. It does not provide any\nabstraction other than the standard [WebSocket\nAPI](http://dev.w3.org/html5/websockets/).\n\nIt also provides an abstraction for handling\n[EventSource](http://dev.w3.org/html5/eventsource/) connections, which are\none-way connections that allow the server to push data to the client. They are\nbased on streaming HTTP responses and can be easier to access via proxies than\nWebSockets.\n\n\n## Installation\n\n```\n$ npm install faye-websocket\n```\n\n\n## Handling WebSocket connections in Node\n\nYou can handle WebSockets on the server side by listening for HTTP Upgrade\nrequests, and creating a new socket for the request. This socket object exposes\nthe usual WebSocket methods for receiving and sending messages. For example this\nis how you'd implement an echo server:\n\n```js\nvar WebSocket = require('faye-websocket'),\n    http      = require('http');\n\nvar server = http.createServer();\n\nserver.on('upgrade', function(request, socket, body) {\n  if (WebSocket.isWebSocket(request)) {\n    var ws = new WebSocket(request, socket, body);\n    \n    ws.on('message', function(event) {\n      ws.send(event.data);\n    });\n    \n    ws.on('close', function(event) {\n      console.log('close', event.code, event.reason);\n      ws = null;\n    });\n  }\n});\n\nserver.listen(8000);\n```\n\n`WebSocket` objects are also duplex streams, so you could replace the\n`ws.on('message', ...)` line with:\n\n```js\n    ws.pipe(ws);\n```\n\nNote that under certain circumstances (notably a draft-76 client connecting\nthrough an HTTP proxy), the WebSocket handshake will not be complete after you\ncall `new WebSocket()` because the server will not have received the entire\nhandshake from the client yet. In this case, calls to `ws.send()` will buffer\nthe message in memory until the handshake is complete, at which point any\nbuffered messages will be sent to the client.\n\nIf you need to detect when the WebSocket handshake is complete, you can use the\n`onopen` event.\n\nIf the connection's protocol version supports it, you can call `ws.ping()` to\nsend a ping message and wait for the client's response. This method takes a\nmessage string, and an optional callback that fires when a matching pong\nmessage is received. It returns `true` iff a ping message was sent. If the\nclient does not support ping/pong, this method sends no data and returns\n`false`.\n\n```js\nws.ping('Mic check, one, two', function() {\n  // fires when pong is received\n});\n```\n\n\n## Using the WebSocket client\n\nThe client supports both the plain-text `ws` protocol and the encrypted `wss`\nprotocol, and has exactly the same interface as a socket you would use in a web\nbrowser. On the wire it identifies itself as `hybi-13`.\n\n```js\nvar WebSocket = require('faye-websocket'),\n    ws        = new WebSocket.Client('ws://www.example.com/');\n\nws.on('open', function(event) {\n  console.log('open');\n  ws.send('Hello, world!');\n});\n\nws.on('message', function(event) {\n  console.log('message', event.data);\n});\n\nws.on('close', function(event) {\n  console.log('close', event.code, event.reason);\n  ws = null;\n});\n```\n\nThe WebSocket client also lets you inspect the status and headers of the\nhandshake response via its `statusCode` and `headers` properties.\n\n\n## Subprotocol negotiation\n\nThe WebSocket protocol allows peers to select and identify the application\nprotocol to use over the connection. On the client side, you can set which\nprotocols the client accepts by passing a list of protocol names when you\nconstruct the socket:\n\n```js\nvar ws = new WebSocket.Client('ws://www.example.com/', ['irc', 'amqp']);\n```\n\nOn the server side, you can likewise pass in the list of protocols the server\nsupports after the other constructor arguments:\n\n```js\nvar ws = new WebSocket(request, socket, body, ['irc', 'amqp']);\n```\n\nIf the client and server agree on a protocol, both the client- and server-side\nsocket objects expose the selected protocol through the `ws.protocol` property.\n\n\n## Initialization options\n\nBoth the server- and client-side classes allow an options object to be passed\nin at initialization time, for example:\n\n```js\nvar ws = new WebSocket(request, socket, body, protocols, options);\nvar ws = new WebSocket.Client(url, protocols, options);\n```\n\n`protocols` is an array of subprotocols as described above, or `null`.\n`options` is an optional object containing any of these fields:\n\n* `headers` - an object containing key-value pairs representing HTTP headers to\n  be sent during the handshake process\n* `maxLength` - the maximum allowed size of incoming message frames, in bytes.\n  The default value is `2^30 - 1`, or 1 byte short of 1 GiB.\n* `ping` - an integer that sets how often the WebSocket should send ping\n  frames, measured in seconds\n\n\n## WebSocket API\n\nBoth server- and client-side `WebSocket` objects support the following API.\n\n* <b>`on('open', function(event) {})`</b> fires when the socket connection is\n  established. Event has no attributes.\n* <b>`on('message', function(event) {})`</b> fires when the socket receives a\n  message. Event has one attribute, <b>`data`</b>, which is either a `String`\n  (for text frames) or a `Buffer` (for binary frames).\n* <b>`on('error', function(event) {})`</b> fires when there is a protocol error\n  due to bad data sent by the other peer. This event is purely informational,\n  you do not need to implement error recover.\n* <b>`on('close', function(event) {})`</b> fires when either the client or the\n  server closes the connection. Event has two optional attributes,\n  <b>`code`</b> and <b>`reason`</b>, that expose the status code and message\n  sent by the peer that closed the connection.\n* <b>`send(message)`</b> accepts either a `String` or a `Buffer` and sends a\n  text or binary message over the connection to the other peer.\n* <b>`ping(message = '', function() {})`</b> sends a ping frame with an\n  optional message and fires the callback when a matching pong is received.\n* <b>`close(code, reason)`</b> closes the connection, sending the given status\n  code and reason text, both of which are optional.\n* <b>`version`</b> is a string containing the version of the `WebSocket`\n  protocol the connection is using.\n* <b>`protocol`</b> is a string (which may be empty) identifying the\n  subprotocol the socket is using.\n\n\n## Handling EventSource connections in Node\n\nEventSource connections provide a very similar interface, although because they\nonly allow the server to send data to the client, there is no `onmessage` API.\nEventSource allows the server to push text messages to the client, where each\nmessage has an optional event-type and ID.\n\n```js\nvar WebSocket   = require('faye-websocket'),\n    EventSource = WebSocket.EventSource,\n    http        = require('http');\n\nvar server = http.createServer();\n\nserver.on('request', function(request, response) {\n  if (EventSource.isEventSource(request)) {\n    var es = new EventSource(request, response);\n    console.log('open', es.url, es.lastEventId);\n    \n    // Periodically send messages\n    var loop = setInterval(function() { es.send('Hello') }, 1000);\n    \n    es.on('close', function() {\n      clearInterval(loop);\n      es = null;\n    });\n  \n  } else {\n    // Normal HTTP request\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n    response.end('Hello');\n  }\n});\n\nserver.listen(8000);\n```\n\nThe `send` method takes two optional parameters, `event` and `id`. The default\nevent-type is `'message'` with no ID. For example, to send a `notification`\nevent with ID `99`:\n\n```js\nes.send('Breaking News!', {event: 'notification', id: '99'});\n```\n\nThe `EventSource` object exposes the following properties:\n\n* <b>`url`</b> is a string containing the URL the client used to create the\n  EventSource.\n* <b>`lastEventId`</b> is a string containing the last event ID received by the\n  client. You can use this when the client reconnects after a dropped\n  connection to determine which messages need resending.\n\nWhen you initialize an EventSource with ` new EventSource()`, you can pass\nconfiguration options after the `response` parameter. Available options are:\n\n* <b>`headers`</b> is an object containing custom headers to be set on the\n  EventSource response.\n* <b>`retry`</b> is a number that tells the client how long (in seconds) it\n  should wait after a dropped connection before attempting to reconnect.\n* <b>`ping`</b> is a number that tells the server how often (in seconds) to\n  send 'ping' packets to the client to keep the connection open, to defeat\n  timeouts set by proxies. The client will ignore these messages.\n\nFor example, this creates a connection that allows access from any origin, pings\nevery 15 seconds and is retryable every 10 seconds if the connection is broken:\n\n```js\nvar es = new EventSource(request, response, {\n  headers: {'Access-Control-Allow-Origin': '*'},\n  ping:    15,\n  retry:   10\n});\n```\n\nYou can send a ping message at any time by calling `es.ping()`. Unlike\nWebSocket, the client does not send a response to this; it is merely to send\nsome data over the wire to keep the connection alive.\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2010-2013 James Coglan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n","readmeFilename":"README.md","_id":"faye-websocket@0.7.1","dist":{"shasum":"72fe630d122333e0f36ac453f593ed70e1cb6baa","tarball":"http://registry.npmjs.org/faye-websocket/-/faye-websocket-0.7.1.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"jcoglan","email":"jcoglan@gmail.com"},"maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"directories":{}},"0.7.2":{"name":"faye-websocket","description":"Standards-compliant WebSocket server and client","homepage":"http://github.com/faye/faye-websocket-node","author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"keywords":["websocket","eventsource"],"license":"MIT","version":"0.7.2","engines":{"node":">=0.4.0"},"main":"./lib/faye/websocket","dependencies":{"websocket-driver":">=0.3.1"},"devDependencies":{"jstest":"","pace":""},"scripts":{"test":"jstest spec/runner.js"},"repository":{"type":"git","url":"git://github.com/faye/faye-websocket-node.git"},"bugs":{"url":"http://github.com/faye/faye-websocket-node/issues"},"readme":"# faye-websocket\n\n* Travis CI build: [![Build\n  status](https://secure.travis-ci.org/faye/faye-websocket-node.png)](http://travis-ci.org/faye/faye-websocket-node)\n* Autobahn tests: [server](http://faye.jcoglan.com/autobahn/servers/),\n  [client](http://faye.jcoglan.com/autobahn/clients/)\n\nThis is a general-purpose WebSocket implementation extracted from the\n[Faye](http://faye.jcoglan.com) project. It provides classes for easily\nbuilding WebSocket servers and clients in Node. It does not provide a server\nitself, but rather makes it easy to handle WebSocket connections within an\nexisting [Node](http://nodejs.org/) application. It does not provide any\nabstraction other than the standard [WebSocket\nAPI](http://dev.w3.org/html5/websockets/).\n\nIt also provides an abstraction for handling\n[EventSource](http://dev.w3.org/html5/eventsource/) connections, which are\none-way connections that allow the server to push data to the client. They are\nbased on streaming HTTP responses and can be easier to access via proxies than\nWebSockets.\n\n\n## Installation\n\n```\n$ npm install faye-websocket\n```\n\n\n## Handling WebSocket connections in Node\n\nYou can handle WebSockets on the server side by listening for HTTP Upgrade\nrequests, and creating a new socket for the request. This socket object exposes\nthe usual WebSocket methods for receiving and sending messages. For example this\nis how you'd implement an echo server:\n\n```js\nvar WebSocket = require('faye-websocket'),\n    http      = require('http');\n\nvar server = http.createServer();\n\nserver.on('upgrade', function(request, socket, body) {\n  if (WebSocket.isWebSocket(request)) {\n    var ws = new WebSocket(request, socket, body);\n    \n    ws.on('message', function(event) {\n      ws.send(event.data);\n    });\n    \n    ws.on('close', function(event) {\n      console.log('close', event.code, event.reason);\n      ws = null;\n    });\n  }\n});\n\nserver.listen(8000);\n```\n\n`WebSocket` objects are also duplex streams, so you could replace the\n`ws.on('message', ...)` line with:\n\n```js\n    ws.pipe(ws);\n```\n\nNote that under certain circumstances (notably a draft-76 client connecting\nthrough an HTTP proxy), the WebSocket handshake will not be complete after you\ncall `new WebSocket()` because the server will not have received the entire\nhandshake from the client yet. In this case, calls to `ws.send()` will buffer\nthe message in memory until the handshake is complete, at which point any\nbuffered messages will be sent to the client.\n\nIf you need to detect when the WebSocket handshake is complete, you can use the\n`onopen` event.\n\nIf the connection's protocol version supports it, you can call `ws.ping()` to\nsend a ping message and wait for the client's response. This method takes a\nmessage string, and an optional callback that fires when a matching pong\nmessage is received. It returns `true` iff a ping message was sent. If the\nclient does not support ping/pong, this method sends no data and returns\n`false`.\n\n```js\nws.ping('Mic check, one, two', function() {\n  // fires when pong is received\n});\n```\n\n\n## Using the WebSocket client\n\nThe client supports both the plain-text `ws` protocol and the encrypted `wss`\nprotocol, and has exactly the same interface as a socket you would use in a web\nbrowser. On the wire it identifies itself as `hybi-13`.\n\n```js\nvar WebSocket = require('faye-websocket'),\n    ws        = new WebSocket.Client('ws://www.example.com/');\n\nws.on('open', function(event) {\n  console.log('open');\n  ws.send('Hello, world!');\n});\n\nws.on('message', function(event) {\n  console.log('message', event.data);\n});\n\nws.on('close', function(event) {\n  console.log('close', event.code, event.reason);\n  ws = null;\n});\n```\n\nThe WebSocket client also lets you inspect the status and headers of the\nhandshake response via its `statusCode` and `headers` properties.\n\n\n## Subprotocol negotiation\n\nThe WebSocket protocol allows peers to select and identify the application\nprotocol to use over the connection. On the client side, you can set which\nprotocols the client accepts by passing a list of protocol names when you\nconstruct the socket:\n\n```js\nvar ws = new WebSocket.Client('ws://www.example.com/', ['irc', 'amqp']);\n```\n\nOn the server side, you can likewise pass in the list of protocols the server\nsupports after the other constructor arguments:\n\n```js\nvar ws = new WebSocket(request, socket, body, ['irc', 'amqp']);\n```\n\nIf the client and server agree on a protocol, both the client- and server-side\nsocket objects expose the selected protocol through the `ws.protocol` property.\n\n\n## Initialization options\n\nBoth the server- and client-side classes allow an options object to be passed\nin at initialization time, for example:\n\n```js\nvar ws = new WebSocket(request, socket, body, protocols, options);\nvar ws = new WebSocket.Client(url, protocols, options);\n```\n\n`protocols` is an array of subprotocols as described above, or `null`.\n`options` is an optional object containing any of these fields:\n\n* `headers` - an object containing key-value pairs representing HTTP headers to\n  be sent during the handshake process\n* `maxLength` - the maximum allowed size of incoming message frames, in bytes.\n  The default value is `2^26 - 1`, or 1 byte short of 64 MiB.\n* `ping` - an integer that sets how often the WebSocket should send ping\n  frames, measured in seconds\n\n\n## WebSocket API\n\nBoth server- and client-side `WebSocket` objects support the following API.\n\n* <b>`on('open', function(event) {})`</b> fires when the socket connection is\n  established. Event has no attributes.\n* <b>`on('message', function(event) {})`</b> fires when the socket receives a\n  message. Event has one attribute, <b>`data`</b>, which is either a `String`\n  (for text frames) or a `Buffer` (for binary frames).\n* <b>`on('error', function(event) {})`</b> fires when there is a protocol error\n  due to bad data sent by the other peer. This event is purely informational,\n  you do not need to implement error recover.\n* <b>`on('close', function(event) {})`</b> fires when either the client or the\n  server closes the connection. Event has two optional attributes,\n  <b>`code`</b> and <b>`reason`</b>, that expose the status code and message\n  sent by the peer that closed the connection.\n* <b>`send(message)`</b> accepts either a `String` or a `Buffer` and sends a\n  text or binary message over the connection to the other peer.\n* <b>`ping(message = '', function() {})`</b> sends a ping frame with an\n  optional message and fires the callback when a matching pong is received.\n* <b>`close(code, reason)`</b> closes the connection, sending the given status\n  code and reason text, both of which are optional.\n* <b>`version`</b> is a string containing the version of the `WebSocket`\n  protocol the connection is using.\n* <b>`protocol`</b> is a string (which may be empty) identifying the\n  subprotocol the socket is using.\n\n\n## Handling EventSource connections in Node\n\nEventSource connections provide a very similar interface, although because they\nonly allow the server to send data to the client, there is no `onmessage` API.\nEventSource allows the server to push text messages to the client, where each\nmessage has an optional event-type and ID.\n\n```js\nvar WebSocket   = require('faye-websocket'),\n    EventSource = WebSocket.EventSource,\n    http        = require('http');\n\nvar server = http.createServer();\n\nserver.on('request', function(request, response) {\n  if (EventSource.isEventSource(request)) {\n    var es = new EventSource(request, response);\n    console.log('open', es.url, es.lastEventId);\n    \n    // Periodically send messages\n    var loop = setInterval(function() { es.send('Hello') }, 1000);\n    \n    es.on('close', function() {\n      clearInterval(loop);\n      es = null;\n    });\n  \n  } else {\n    // Normal HTTP request\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n    response.end('Hello');\n  }\n});\n\nserver.listen(8000);\n```\n\nThe `send` method takes two optional parameters, `event` and `id`. The default\nevent-type is `'message'` with no ID. For example, to send a `notification`\nevent with ID `99`:\n\n```js\nes.send('Breaking News!', {event: 'notification', id: '99'});\n```\n\nThe `EventSource` object exposes the following properties:\n\n* <b>`url`</b> is a string containing the URL the client used to create the\n  EventSource.\n* <b>`lastEventId`</b> is a string containing the last event ID received by the\n  client. You can use this when the client reconnects after a dropped\n  connection to determine which messages need resending.\n\nWhen you initialize an EventSource with ` new EventSource()`, you can pass\nconfiguration options after the `response` parameter. Available options are:\n\n* <b>`headers`</b> is an object containing custom headers to be set on the\n  EventSource response.\n* <b>`retry`</b> is a number that tells the client how long (in seconds) it\n  should wait after a dropped connection before attempting to reconnect.\n* <b>`ping`</b> is a number that tells the server how often (in seconds) to\n  send 'ping' packets to the client to keep the connection open, to defeat\n  timeouts set by proxies. The client will ignore these messages.\n\nFor example, this creates a connection that allows access from any origin, pings\nevery 15 seconds and is retryable every 10 seconds if the connection is broken:\n\n```js\nvar es = new EventSource(request, response, {\n  headers: {'Access-Control-Allow-Origin': '*'},\n  ping:    15,\n  retry:   10\n});\n```\n\nYou can send a ping message at any time by calling `es.ping()`. Unlike\nWebSocket, the client does not send a response to this; it is merely to send\nsome data over the wire to keep the connection alive.\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2010-2013 James Coglan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n","readmeFilename":"README.md","_id":"faye-websocket@0.7.2","dist":{"shasum":"799970386f87105592397434b02abfa4f07bdf70","tarball":"http://registry.npmjs.org/faye-websocket/-/faye-websocket-0.7.2.tgz"},"_from":".","_npmVersion":"1.3.21","_npmUser":{"name":"jcoglan","email":"jcoglan@gmail.com"},"maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"directories":{}}},"readme":"# faye-websocket\n\n* Travis CI build: [![Build\n  status](https://secure.travis-ci.org/faye/faye-websocket-node.png)](http://travis-ci.org/faye/faye-websocket-node)\n* Autobahn tests: [server](http://faye.jcoglan.com/autobahn/servers/),\n  [client](http://faye.jcoglan.com/autobahn/clients/)\n\nThis is a general-purpose WebSocket implementation extracted from the\n[Faye](http://faye.jcoglan.com) project. It provides classes for easily\nbuilding WebSocket servers and clients in Node. It does not provide a server\nitself, but rather makes it easy to handle WebSocket connections within an\nexisting [Node](http://nodejs.org/) application. It does not provide any\nabstraction other than the standard [WebSocket\nAPI](http://dev.w3.org/html5/websockets/).\n\nIt also provides an abstraction for handling\n[EventSource](http://dev.w3.org/html5/eventsource/) connections, which are\none-way connections that allow the server to push data to the client. They are\nbased on streaming HTTP responses and can be easier to access via proxies than\nWebSockets.\n\n\n## Installation\n\n```\n$ npm install faye-websocket\n```\n\n\n## Handling WebSocket connections in Node\n\nYou can handle WebSockets on the server side by listening for HTTP Upgrade\nrequests, and creating a new socket for the request. This socket object exposes\nthe usual WebSocket methods for receiving and sending messages. For example this\nis how you'd implement an echo server:\n\n```js\nvar WebSocket = require('faye-websocket'),\n    http      = require('http');\n\nvar server = http.createServer();\n\nserver.on('upgrade', function(request, socket, body) {\n  if (WebSocket.isWebSocket(request)) {\n    var ws = new WebSocket(request, socket, body);\n    \n    ws.on('message', function(event) {\n      ws.send(event.data);\n    });\n    \n    ws.on('close', function(event) {\n      console.log('close', event.code, event.reason);\n      ws = null;\n    });\n  }\n});\n\nserver.listen(8000);\n```\n\n`WebSocket` objects are also duplex streams, so you could replace the\n`ws.on('message', ...)` line with:\n\n```js\n    ws.pipe(ws);\n```\n\nNote that under certain circumstances (notably a draft-76 client connecting\nthrough an HTTP proxy), the WebSocket handshake will not be complete after you\ncall `new WebSocket()` because the server will not have received the entire\nhandshake from the client yet. In this case, calls to `ws.send()` will buffer\nthe message in memory until the handshake is complete, at which point any\nbuffered messages will be sent to the client.\n\nIf you need to detect when the WebSocket handshake is complete, you can use the\n`onopen` event.\n\nIf the connection's protocol version supports it, you can call `ws.ping()` to\nsend a ping message and wait for the client's response. This method takes a\nmessage string, and an optional callback that fires when a matching pong\nmessage is received. It returns `true` iff a ping message was sent. If the\nclient does not support ping/pong, this method sends no data and returns\n`false`.\n\n```js\nws.ping('Mic check, one, two', function() {\n  // fires when pong is received\n});\n```\n\n\n## Using the WebSocket client\n\nThe client supports both the plain-text `ws` protocol and the encrypted `wss`\nprotocol, and has exactly the same interface as a socket you would use in a web\nbrowser. On the wire it identifies itself as `hybi-13`.\n\n```js\nvar WebSocket = require('faye-websocket'),\n    ws        = new WebSocket.Client('ws://www.example.com/');\n\nws.on('open', function(event) {\n  console.log('open');\n  ws.send('Hello, world!');\n});\n\nws.on('message', function(event) {\n  console.log('message', event.data);\n});\n\nws.on('close', function(event) {\n  console.log('close', event.code, event.reason);\n  ws = null;\n});\n```\n\nThe WebSocket client also lets you inspect the status and headers of the\nhandshake response via its `statusCode` and `headers` properties.\n\n\n## Subprotocol negotiation\n\nThe WebSocket protocol allows peers to select and identify the application\nprotocol to use over the connection. On the client side, you can set which\nprotocols the client accepts by passing a list of protocol names when you\nconstruct the socket:\n\n```js\nvar ws = new WebSocket.Client('ws://www.example.com/', ['irc', 'amqp']);\n```\n\nOn the server side, you can likewise pass in the list of protocols the server\nsupports after the other constructor arguments:\n\n```js\nvar ws = new WebSocket(request, socket, body, ['irc', 'amqp']);\n```\n\nIf the client and server agree on a protocol, both the client- and server-side\nsocket objects expose the selected protocol through the `ws.protocol` property.\n\n\n## Initialization options\n\nBoth the server- and client-side classes allow an options object to be passed\nin at initialization time, for example:\n\n```js\nvar ws = new WebSocket(request, socket, body, protocols, options);\nvar ws = new WebSocket.Client(url, protocols, options);\n```\n\n`protocols` is an array of subprotocols as described above, or `null`.\n`options` is an optional object containing any of these fields:\n\n* `headers` - an object containing key-value pairs representing HTTP headers to\n  be sent during the handshake process\n* `maxLength` - the maximum allowed size of incoming message frames, in bytes.\n  The default value is `2^26 - 1`, or 1 byte short of 64 MiB.\n* `ping` - an integer that sets how often the WebSocket should send ping\n  frames, measured in seconds\n\n\n## WebSocket API\n\nBoth server- and client-side `WebSocket` objects support the following API.\n\n* <b>`on('open', function(event) {})`</b> fires when the socket connection is\n  established. Event has no attributes.\n* <b>`on('message', function(event) {})`</b> fires when the socket receives a\n  message. Event has one attribute, <b>`data`</b>, which is either a `String`\n  (for text frames) or a `Buffer` (for binary frames).\n* <b>`on('error', function(event) {})`</b> fires when there is a protocol error\n  due to bad data sent by the other peer. This event is purely informational,\n  you do not need to implement error recover.\n* <b>`on('close', function(event) {})`</b> fires when either the client or the\n  server closes the connection. Event has two optional attributes,\n  <b>`code`</b> and <b>`reason`</b>, that expose the status code and message\n  sent by the peer that closed the connection.\n* <b>`send(message)`</b> accepts either a `String` or a `Buffer` and sends a\n  text or binary message over the connection to the other peer.\n* <b>`ping(message = '', function() {})`</b> sends a ping frame with an\n  optional message and fires the callback when a matching pong is received.\n* <b>`close(code, reason)`</b> closes the connection, sending the given status\n  code and reason text, both of which are optional.\n* <b>`version`</b> is a string containing the version of the `WebSocket`\n  protocol the connection is using.\n* <b>`protocol`</b> is a string (which may be empty) identifying the\n  subprotocol the socket is using.\n\n\n## Handling EventSource connections in Node\n\nEventSource connections provide a very similar interface, although because they\nonly allow the server to send data to the client, there is no `onmessage` API.\nEventSource allows the server to push text messages to the client, where each\nmessage has an optional event-type and ID.\n\n```js\nvar WebSocket   = require('faye-websocket'),\n    EventSource = WebSocket.EventSource,\n    http        = require('http');\n\nvar server = http.createServer();\n\nserver.on('request', function(request, response) {\n  if (EventSource.isEventSource(request)) {\n    var es = new EventSource(request, response);\n    console.log('open', es.url, es.lastEventId);\n    \n    // Periodically send messages\n    var loop = setInterval(function() { es.send('Hello') }, 1000);\n    \n    es.on('close', function() {\n      clearInterval(loop);\n      es = null;\n    });\n  \n  } else {\n    // Normal HTTP request\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n    response.end('Hello');\n  }\n});\n\nserver.listen(8000);\n```\n\nThe `send` method takes two optional parameters, `event` and `id`. The default\nevent-type is `'message'` with no ID. For example, to send a `notification`\nevent with ID `99`:\n\n```js\nes.send('Breaking News!', {event: 'notification', id: '99'});\n```\n\nThe `EventSource` object exposes the following properties:\n\n* <b>`url`</b> is a string containing the URL the client used to create the\n  EventSource.\n* <b>`lastEventId`</b> is a string containing the last event ID received by the\n  client. You can use this when the client reconnects after a dropped\n  connection to determine which messages need resending.\n\nWhen you initialize an EventSource with ` new EventSource()`, you can pass\nconfiguration options after the `response` parameter. Available options are:\n\n* <b>`headers`</b> is an object containing custom headers to be set on the\n  EventSource response.\n* <b>`retry`</b> is a number that tells the client how long (in seconds) it\n  should wait after a dropped connection before attempting to reconnect.\n* <b>`ping`</b> is a number that tells the server how often (in seconds) to\n  send 'ping' packets to the client to keep the connection open, to defeat\n  timeouts set by proxies. The client will ignore these messages.\n\nFor example, this creates a connection that allows access from any origin, pings\nevery 15 seconds and is retryable every 10 seconds if the connection is broken:\n\n```js\nvar es = new EventSource(request, response, {\n  headers: {'Access-Control-Allow-Origin': '*'},\n  ping:    15,\n  retry:   10\n});\n```\n\nYou can send a ping message at any time by calling `es.ping()`. Unlike\nWebSocket, the client does not send a response to this; it is merely to send\nsome data over the wire to keep the connection alive.\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2010-2013 James Coglan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n","maintainers":[{"name":"jcoglan","email":"jcoglan@gmail.com"}],"time":{"0.1.0":"2011-11-28T09:14:30.572Z","0.1.1":"2011-11-30T00:57:50.689Z","0.1.2":"2011-12-05T09:59:27.990Z","0.2.0":"2011-12-21T01:32:48.433Z","0.3.0":"2012-01-13T21:47:51.142Z","0.3.1":"2012-01-16T20:37:57.952Z","0.4.0":"2012-02-13T13:55:51.397Z","0.4.1":"2012-02-26T19:00:56.585Z","0.4.2":"2012-08-23T12:55:40.507Z","0.4.3":"2012-08-23T12:56:31.937Z","0.4.4":"2013-02-15T01:40:58.615Z","0.5.0":"2013-05-05T00:52:21.933Z","0.6.0":"2013-05-12T16:42:22.738Z","0.6.1":"2013-07-05T14:19:18.633Z","0.7.0":"2013-09-09T21:23:12.135Z","0.7.1":"2013-12-03T00:49:59.632Z","0.7.2":"2013-12-29T12:31:14.993Z"},"author":{"name":"James Coglan","email":"jcoglan@gmail.com","url":"http://jcoglan.com/"},"repository":{"type":"git","url":"git://github.com/faye/faye-websocket-node.git"},"_attachments":{"faye-websocket-0.7.1.tgz":{"content_type":"application/octet-stream","revpos":44,"digest":"md5-gKagUpzF9zY0pBhCnP807A==","length":9996,"stub":true},"faye-websocket-0.7.0.tgz":{"content_type":"application/octet-stream","revpos":42,"digest":"md5-WuJuSLVXmi+8hYv4UoYMYw==","length":9860,"stub":true},"faye-websocket-0.6.1.tgz":{"content_type":"application/octet-stream","revpos":40,"digest":"md5-ygTuhgR/uaeSDMFJc9jxPA==","length":9683,"stub":true},"faye-websocket-0.6.0.tgz":{"content_type":"application/octet-stream","revpos":38,"digest":"md5-Yo14sHBK6nYdtIsBtCtsmg==","length":9645,"stub":true},"faye-websocket-0.5.0.tgz":{"content_type":"application/octet-stream","revpos":36,"digest":"md5-aHqiA6WmpvOiRme6TxpKvA==","length":9218,"stub":true},"faye-websocket-0.4.4.tgz":{"content_type":"application/octet-stream","revpos":35,"digest":"md5-jOIppGqozOTKrR+XeX8FQg==","length":19112,"stub":true},"faye-websocket-0.4.3.tgz":{"content_type":"application/octet-stream","revpos":33,"digest":"md5-Z30OA6jvIxlloAFmhE1zew==","length":18931,"stub":true},"faye-websocket-0.4.2.tgz":{"content_type":"application/octet-stream","revpos":29,"digest":"md5-MzK0x22P2u0K/qKOOt0Dbg==","length":18950,"stub":true},"faye-websocket-0.4.1.tgz":{"content_type":"application/octet-stream","revpos":21,"digest":"md5-E16Pzv31DIUMEIrwPcl5jw==","length":19347,"stub":true},"faye-websocket-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-FVLmHkMKHgx7UjSB8Rl9xQ==","length":19171,"stub":true},"faye-websocket-0.3.1.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-J4xJwwJaXwKnsTWEwdxYOg==","length":18224,"stub":true},"faye-websocket-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":11,"digest":"md5-W5GgmdRa4Rqstlv7Bw5YSA==","length":18142,"stub":true},"faye-websocket-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-9IDIB+GI5HwabTtfgCYChw==","length":16251,"stub":true},"faye-websocket-0.1.2.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-rd+sna8yFinFEgIisCnU7g==","length":216650,"stub":true},"faye-websocket-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-A3zHY26uc83APHkKVYQvEA==","length":13990,"stub":true},"faye-websocket-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-CQTyTW8NKYGN+hNCriTpeA==","length":215040,"stub":true},"faye-websocket-0.7.2.tgz":{"content_type":"application/octet-stream","revpos":46,"digest":"md5-D+h+tXWagoiuAnE/kydG7w==","length":10023,"stub":true}},"_etag":"\"78Z7Y57RQXSG422C9AFQ4HB9T\""}